# TypeProf 0.21.8

type button_enum = :LEFT | :UP | :RIGHT | :DOWN | :A | :B | :X | :Y | :L | :R | :SHIFT | :CTRL |
  :ALT | :F5 | :F6 | :F7 | :F8 | :F9

# Classes
module Input
  LEFT: button_enum
  UP: button_enum
  RIGHT: button_enum
  DOWN: button_enum
  A: button_enum
  B: button_enum
  C: button_enum
  X: button_enum
  Y: button_enum
  Z: button_enum
  L: button_enum
  R: button_enum
  SHIFT: button_enum
  CTRL: button_enum
  ALT: button_enum
  F5: button_enum
  F6: button_enum
  F7: button_enum
  F8: button_enum
  F9: button_enum

  MOUSELEFT: button_enum
  MOUSERIGHT: button_enum

  def self?.update: -> void
  def self?.press?: (button_enum sym) -> bool
  def self?.trigger?: (button_enum sym) -> bool
  def self?.repeat?: (button_enum sym) -> bool
  def self?.release?: (button_enum sym) -> bool
  def self?.pressex?: (Symbol | Integer sym) -> bool
  def self?.triggerex?: (Symbol | Integer sym) -> bool
  def self?.repeatex?: (Symbol | Integer sym) -> bool
  def self?.releaseex?: (Symbol | Integer sym) -> bool
  def self?.dir4: -> Integer
  def self?.dir8: -> Integer

  def self?.gets: -> String
  def self?.raw_key_state: -> bool
  def self?.scroll_v: -> Integer
  def self?.mouse_x: -> Integer
  def self?.mouse_y: -> Integer
  def self?.mouse_in_window?: -> bool
  def self?.time?: (button_enum i) -> number

  module Controller

    def connected?: -> bool
    def name: -> String
    def pressex?: (Symbol | Integer sym) -> bool
    def triggerex?: (Symbol | Integer sym) -> bool
    def repeatex?: (Symbol | Integer sym) -> bool
    def releaseex?: (Symbol | Integer sym) -> bool
    def power_level: -> Symbol
    def axes_left: -> number
    def axes_right: -> number
    def axes_trigger: -> Array[number]
    def raw_button_states: -> Array[bool]
    def raw_axes: -> Array[number]

  end

  def self?.text_input: -> bool
  def self?.text_input=: (bool) -> bool
  def self?.clipboard: -> String
  def self?.clipboard=: (String) -> String
  def self?.show_cursor: -> bool
  def self?.show_cursort=: (bool) -> bool

end

