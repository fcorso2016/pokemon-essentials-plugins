# TypeProf 0.21.3

# Classes
class Window_UnformattedTextPokemon < SpriteWindow_Base
  include _Refreshable

  attr_reader text: String
  attr_reader baseColor: Color
  attr_reader shadowColor: Color
  attr_accessor letterbyletter: bool
  def text=: (String value) -> void
  def baseColor=: (Color value) -> void
  def shadowColor=: (Color value) -> void
  def initialize: (?String text) -> void
  def self.newWithSize: (String text, Integer x, Integer y, Integer width, Integer height, ?Viewport viewport) -> Window_UnformattedTextPokemon
  def resizeToFitInternal: (String text, Integer maxwidth) -> void
  def setTextToFit: (String text, ?Integer maxwidth) -> void
  def resizeToFit: (String text, ?Integer maxwidth) -> void
  def resizeHeightToFit: (String text, ?Integer width) -> void
end

class Window_AdvancedTextPokemon < SpriteWindow_Base
  include _Refreshable

  @endOfText: Rect?
  @scrollstate: Integer
  @scrollY: number
  @scroll_timer_start: number?
  @realframes: Integer
  @nodraw: bool
  @lineHeight: Integer
  @linesdrawn: Integer
  @bufferbitmap: AnimatedBitmap?
  @starting: bool
  @displaying: bool
  @lastDrawnChar: Integer
  @fmtchars: Array[String]
  @text_delay_changed: bool
  @text_delay: number?
  @pausesprite: AnimatedSprite?
  @numtextchars: Integer
  @wait_timer_start: number?
  @display_timer: number
  @display_last_updated: number?
  @curchar: Integer
  @drawncurchar: Integer
  @textlength: Integer
  @textchars: Array[String]
  @bitmapwidth: Integer
  @bitmapheight: Integer
  @oldfont: String
  @needclear: bool
  @lastchar: Integer
  @pausing: bool

  attr_reader text: String
  attr_reader baseColor: Color
  attr_reader shadowColor: Color
  attr_accessor letterbyletter: bool
  attr_reader waitcount: number
  def initialize: (?String text) -> void
  def self.newWithSize: (String text, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> Window_AdvancedTextPokemon
  def waitcount=: (number value) -> void
  attr_reader cursorMode: Integer
  def cursorMode=: (Integer value) -> nil
  def lineHeight=: (Integer value) -> void
  def baseColor=: (Color value) -> void
  def shadowColor=: (Color value) -> void
  def textspeed: -> number
  def textspeed=: (number value) -> number
  def width=: (Integer value) -> String?
  def height=: (Integer value) -> String?
  def resizeToFit: (String text, ?Integer maxwidth) -> String?
  def resizeToFit2: (String text, Integer maxwidth, Integer maxheight) -> String?
  def resizeToFitInternal: (String text, Integer maxwidth) -> [Integer, Integer]
  def resizeHeightToFit: (String text, ?Integer width) -> String?
  def setSkin: (String skin, ?bool redrawText) -> Integer?
  def setTextToFit: (String text, ?Integer maxwidth) -> untyped
  def text=: (String value) -> void
  def setText: (String value) -> void
  def busy?: -> bool
  def pausing?: -> bool
  def resume: -> bool
  def position: -> Integer
  def maxPosition: -> Integer
  def skipAhead: -> void
  def allocPause: -> void
  def startPause: -> void
  def stopPause: -> void
  def moveCursor: -> void
  def redrawText: -> void
  def updateInternal: -> void

  private
  def curcharSkip: (?bool instant) -> bool
end

class Window_InputNumberPokemon < SpriteWindow_Base
  include _Refreshable

  @digits_max: Integer
  @number: Integer
  @cursor_timer_start: number
  @cursor_shown: bool
  @negative: bool
  @baseColor: Color
  @shadowColor: Color
  @index: Integer

  attr_reader sign: bool
  def initialize: (Integer digits_max) -> void
  def number: -> Integer
  def number=: (Integer value) -> void
  def sign=: (bool value) -> void

  private
  def textHelper: (Integer x, Integer y, String text, Integer i) -> void
end

class SpriteWindow_Selectable < SpriteWindow_Base
  include _Refreshable

  @item_max: Integer
  @column_max: Integer
  @virtualOy: Integer
  @row_height: Integer?
  @column_spacing: Integer

  attr_reader index: Integer
  attr_writer ignore_input: bool
  def initialize: (Integer x, Integer y, Integer width, Integer height) -> void
  def itemCount: -> Integer
  def index=: (Integer index) -> void
  def rowHeight: -> Integer
  def rowHeight=: (Integer value) -> void
  def columns: -> Integer
  def columns=: (Integer value) -> void
  def columnSpacing: -> Integer
  def columnSpacing=: (Integer value) -> void
  def count: -> Integer
  def row_max: -> Integer
  def top_row: -> Integer
  def top_row=: (Integer row) -> void
  def top_item: -> Integer
  def page_row_max: -> Integer
  def page_item_max: -> Integer
  def itemRect: (Integer item) -> Rect
  def update_cursor_rect: -> void

  private
  def priv_page_row_max: -> Integer
  def priv_page_item_max: -> Integer
  def priv_update_cursor_rect: (?bool force) -> Rect
end

module UpDownArrowMixin
  include _Updatable
  include _Disposable

  @uparrow: AnimatedSprite
  @downarrow: AnimatedSprite
  @item_max: Integer

  def initUpDownArrow: -> void
  def viewport=: (Viewport? value) -> void
  def color=: (Color value) -> void
  def adjustForZoom: (AnimatedSprite sprite) -> void
end

class SpriteWindow_SelectableEx < SpriteWindow_Selectable
  include UpDownArrowMixin

  def initialize: (Integer x, Integer y, Integer width, Integer height) -> void
end

class Window_DrawableCommand < SpriteWindow_SelectableEx
  @item_max: Integer
  @selarrow: AnimatedBitmap

  attr_reader baseColor: Color
  attr_reader shadowColor: Color
  def initialize: (Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> void
  def baseColor=: (Color value) -> void
  def shadowColor=: (Color value) -> void
  def textWidth: (AnimatedBitmap bitmap, String text) -> Integer
  def getAutoDims: (Array[String] commands, [Integer, Integer] dims, ?Integer? width) -> void
  def drawCursor: (Integer index, Rect rect) -> void
  def drawItem: (Integer index, Integer count, Rect rect) -> void
end

class Window_CommandPokemon < Window_DrawableCommand
  @starting: bool
  @item_max: Integer

  attr_reader commands: Array[String]
  def initialize: (Array[String] commands, ?Integer? width) -> void
  def self.newWithSize: (Array[String] commands, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> Window_CommandPokemon
  def self.newEmpty: (Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> Window_CommandPokemon
  def commands=: (Array[String] value) -> void
  def resizeToFit: (Array[String] commands, ?Integer? width) -> void
  def itemCount: -> Integer
end

class Window_CommandPokemonEx < Window_CommandPokemon
end

class Window_AdvancedCommandPokemon < Window_DrawableCommand
  @starting: bool
  @item_max: Integer

  attr_reader commands: Array[String]
  def textWidth: (AnimatedBitmap bitmap, String text) -> untyped
  def initialize: (Array[String] commands, ?Integer? width) -> void
  def self.newWithSize: (Array[String] commands, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> Window_AdvancedCommandPokemon
  def self.newEmpty: (Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> Window_AdvancedCommandPokemon
  def commands=: (Array[String] value) -> void
  def resizeToFit: (Array[String] commands, ?Integer? width) -> void
end

class Window_AdvancedCommandPokemonEx < Window_AdvancedCommandPokemon
end



