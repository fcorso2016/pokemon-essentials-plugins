# TypeProf 0.21.3

# Classes
FORMATREGEXP: Regexp

type alignment = (:left | false | 0) | (:center | 2) | (:right | true | 1)
type has_outline = (:outline | true | 1) | (:none | false | 0)
type text_position = [String, Integer, Integer, alignment, Color, Color, has_outline]

class Object

  private
  def ctag: (Color color) -> String
  def shadowctag: (Color base, Color shadow) -> String
  def shadowc3tag: (Color base, Color shadow) -> String
  def shadowctagFromColor: (Color color) -> String
  def shadowctagFromRgb: (Integer param) -> String
  def colorToRgb32: (Color color) -> String
  def colorToRgb16: (Color color) -> String
  def rgbToColor: (Integer param) -> Color
  def rgb15ToColor: (Integer param) -> Color
  def getContrastColor: (Color color) -> Color
  def fmtEscape: (String text) -> String
  def fmtReplaceEscapes: (String text) -> void
  def toUnformattedText: (String text) -> String
  def unformattedTextLength: (String text) -> Integer
  def itemIconTag: (RPG::Item item) -> String |
    (RPG::Skill item) -> String |
    (RPG::Weapon item) -> String |
    (RPG::Armor item) -> String
  def getFormattedTextForDims: (Bitmap bitmap, Integer xDst, Integer yDst, Integer widthDst, Integer heightDst, String text, Integer lineheight, ?bool newlineBreaks, ?bool explicitBreaksOnly) -> Array[String]
  def getFormattedTextFast: (Bitmap bitmap, Integer xDst, Integer yDst, Integer widthDst, Integer heightDst, String text, Integer lineheight, ?true newlineBreaks, ?false explicitBreaksOnly) -> Array[String]
  def isWaitChar: (String x) -> bool
  def getLastParam: [T] (Array[T] array, T default) -> T
  def getLastColors: (Array[Color] colorstack, Array[Numeric] opacitystack, Color defaultcolors) -> (Integer | String | [untyped, nil])
  def getFormattedText: (Bitmap bitmap, Integer xDst, Integer yDst, Integer widthDst, Integer heightDst, String text, ?Integer lineheight, ?bool newlineBreaks, ?bool explicitBreaksOnly, ?bool collapseAlignments) -> Array[String]
  def getLineBrokenText: (Bitmap bitmap, String value, Integer width, [Integer, Integer]? dims) -> Array[String]
  def getLineBrokenChunks: (Bitmap bitmap, String value, Integer width, [Integer, Integer] dims, ?bool plain) -> Array[Array[Integer]]
  def renderLineBrokenChunks: (Bitmap bitmap, Integer xDst, Integer yDst, String normtext, ?Integer maxheight) -> untyped
  def renderLineBrokenChunksWithShadow: (Bitmap bitmap, Integer xDst, Integer yDst, String normtext, Integer maxheight, Color baseColor, Color shadowColor) -> Array[Array[Integer]]
  def drawBitmapBuffer: (Array[String] chars) -> void
  def drawSingleFormattedChar: (Bitmap bitmap, String ch) -> void
  def drawFormattedChars: (Bitmap bitmap, Array[String] chars) -> void
  def drawTextTable: (Bitmap bitmap, Integer x, Integer y, Integer totalWidth, Integer rowHeight, Integer columnWidthPercents, untyped table) -> untyped
  def drawTextEx: (Bitmap bitmap, Integer x, Integer y, Integer width, Integer numlines, String text, Color baseColor, Color shadowColor) -> void
  def drawFormattedTextEx: (Bitmap bitmap, Integer x, Integer y, Integer width, String text, ?Color? baseColor, ?Color? shadowColor, ?Integer lineheight) -> void
  def pbDrawShadow: (Bitmap bitmap, Integer x, Integer y, Integer widget, Integer height, String string) -> void
  def pbDrawPlainText: (Bitmap bitmap, Integer x, Integer y, Integer width, Integer height, String string, Color baseColor, ?Integer align) -> void
  def pbDrawShadowText: (Bitmap bitmap, Integer x, Integer y, Integer width, Integer height, String string, Color? baseColor, ?Color? shadowColor, ?Integer align) -> void
  def pbDrawOutlineText: (Bitmap bitmap, Integer x, Integer y, Integer width, Integer height, String string, Color? baseColor, ?Color? shadowColor, ?Integer align) -> void
  def pbDrawTextPositions: (Bitmap bitmap, Array[text_position] textpos) -> void
  def pbCopyBitmap: (Bitmap dstbm, Bitmap srcbm, Integer x, Integer y, ?Numeric opacity) -> void
  def pbDrawImagePositions: (Bitmap bitmap, Array[text_position] textpos) -> void
end



