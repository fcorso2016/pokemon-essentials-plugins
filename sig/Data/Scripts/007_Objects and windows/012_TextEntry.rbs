# TypeProf 0.21.3

# Classes
class CharacterEntryHelper
  attr_accessor text: String
  attr_accessor maxlength: Integer
  attr_reader passwordChar: String
  attr_accessor cursor: Integer

  def initialize: (String text) -> void
  def textChars: -> (Array[Array[String] | String])
  def passwordChar=: (String? value) -> void
  def length: -> Integer
  def canInsert?: -> bool
  def insert: (String ch) -> bool
  def canDelete?: -> bool
  def delete: -> bool

  private
  def ensure: -> void
end

class Window_TextEntry < SpriteWindow_Base
  include _Refreshable

  @baseColor: Color
  @shadowColor: Color
  @helper: CharacterEntryHelper
  @heading: String?
  @cursor_timer_start: number
  @cursor_shown: bool

  def initialize: (String text, Integer x, Integer y, Integer width, Integer height, ?String? heading, ?bool usedarkercolor) -> void
  def text: -> String
  def maxlength: -> Integer
  def passwordChar: -> String
  def text=: (String value) -> void
  def passwordChar=: (String value) -> void
  def maxlength=: (Integer value) -> nil
  def insert: (String ch) -> bool
  def delete: -> bool
end

class Window_TextEntry_Keyboard < Window_TextEntry
end

class Window_MultilineTextEntry < SpriteWindow_Base
  include _Refreshable

  @helper: CharacterEntryHelper
  @firstline: Integer
  @cursorLine: Integer
  @cursorColumn: Integer
  @cursor_timer_start: number
  @cursor_shown: bool
  @textchars: Array[line_broken_text]

  def initialize: (String text, Integer x, Integer y, Integer width, Integer height) -> void
  attr_reader baseColor: Color
  attr_reader shadowColor: Color
  def baseColor=: (Color value) -> void
  def shadowColor=: (Color value) -> void
  def text: -> String
  def maxlength: -> Integer
  def text=: (String value) -> void
  def maxlength=: (Integer value) -> void
  def insert: (String ch) -> bool
  def delete: -> bool
  def getTextChars: -> Array[line_broken_text]
  def getTotalLines: -> Integer
  def getLineY: (Integer line) -> Integer
  def getColumnsInLine: (Integer line) -> Integer
  def getPosFromLineAndColumn: (Integer line, Integer column) -> Integer
  def getLastVisibleLine: -> Integer
  def updateCursorPos: (bool doRefresh) -> void
  def moveCursor: (Integer lineOffset, Integer columnOffset) -> void
end



