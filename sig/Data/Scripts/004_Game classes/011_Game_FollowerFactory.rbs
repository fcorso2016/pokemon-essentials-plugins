# TypeProf 0.21.3

# Classes
class FollowerData
  attr_accessor original_map_id: Integer
  attr_accessor event_id: Integer
  attr_accessor event_name: String
  attr_accessor current_map_id: Integer
  attr_accessor x: Integer
  attr_accessor y: Integer
  attr_accessor direction: Integer
  attr_accessor character_name: String
  attr_accessor character_hue: Numeric
  attr_accessor name: Integer?
  attr_accessor common_event_id: Integer?
  attr_accessor visible: bool
  attr_accessor invisible_after_transfer: bool
  def initialize: (Integer original_map_id, Integer event_id, String event_name, Integer current_map_id, Integer, Integer y, Integer direction, untyped character_name, untyped character_hue) -> void
  def visible?: -> bool
  def interact: (Game_Event event) -> void
end

class PokemonGlobalMetadata
  attr_accessor dependentEvents: Array[Game_Event]
  attr_writer followers: Array[Game_Follower]
  def followers: -> Array[Game_Follower]
end

class Game_Temp
  attr_writer followers: Game_FollowerFactory
  def followers: -> Game_FollowerFactory
end

class Game_FollowerFactory
  @events: Array[Game_Follower]

  attr_reader last_update: Integer
  def initialize: -> void
  def add_follower: (Game_Event event, ?String | nil name, ?Integer | nil common_event_id) -> void
  def remove_follower_by_event: (Game_Event event) -> void
  def remove_follower_by_name: (String name) -> void
  def remove_all_followers: -> void
  def get_follower_by_index: (?Integer index) -> Game_Follower?
  def get_follower_by_name: (String name) -> Game_Follower?
  def each_follower: { (Game_Event, Game_Follower) -> void } -> void
  def turn_followers: -> void
  def move_followers: -> void
  def map_transfer_followers: -> void
  def follow_into_door: -> void
  def hide_followers: -> void
  def put_followers_on_player: -> void
  def update: -> void

  private
  def create_follower_object: (FollowerData event_data) -> void
end

class FollowerSprites
  @viewport: Viewport
  @sprites: Array[Sprite]
  @last_update: Numeric?
  @disposed: bool

  def initialize: (Viewport viewport) -> void
  def dispose: -> void
  def disposed?: -> void
  def refresh: -> void
  def update: -> void
end

module Followers
  def self?.add: (Integer event_id, String name, Integer common_event_id) -> void
  def self?.add_event: (Game_Event event) -> void
  def self?.remove: (String name) -> void
  def self?.remove_event: (Game_Event event) -> void
  def self?.clear: -> void
  def self?.get: (?String? name) -> Game_Follower?
  def self?.follow_into_door: -> void
  def self?.hide_followers: -> void
  def self?.put_followers_on_player: -> void
end



