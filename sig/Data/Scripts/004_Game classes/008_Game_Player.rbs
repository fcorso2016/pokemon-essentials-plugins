# TypeProf 0.21.3

# Classes
class Object
  private
  def pbGetPlayerCharset: (String charset, ?Trainer? trainer, ?bool force) -> (String | nil)
  def pbUpdateVehicle: -> void
  def pbCancelVehicles: (?nil destination, ?true cancel_swimming) -> void
  def pbCanUseBike?: (untyped map_id) -> bool
  def pbMountBike: -> void
  def pbDismountBike: -> void
end

class Game_Player
  type movement_type = :ascending_waterfall | :cycling | :cycling_fast | :cycling_jumping | :cycling_stopped | :descending_waterfall | :diving | :diving_fast | :diving_jumping | :diving_stopped | :ice_sliding | :jumping | :running | :surfing | :surfing_fast | :surfing_jumping | :surfing_stopped | :walking | :walking_stopped

  SCREEN_CENTER_X: Integer
  SCREEN_CENTER_Y: Integer
  SURF_BOB_DURATION: Float
  @lastdir: Integer
  @lastdirframe: Integer
  @move_route_forcing: bool
  @move_speed: Numeric
  @bumping: bool
  @x: Integer
  @y: Integer
  @character_name: String
  @direction: Integer
  @opacity: Integer
  @blend_type: Integer
  @real_x: Numeric
  @real_y: Numeric
  @last_terrain_tag: Integer
  @moved_last_frame: bool
  @moved_this_frame: bool
  @transparent: bool
  @tile_id: Integer
  @lock_pattern: bool
  @pattern: Integer
  @pattern_surf: Integer
  @bob_height: Integer
  @anime_count: Integer

  attr_accessor charsetData: [Integer, String, Integer]
  attr_accessor encounter_count: Integer
  def initialize: (*untyped arg) -> void
  def map: -> Game_Map
  def map_id: -> Integer
  def screen_z: (?Integer height) -> Integer
  def has_follower?: -> bool
  def can_map_transfer_with_follower?: -> bool
  def can_ride_vehicle_with_follower?: -> bool
  def can_run?: -> bool
  def set_movement_type: (movement_type `type`) -> nil
  def refresh_charset: -> void
  def bump_into_object: -> void
  def add_move_distance_to_stats: (?Integer distance) -> void
  def move_generic: (Integer dir, ?bool turn_enabled) -> void
  def turn_generic: (Integer dir, ?bool keep_enc_indicator) -> void
  def jump: (Integer x_plus, Integer y_plus) -> void
  def pbTerrainTag: (?bool countBridge) -> Integer
  def pbFacingEvent: (?bool ignoreInterpreter) -> Game_Event?
  def pbFacingTerrainTag: (?Integer? dir) -> Integer
  def passable?: (Integer x, Integer y, Integer d, ?bool strict) -> bool
  def center: (Integer x, Integer y) -> void
  def moveto: (Integer x, Integer y) -> void
  def make_encounter_count: -> void
  def refresh: -> void
  def pbTriggeredTrainerEvents: (Array[Integer] triggers, ?bool checkIfRunning, ?bool trainer_only) -> Array[Game_Event]
  def pbTriggeredCounterEvents: (Array[Integer] triggers, ?bool checkIfRunning) -> Array[Game_Event]
  def check_event_trigger_after_turning: -> void
  def pbCheckEventTriggerFromDistance: (Array[Integer] triggers) -> bool
  def check_event_trigger_here: (Array[Integer] triggers) -> bool
  def check_event_trigger_there: (Array[Integer] triggers) -> bool
  def check_event_trigger_touch: (Integer dir) -> bool
  def update: -> void
  def update_command_new: -> void
  def update_move: -> void
  def update_stop: -> void
  def update_pattern: -> void
  def update_screen_position: (Numeric last_real_x, Numeric last_real_y) -> void
  def update_event_triggering: -> void
end



