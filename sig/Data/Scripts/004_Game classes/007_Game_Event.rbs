# TypeProf 0.21.3

# Classes
class Game_Event
  @event: RPG::Event
  @id: Integer
  @original_x: Integer
  @original_y: Integer
  @width: Integer
  @height: Integer
  @erased: bool
  @route_erased: bool
  @through: bool
  @to_update: bool
  @page: RPG::Event::Page?
  @tile_id: Integer
  @character_name: String
  @character_hue: Integer
  @move_type: Integer
  @interpreter: Interpreter?
  @y: Integer
  @x: Integer
  @updated_last_frame: bool
  @move_route_forcing: bool
  @moveto_happened: bool
  @sprite_size: [Integer, Integer]
  @transparent: bool
  @original_direction: Integer
  @direction: Integer
  @prelock_direction: Integer
  @original_pattern: Integer
  @pattern: Integer
  @opacity: number
  @blend_type: Integer
  @move_route: RPG::MoveRoute
  @move_route_index: Integer
  @walk_anime: bool
  @step_anime: bool
  @direction_fix: bool
  @always_on_top: bool

  attr_reader map_id: Integer
  attr_reader trigger: Integer
  attr_reader list: Array[RPG::EventCommand]?
  attr_reader starting: bool
  attr_reader tempSwitches: Hash[String, bool]
  attr_accessor need_refresh: bool
  def initialize: (Integer map_id, RPG::Event event, ?Game_Map? map) -> void
  def id: -> Integer
  def name: -> String
  def set_starting: -> void
  def clear_starting: -> void
  def start: -> void
  def erase: -> void
  def erase_route: -> void
  def tsOn?: (String c) -> bool
  def tsOff?: (String c) -> bool
  def setTempSwitchOn: (String c) -> void
  def setTempSwitchOff: (String c) -> void
  def isOff?: (String c) -> bool
  def switchIsOn?: (Integer id) -> bool
  def variable: -> untyped
  def setVariable: (untyped variable) -> void
  def varAsInt: -> Integer
  def expired?: (?number secs) -> bool
  def expiredDays?: (?Integer days) -> bool
  def cooledDown?: (Integer seconds) -> bool
  def cooledDownDays?: (Integer days) -> bool
  def onEvent?: -> bool
  def over_trigger?: -> bool
  def check_event_trigger_touch: (Integer dir) -> void
  def check_event_trigger_after_turning: -> void
  def check_event_trigger_after_moving: -> void
  def check_event_trigger_auto: -> void
  def refresh: -> void
  def should_update?: (?bool recalc) -> bool
  def update: -> void
  def update_move: -> void
end



