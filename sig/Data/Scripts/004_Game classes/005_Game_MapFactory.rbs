# TypeProf 0.21.3

# Classes
class Object
  private
  def updateTilesets: -> untyped
end

class PokemonMapFactory
  @fixup: bool
  @mapChanged: bool
  @mapIndex: Integer

  attr_reader maps: Array[Game_Map]
  def initialize: (Integer id) -> void
  def setup: (Integer id) -> void
  def map: -> Game_Map
  def hasMap?: (Integer id) -> bool
  def getMapIndex: (Integer id) -> Integer
  def getMap: (Integer id, ?bool add) -> Game_Map
  def getMapNoAdd: (Integer id) -> void
  def getNewMap: (Integer playerX, Integer playerY, ?Integer? map_id) -> [Game_Map, Integer, Integer]?
  def setCurrentMap: -> void
  def setMapsInRange: -> void
  def setMapChanging: (Integer newID, Game_Map newMap) -> void
  def setMapChanged: (Integer prevMap) -> void
  def setSceneStarted: (Scene_Map scene) -> void
  def isPassableFromEdge?: (Integer x, Integer y) -> bool
  def isPassable?: (Integer mapID, Integer x, Integer y, ?Game_Event? thisEvent) -> bool
  def isPassableStrict?: (Integer mapID, Integer x, Integer y, ?Game_Event? thisEvent) -> bool
  def getTerrainTag: (Integer mapid, Integer x, Integer y, ?bool countBridge) -> Integer
  def getFacingTerrainTag: (?Integer? dir, ?Game_Event? event) -> Integer
  def getTerrainTagFromCoords: (Integer mapid, Integer x, Integer y, ?bool countBridge) -> Integer
  def areConnected?: (Integer mapID1, Integer mapID2) -> bool
  def getRelativePos: (Integer thisMapID, Integer thisX, Integer thisY, Integer otherMapID, Integer otherX, Integer otherY) -> [Integer, Integer]
  def getThisAndOtherEventRelativePos: (Game_Event thisEvent, Game_Event otherEvent) -> [Integer, Integer]
  def getThisAndOtherPosRelativePos: (Game_Event thisEvent, Integer otherMapID, Integer otherX, Integer otherY) -> [Integer, Integer]
  def getOffsetEventPos: (Game_Event event, Integer xOffset, Integer yOffset) -> [Integer, Integer, Integer]?
  def getFacingTile: (?Integer? direction, ?Game_Event? event, ?Integer steps) -> [Integer, Integer, Integer]
  def getFacingTileFromPos: (Integer mapID, Integer x, Integer y, ?Integer direction, ?Integer steps) -> [Integer, Integer, Integer]?
  def getRealTilePos: (Integer mapID, Integer x, Integer y) -> [Integer, Integer, Integer]?
  def getFacingCoords: (Integer x, Integer y, ?Integer direction, ?Integer steps) -> [untyped, untyped]
  def updateMaps: (Scene_Map scene) -> void
  def updateMapsInternal: -> void
end

type map_edge_enum = "N" | "W" | "E" | "D"
type map_connection = [Integer, map_edge_enum, Integer, Integer, map_edge_enum, Integer]

module MapFactoryHelper
  @@MapConnections: Array[map_connection]?
  @@MapDims: Array[[Integer, Integer]]?

  def self.clear: -> void
  def self.getMapConnections: -> Array[map_connection]?
  def self.hasConnections?: (Integer id) -> bool
  def self.mapsConnected?: (Integer id1, Integer id2) -> bool
  def self.eachConnectionForMap: (Integer id) { -> void } -> void
  def self.getMapDims: (Integer id) -> [Integer, Integer]
  def self.getMapEdge: (Integer id, map_edge_enum edge) -> Integer
  def self.mapInRange?: (Game_Map map) -> bool
  def self.mapInRangeById?: (Integer id, Integer dispx, Integer dispy) -> bool
end


