# ==============================================================================
#
# ==============================================================================
class PokemonRuleSet
  def initialize: (?::Integer number) -> void

  def copy: () -> untyped

  def minLength: () -> untyped

  def maxLength: () -> untyped

  alias number maxLength

  def minTeamLength: () -> untyped

  def maxTeamLength: () -> untyped

  # Returns the length of a valid subset of a Pokemon team.
  def suggestedNumber: () -> untyped

  # Returns a valid level to assign to each member of a valid Pokemon team.
  def suggestedLevel: () -> untyped

  def setNumberRange: (untyped minValue, untyped maxValue) -> self

  def setNumber: (untyped value) -> untyped

  # This rule checks either:
  # - the entire team to determine whether a subset of the team meets the rule, or
  # - whether the entire team meets the rule. If the condition holds for the
  #   entire team, the condition must also hold for any possible subset of the
  #   team with the suggested number.
  # Examples of team rules:
  # - No two Pokemon can be the same species.
  # - No two Pokemon can hold the same items.
  def addTeamRule: (untyped rule) -> self

  # This rule checks:
  # - the entire team to determine whether a subset of the team meets the rule, or
  # - a list of Pokemon whose length is equal to the suggested number. For an
  #   entire team, the condition must hold for at least one possible subset of
  #   the team, but not necessarily for the entire team.
  # A subset rule is "number-dependent", that is, whether the condition is likely
  # to hold depends on the number of Pokemon in the subset.
  # Example of a subset rule:
  # - The combined level of X Pokemon can't exceed Y.
  def addSubsetRule: (untyped rule) -> self

  def addPokemonRule: (untyped rule) -> self

  def clearTeamRules: () -> self

  def clearSubsetRules: () -> self

  def clearPokemonRules: () -> self

  def isPokemonValid?: (untyped pkmn) -> bool

  def hasRegistrableTeam?: (untyped list) -> bool

  # Returns true if the team's length is greater or equal to the suggested
  # number and is Settings::MAX_PARTY_SIZE or less, the team as a whole meets
  # the requirements of any team rules, and at least one subset of the team
  # meets the requirements of any subset rules. Each Pokemon in the team must be
  # valid.
  def canRegisterTeam?: (untyped team) -> bool

  # Returns true if the team's length is greater or equal to the suggested
  # number and at least one subset of the team meets the requirements of any
  # team rules and subset rules. Not all Pokemon in the team have to be valid.
  def hasValidTeam?: (untyped team) -> bool

  # Returns true if the team's length meets the subset length range requirements
  # and the team meets the requirements of any team rules and subset rules. Each
  # Pokemon in the team must be valid.
  def isValid?: (untyped team, ?untyped? error) -> bool
end

# ==============================================================================
#
# ==============================================================================
class StandardRules < PokemonRuleSet
  attr_reader number: untyped

  def initialize: (untyped number, ?untyped? level) -> void
end

# ==============================================================================
#
# ==============================================================================
class StandardCup < StandardRules
  def initialize: () -> void

  def name: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class DoubleCup < StandardRules
  def initialize: () -> void

  def name: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class FancyCup < PokemonRuleSet
  def initialize: () -> void

  def name: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class LittleCup < PokemonRuleSet
  def initialize: () -> void

  def name: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class LightCup < PokemonRuleSet
  def initialize: () -> void

  def name: () -> untyped
end


