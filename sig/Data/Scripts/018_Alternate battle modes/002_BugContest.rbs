# ==============================================================================
#
# ==============================================================================
class BugContestState
  @contestMaps: Array[Integer]
  @contestants: Array[String]
  @ended: bool
  @inProgress: bool
  @lastContest: number?

  @otherparty: Array[Pokemon]
  @places: Array[Integer]
  @reception: Array[Integer]
  @start: [Integer, Integer, Integer, Integer]?

  attr_accessor ballcount: Integer

  attr_accessor decision: Integer

  attr_accessor lastPokemon: Pokemon?

  attr_accessor timer_start: number

  CONTESTANT_NAMES: Array[String]

  TIME_ALLOWED: Integer

  def initialize: () -> void

  # Returns whether the last contest ended less than 24 hours ago.
  def pbContestHeld?: () -> bool

  def expired?: () -> bool

  def clear: () -> void

  def inProgress?: () -> bool

  def undecided?: () -> bool

  def decided?: () -> bool

  def pbSetPokemon: (Pokemon chosenpoke) -> void

  def pbSetContestMap: (*(Integer | String) maps) -> void

  # Reception map is handled separately from contest map since the reception map
  # can be outdoors, with its own grassy patches.
  def pbSetReception: (*(Integer | String) maps) -> void

  def pbOffLimits?: (Integer map) -> bool

  def pbSetJudgingPoint: (Integer startMap, Integer startX, Integer startY, ?Integer dir) -> void

  def pbJudge: () -> void

  def pbGetPlaceInfo: (Integer place) -> void

  def pbClearIfEnded: () -> void

  def pbStartJudging: () -> void

  def pbIsContestant?: (String i) -> bool

  def pbStart: (Integer ballcount) -> void

  def place: () -> Integer

  def pbEnd: (?bool interrupted) -> void
end

# ==============================================================================
#
# ==============================================================================
class TimerDisplay
  include _CheckedDisposable
  include _Updatable

  @display_time: Integer?
  @max_time: Integer
  @timer: Window_AdvancedTextPokemon

  attr_accessor start_time: Integer

  def initialize: (Integer start_time, Integer max_time) -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonPauseMenu
  alias __bug_contest_pbShowInfo pbShowInfo
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  # Returns a score for this Pokemon in the Bug-Catching Contest.
  # Not exactly the HGSS calculation, but it should be decent enough.
  def pbBugContestScore: (Pokemon pkmn) -> Integer

  def pbBugContestState: () -> BugContestState

  # Returns true if the Bug-Catching Contest in progress
  def pbInBugContest?: () -> bool

  # Returns true if the Bug-Catching Contest in progress and has not yet been judged
  def pbBugContestUndecided?: () -> bool

  # Returns true if the Bug-Catching Contest in progress and is being judged
  def pbBugContestDecided?: () -> bool

  def pbBugContestStartOver: () -> void

  def pbBugContestBattle: (Pokemon | Symbol | String | GameData::Species pkmn, ?Integer level) -> Integer
end

