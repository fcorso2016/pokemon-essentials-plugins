# ==============================================================================
#
# ==============================================================================
class BugContestState
  attr_accessor ballcount: untyped

  attr_accessor decision: untyped

  attr_accessor lastPokemon: untyped

  attr_accessor timer_start: untyped

  CONTESTANT_NAMES: ::Array[untyped]

  TIME_ALLOWED: untyped

  def initialize: () -> void

  # Returns whether the last contest ended less than 24 hours ago.
  def pbContestHeld?: () -> (false | untyped)

  def expired?: () -> (false | untyped)

  def clear: () -> untyped

  def inProgress?: () -> untyped

  def undecided?: () -> untyped

  def decided?: () -> untyped

  def pbSetPokemon: (untyped chosenpoke) -> untyped

  def pbSetContestMap: (*untyped maps) -> untyped

  # Reception map is handled separately from contest map since the reception map
  # can be outdoors, with its own grassy patches.
  def pbSetReception: (*untyped maps) -> untyped

  def pbOffLimits?: (untyped map) -> bool

  def pbSetJudgingPoint: (untyped startMap, untyped startX, untyped startY, ?::Integer dir) -> untyped

  def pbJudge: () -> untyped

  def pbGetPlaceInfo: (untyped place) -> untyped

  def pbClearIfEnded: () -> (untyped | nil)

  def pbStartJudging: () -> untyped

  def pbIsContestant?: (untyped i) -> untyped

  def pbStart: (untyped ballcount) -> untyped

  def place: () -> (untyped | 3)

  def pbEnd: (?bool interrupted) -> (nil | untyped)
end

# ==============================================================================
#
# ==============================================================================
class TimerDisplay
  attr_accessor start_time: untyped

  def initialize: (untyped start_time, untyped max_time) -> void

  def dispose: () -> untyped

  def disposed?: () -> untyped

  def update: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class PokemonPauseMenu
  alias __bug_contest_pbShowInfo pbShowInfo
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  # Returns a score for this Pokemon in the Bug-Catching Contest.
  # Not exactly the HGSS calculation, but it should be decent enough.
  def pbBugContestScore: (untyped pkmn) -> untyped

  def pbBugContestState: () -> untyped

  # Returns true if the Bug-Catching Contest in progress
  def pbInBugContest?: () -> untyped

  # Returns true if the Bug-Catching Contest in progress and has not yet been judged
  def pbBugContestUndecided?: () -> untyped

  # Returns true if the Bug-Catching Contest in progress and is being judged
  def pbBugContestDecided?: () -> untyped

  def pbBugContestStartOver: () -> untyped

  def pbBugContestBattle: (untyped pkmn, ?::Integer level) -> untyped
end


