# ==============================================================================
#
# ==============================================================================
class RuledTeam
  @history: MatchHistory
  @rating: PlayerRating
  @totalGames: Integer

  attr_accessor team: Array[Pokemon]

  def initialize: (Array[Pokemon] party, PokemonChallengeRules rule) -> void

  def []: (Integer i) -> Pokemon

  def length: () -> Integer

  def rating: () -> Math::double

  def ratingData: () -> PlayerRating

  def ratingRaw: () -> [Math::double, Math::double, Math::double, Math::double]

  def compare: (RuledTeam other) -> bool

  def totalGames: () -> Integer

  def addMatch: (RuledTeam other, Math::double score) -> void

  def games: () -> Integer

  def updateRating: () -> void

  def toStr: () -> String

  def load: (Array[Integer] party) -> Array[Pokemon]
end

# ==============================================================================
#
# ==============================================================================
class SingleMatch
  attr_reader opponentRating: Math::double

  attr_reader opponentDeviation: Math::double

  attr_reader score: Integer

  attr_reader kValue: Integer

  def initialize: (Math::double opponentRating, Math::double opponentDev, Integer score, ?Integer kValue) -> void
end

# ==============================================================================
#
# ==============================================================================
class MatchHistory
  include Enumerable[SingleMatch]

  @matches: Array[SingleMatch]

  @thisPlayer: PlayerRating

  def initialize: (PlayerRating thisPlayer) -> void

  def []: (Integer i) -> SingleMatch

  def length: () -> Integer

  def each: () { (SingleMatch) -> void } -> void

  def addMatch: (PlayerRating otherPlayer, Integer result) -> void

  def updateAndClear: () -> void
end

# ==============================================================================
#
# ==============================================================================
class PlayerRatingElo
  @deviation: Math::double

  @estimatedRating: Math::double?
  @volatility: Math::double

  attr_reader rating: Math::double

  K_VALUE: Integer

  def initialize: () -> void

  def winChancePercent: () -> Math::double

  def update: (MatchHistory matches) -> void
end

# ==============================================================================
#
# ==============================================================================
class PlayerRating
  @estimatedRating: Math::double?

  attr_reader volatility: Math::double

  attr_reader deviation: Math::double

  attr_reader rating: Math::double

  def initialize: () -> void

  def winChancePercent: () -> Math::double

  def update: (untyped matches, ?Math::double system) -> void

  private

  attr_writer volatility: Math::double

  alias volatility2 volatility

  def rating2: () -> Math::double

  def deviation2: () -> Math::double

  def getGFactor: (Math::double deviation) -> Math::double

  def getEFactor: (Math::double rating, Math::double opponentRating, Math::double g) -> Math::double

  def setVolatility2: (Math::double value) -> void

  def setRating2: (Math::double value) -> void

  def setDeviation2: (Math::double value) -> void

  def getUpdatedVolatility: (Math::double volatility, Math::double deviation, Math::double variance, Math::double improvementSum, Math::double system) -> Math::double
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbDecideWinnerEffectiveness: (Symbol | String | GameData::Move move, Symbol otype1, Symbol otype2, Symbol ability, Array[Integer] scores) -> Integer

  def pbDecideWinnerScore: (Array[Pokemon] party0, Array[Pokemon] party1, Math::double rating) -> Math::double

  def pbDecideWinner: (Array[Pokemon] party0, Array[Pokemon] party1, Math::double rating0, Math::double rating1) -> Math::double

  # ==============================================================================
  #
  # ==============================================================================
  def pbRuledBattle: (Array[Pokemon] team1, Array[Pokemon] team2, PokemonChallengeRules rule) -> void
end

