# ==============================================================================
#
# ==============================================================================
class RuledTeam
  attr_accessor team: untyped

  def initialize: (untyped party, untyped rule) -> void

  def []: (untyped i) -> untyped

  def length: () -> untyped

  def rating: () -> untyped

  def ratingData: () -> untyped

  def ratingRaw: () -> ::Array[untyped]

  def compare: (untyped other) -> untyped

  def totalGames: () -> untyped

  def addMatch: (untyped other, untyped score) -> untyped

  def games: () -> untyped

  def updateRating: () -> untyped

  def toStr: () -> untyped

  def load: (untyped party) -> untyped
end

# ==============================================================================
#
# ==============================================================================
class SingleMatch
  attr_reader opponentRating: untyped

  attr_reader opponentDeviation: untyped

  attr_reader score: untyped

  attr_reader kValue: untyped

  def initialize: (untyped opponentRating, untyped opponentDev, untyped score, ?::Integer kValue) -> void
end

# ==============================================================================
#
# ==============================================================================
class MatchHistory
  include Enumerable

  def initialize: (untyped thisPlayer) -> void

  def []: (untyped i) -> untyped

  def length: () -> untyped

  def each: () { (untyped) -> untyped } -> untyped

  def addMatch: (untyped otherPlayer, untyped result) -> untyped

  def updateAndClear: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class PlayerRatingElo
  attr_reader rating: untyped

  K_VALUE: 16

  def initialize: () -> void

  def winChancePercent: () -> untyped

  def update: (untyped matches) -> (nil | untyped)
end

# ==============================================================================
#
# ==============================================================================
class PlayerRating
  attr_reader volatility: untyped

  attr_reader deviation: untyped

  attr_reader rating: untyped

  def initialize: () -> void

  def winChancePercent: () -> untyped

  def update: (untyped matches, ?::Float system) -> (nil | untyped)

  private

  attr_writer volatility: untyped

  alias volatility2 volatility

  def rating2: () -> untyped

  def deviation2: () -> untyped

  def getGFactor: (untyped deviation) -> untyped

  def getEFactor: (untyped rating, untyped opponentRating, untyped g) -> untyped

  def setVolatility2: (untyped value) -> untyped

  def setRating2: (untyped value) -> untyped

  def setDeviation2: (untyped value) -> untyped

  def getUpdatedVolatility: (untyped volatility, untyped deviation, untyped variance, untyped improvementSum, untyped system) -> untyped
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbDecideWinnerEffectiveness: (untyped move, untyped otype1, untyped otype2, untyped ability, untyped scores) -> (0 | untyped)

  def pbDecideWinnerScore: (untyped party0, untyped party1, untyped rating) -> untyped

  def pbDecideWinner: (untyped party0, untyped party1, untyped rating0, untyped rating1) -> (5 | untyped)

  # ==============================================================================
  #
  # ==============================================================================
  def pbRuledBattle: (untyped team1, untyped team2, untyped rule) -> untyped
end


