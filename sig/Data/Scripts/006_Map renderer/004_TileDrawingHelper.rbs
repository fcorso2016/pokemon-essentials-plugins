# TypeProf 0.21.3

# Classes
class Object
  private
  def createMinimap: (Integer mapid) -> Bitmap
  def bltMinimapAutotile: (Bitmap dstBitmap, Integer x, Integer y, Bitmap srcBitmap, Integer id) -> void
  def passable?: (Table passages, Integer? tile_id) -> bool
  def getPassabilityMinimap: (Integer mapid) -> untyped
end

class TileDrawingHelper
  include _Disposable

  AUTOTILE_PATTERNS: Array[Array[[Integer, Integer, Integer, Integer]]]
  NEIGHBORS_TO_AUTOTILE_INDEX: Array[Integer]

  @shouldWrap: bool

  attr_accessor tileset: Bitmap
  attr_accessor autotiles: Array[Bitmap]
  def self.tableNeighbors: (Table data, Integer x, Integer y, ?Integer? layer) -> Integer
  def self.fromTileset: (RPG::Tileset tileset) -> TileDrawingHelper
  def initialize: (Bitmap tileset, Array[Bitmap] autotiles) -> void
  def bltSmallAutotile: (Bitmap bitmap, Integer x, Integer y, Integer cxTile, Integer cyTile, Integer id, Integer frame) -> void
  def bltSmallRegularTile: (Bitmap bitmap, Integer x, Integer y, Integer cxTile, Integer cyTile, Integer id) -> void
  def bltSmallTile: (Bitmap bitmap, Integer x, Integer y, Integer cxTile, Integer cyTile, Integer id, ?Integer frame) -> void
  def bltAutotile: (Bitmap bitmap, Integer x, Integer y, Integer id, Integer frame) -> void
  def bltRegularTile: (Bitmap bitmap, Integer x, Integer y, Integer id) -> void
  def bltTile: (Bitmap bitmap, Integer x, Integer y, Integer id, ?Integer frame) -> void
end




