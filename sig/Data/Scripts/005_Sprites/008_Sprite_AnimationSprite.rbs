# TypeProf 0.21.3

# Classes
class SpriteAnimation
  include _Updatable
  include _Disposable

  @sprite: RPG::Sprite
  @_animation_sprites: Array[Sprite]?
  @_loop_animation_sprites: Array[Sprite]?
  @_animation: RPG::Animation?
  @_animation_hit: bool
  @_animation_height: Integer
  @_animation_duration: number
  @_animation_index: Integer
  @_animation_time_per_frame: number
  @_animation_timer_start: number
  @_loop_animation: RPG::Animation?
  @_loop_animation_duration: number
  @_loop_animation_index: Integer
  @_loop_animation_time_per_frame: number
  @_loop_animation_timer_start: number
  @@_animations: Array[RPG::Animation]
  @@_reference_count: Hash[Bitmap, Integer]

  def initialize: (RPG::Sprite sprite) -> void
  def x: () -> Integer
  def y: () -> Integer
  def ox: () -> Integer
  def oy: () -> Integer
  def viewport: () -> Viewport
  def flash: (Color color, Integer duration) -> void
  def src_rect: () -> Rect
  def opacity: () -> number
  def tone: () -> Tone
  def self.clear: -> void
  def animation: (RPG::Animation? animation, bool hit, ?Integer height) -> void
  def loop_animation: (RPG::Animation? animation) -> void
  def dispose_animation: -> void
  def dispose_loop_animation: -> void
  def active?: -> boolish
  def effect?: -> bool
  def update_animation: -> void
  def update_loop_animation: -> void
  def animation_set_sprites: (Array[Sprite?]? sprites, Table cell_data, Integer position, ?bool quick_update) -> void
  def animation_process_timing: (RPG::Animation::Timing timing, bool hit) -> void
  def x=: (Integer x) -> void
  def y=: (Integer y) -> void
end

class AnimationContainerSprite < RPG::Sprite
  @tileX: Integer
  @tileY: Integer
  @map: Game_Map

  def initialize: (Integer animID, Game_Map map, Integer tileX, Integer tileY, ?Viewport? viewport, ?bool tinting, ?Integer height) -> void
  def setCoords: -> void
end

class Spriteset_Map
  @@viewport1: Viewport
  @@viewport3: Viewport

  attr_reader usersprites: Array[AnimationContainerSprite]
  alias _animationSprite_initialize initialize
  def addUserAnimation: (Integer animID, Integer x, Integer y, ?bool tinting, ?Integer height) -> AnimationContainerSprite
  def addUserSprite: (AnimationContainerSprite new_sprite) -> void
end



