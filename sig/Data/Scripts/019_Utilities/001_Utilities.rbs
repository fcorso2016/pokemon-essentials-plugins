# ==============================================================================
# This class is designed to favor different values more than a uniform
# random generator does.
# ==============================================================================
class AntiRandom
  @old: Array[Integer]
  @new: Array[Integer]

  def initialize: (Integer size) -> void

  def get: () -> Integer
end

class Object
  # ==============================================================================
  # General purpose utilities
  # ==============================================================================
  def _pbNextComb: [T] (Array[T] comb, Integer length) -> bool

  # Iterates through the array and yields each combination of _num_ elements in
  # the array.
  def pbEachCombination: [T] (Array[T] array, Integer num) { (Array[T]) -> void } -> void

  # Returns a language ID
  def pbGetLanguage: () -> Integer

  # Converts a Celsius temperature to Fahrenheit.
  def toFahrenheit: (Math::double celsius) -> Math::double

  # Converts a Fahrenheit temperature to Celsius.
  def toCelsius: (Math::double fahrenheit) -> Math::double

  # ==============================================================================
  # Constants utilities
  # ==============================================================================
  # Unused
  def isConst?: [T] (T val, Module mod, (String | Symbol) constant) -> bool

  # Unused
  def hasConst?: (Module mod, (String | Symbol) constant) -> bool

  # Unused
  def getConst: [T] (Module mod, (String | Symbol) constant) -> T

  # Unused
  def getID: (Module mod, (String | Symbol) constant) -> Integer?

  def getConstantName: [T] (Symbol | Module mod, T value, ?bool raise_if_none) -> String?

  def getConstantNameOrValue: (Symbol | Module mod, _Inspectable value) -> String

  # ==============================================================================
  # Event utilities
  # ==============================================================================
  def pbTimeEvent: (Integer variableNumber, ?Integer secs) -> void

  def pbTimeEventDays: (Integer variableNumber, ?Integer days) -> void

  def pbTimeEventValid: (Integer variableNumber) -> bool

  def pbExclaim: (Game_Event | Array[Game_Event] event, ?Integer id, ?bool tinting) -> void

  def pbNoticePlayer: (Game_Event | Array[Game_Event] event, ?bool always_show_exclaim) -> void

  # ==============================================================================
  # Player-related utilities, random name generator
  # ==============================================================================
  # Unused
  def pbGetPlayerGraphic: () -> String

  def pbGetTrainerTypeGender: (Symbol trainer_type) -> Integer

  def pbChangePlayer: (Integer id) -> bool

  def pbTrainerName: (?String? name, ?Integer outfit) -> void

  def pbSuggestTrainerName: (Integer gender) -> String

  def pbGetUserName: () -> String

  def getRandomNameEx: (Integer `type`, Integer? variable, Integer? upper, ?Integer maxLength) -> String

  def getRandomName: (?Integer maxLength) -> String

  # ==============================================================================
  # Regional and National PokÃƒÂ©dexes utilities
  # ==============================================================================
  # Returns the ID number of the region containing the player's current location,
  # as determined by the current map's metadata.
  def pbGetCurrentRegion: (?Integer default) -> Integer

  # Returns the Regional PokÃƒÂ©dex number of the given species in the given Regional
  # Dex. The parameter "region" is zero-based. For example, if two regions are
  # defined, they would each be specified as 0 and 1.
  def pbGetRegionalNumber: (Integer region, Symbol species) -> Integer

  # Returns an array of all species in the given Regional Dex in that Dex's order.
  def pbAllRegionalSpecies: (Integer region_dex) -> Array[Symbol]

  # Returns the number of species in the given Regional Dex. Returns 0 if that
  # Regional Dex doesn't exist. If region_dex is a negative number, returns the
  # number of species in the National Dex (i.e. all species).
  def pbGetRegionalDexLength: (Integer region_dex) -> Integer

  # ==============================================================================
  # Other utilities
  # ==============================================================================
  def pbTextEntry: (String helptext, Integer minlength, Integer maxlength, Integer variableNumber) -> void

  def pbMoveTutorAnnotations: (Symbol move, ?Array[Symbol]? movelist) -> void

  def pbMoveTutorChoose: (Symbol move, ?Array[Symbol]? movelist, ?bool bymachine, ?bool oneusemachine) -> void

  def pbConvertItemToItem: (Integer variable, Array[Symbol] array) -> void

  def pbConvertItemToPokemon: (Integer variable, Array[Symbol] array) -> void

  # Gets the value of a variable.
  def pbGet: (Integer id) -> untyped

  # Sets the value of a variable.
  def pbSet: [T] (Integer id, T value) -> void

  # Runs a common event and waits until the common event is finished.
  # Requires the script "Messages"
  def pbCommonEvent: (Integer id) -> bool

  def pbHideVisibleObjects: () -> void

  def pbShowObjects: (_Visualizable visibleObjects) -> void

  def pbLoadRpgxpScene: (_Scene scene) -> void

  def pbChooseLanguage: () -> Integer

  def pbScreenCapture: () -> void
end



