module Compiler
  SCRIPT_REPLACEMENTS: Array[[String, String]]
  
  # ============================================================================
  # Add new map files to the map tree.
  # ============================================================================
  def self?.import_new_maps: () -> bool

  # ============================================================================
  # Generate and modify event commands.
  # ============================================================================
  def self?.generate_move_route: (Array[RPG::MoveCommand] commands) -> RPG::MoveRoute

  def self?.push_move_route: (Array[RPG::EventCommand] list, RPG::Event character, RPG::MoveRoute route, ?Integer indent) -> void |
    (Array[RPG::EventCommand] list, Game_Event character, Array[RPG::MoveCommand] commands, ?Integer indent) -> void

  def self?.push_move_route_and_wait: (Array[RPG::EventCommand] list, Game_Event character, RPG::MoveRoute route, ?Integer indent) -> void |
    (Array[RPG::EventCommand] list, Game_Event character, Array[RPG::MoveCommand] commands, ?Integer indent) -> void

  def self?.push_wait: (Array[RPG::EventCommand] list, untyped frames, ?Integer indent) -> void

  def self?.push_event: (Array[RPG::EventCommand] list, Integer cmd, ?Array[untyped]? params, ?Integer indent) -> void

  def self?.push_end: (Array[RPG::EventCommand] list) -> void

  def self?.push_comment: (Array[RPG::EventCommand] list, String cmt, ?Integer indent) -> void

  def self?.push_text: (Array[RPG::EventCommand] list, String text, ?Integer indent) -> void

  def self?.push_script: (Array[RPG::EventCommand] list, String script, ?Integer indent) -> void

  def self?.push_exit: (Array[RPG::EventCommand] list, ?Integer indent) -> void

  def self?.push_else: (Array[RPG::EventCommand] list, ?Integer indent) -> void

  def self?.push_branch: (Array[RPG::EventCommand] list, String script, ?Integer indent) -> void

  def self?.push_branch_end: (Array[RPG::EventCommand] list, ?Integer indent) -> void

  # cancel is 1/2/3/4 for the options, 0 for disallow, 5 for branch
  def self?.push_choices: (Array[RPG::EventCommand] list, Array[String] choices, ?Integer cancel, ?Integer indent) -> void

  def self?.push_choice: (Array[RPG::EventCommand] list, Integer index, String text, ?Integer indent) -> void

  def self?.push_choices_end: (Array[RPG::EventCommand] list, ?Integer indent) -> void

  def self?.push_self_switch: (Array[RPG::EventCommand] list, Integer swtch, bool switchOn, ?Integer indent) -> void

  def self?.apply_pages: (RPG::Event::Page page, Array[RPG::Event::Page] pages) -> void

  def self?.add_passage_list: (RPG::Event event, MapData mapData) -> void

  # ============================================================================
  #
  # ============================================================================
  def self?.safequote: (String x) -> String

  def self?.safequote2: (String x) -> String

  def self?.pbEventId: (RPG::Event event) -> Integer

  def self?.pbEachPage: (RPG::Event e) { (RPG::Event::Page) -> boolish } -> boolish |
    (RPG::CommonEvent e) { (RPG::CommonEvent) -> boolish } -> boolish

  # ============================================================================
  #
  # ============================================================================
  class MapData
    @system: RPG::System
    @tilesets: Array[RPG::Tileset]
    @mapxy: Array[Array[RPG::Event]]
    @mapWidths: Array[Integer]
    @mapHeights: Array[Integer]
    @maps: Array[RPG::Map]
    @registeredSwitches: Hash[String, Integer]

    attr_reader mapinfos: Array[RPG::MapInfo]

    def initialize: () -> void

    def switchName: (Integer id) -> String

    def mapFilename: (Integer mapID) -> String

    def getMap: (Integer mapID) -> RPG::Map?

    def getEventFromXY: (Integer mapID, Integer x, Integer y) -> RPG::Event

    def getEventFromID: (Integer mapID, Integer id) -> RPG::Event

    def getTilesetPassages: (RPG::Map map, Integer mapID) -> Table

    def getTilesetPriorities: (RPG::Map map, Integer mapID) -> Table

    def isPassable?: (Integer mapID, Integer x, Integer y) -> bool

    def isCounterTile?: (Integer mapID, Integer x, Integer y) -> bool

    def setCounterTile: (Integer mapID, Integer x, Integer y) -> void

    def registerSwitch: (String switch) -> Integer

    def saveMap: (Integer mapID) -> void

    def saveTilesets: () -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class TrainerChecker
    def initialize: () -> void

    def pbTrainerTypeCheck: (Symbol | String | GameData::TrainerType trainer_type) -> void

    def pbTrainerBattleCheck: (Symbol | String | GameData::TrainerType tr_type, String tr_name, Integer tr_version) -> void
  end

  # ============================================================================
  # Convert trainer comments to trainer event.
  # ============================================================================
  def self?.convert_to_trainer_event: (RPG::Event event, TrainerChecker trainerChecker) -> RPG::Event?

  # ============================================================================
  # Convert event name to item event.
  # Checks if the event's name is "Item:POTION" or "HiddenItem:POTION". If so,
  # rewrites the whole event into one now named "Item"/"HiddenItem" which gives
  # that item when interacted with.
  # ============================================================================
  def self?.convert_to_item_event: (RPG::Event event) -> RPG::Event?

  # ============================================================================
  # Checks whether a given event is likely to be a door. If so, rewrite it to
  # include animating the event as though it was a door opening and closing as the
  # player passes through.
  # ============================================================================
  def self?.update_door_event: (RPG::Event event, MapData mapData) -> bool

  # ============================================================================
  # Fix up standard code snippets
  # ============================================================================
  def self?.event_is_empty?: (RPG::Event e) -> bool

  # Checks if the event has exactly 1 page, said page has no graphic, it has
  # less than 12 commands and at least one is a Transfer Player, and the tiles
  # to the left/right/upper left/upper right are not passable but the event's
  # tile is. Causes a second page to be added to the event which is the "is
  # player on me?" check that occurs when the map is entered.
  def self?.likely_passage?: (RPG::Event thisEvent, Integer mapID, MapData mapData) -> bool

  def self?.fix_event_name: (RPG::Event event) -> bool

  def self?.replace_scripts: (String script) -> String

  def self?.fix_event_scripts: (RPG::Event event) -> bool

  # Splits the given code string into an array of parameters (all strings),
  # using "," as the delimiter. It will not split in the middle of a string
  # parameter. Used to extract parameters from a script call in an event.
  def self?.split_string_with_quotes: (String str) -> Array[String]

  def self?.replace_old_battle_scripts: (RPG::Event event, Array[RPG::EventCommand] list, Integer index) -> void

  def self?.fix_event_use: (RPG::Event event, Integer _mapID, MapData mapData) -> void

  # ============================================================================
  # Convert events used as counters into proper counters.
  # ============================================================================
  # Checks if the event has just 1 page, which has no conditions and no commands
  # and whose movement type is "Fixed".
  def self?.plain_event?: (RPG::Event event) -> bool

  # Checks if the event has just 1 page, which has no conditions and whose
  # movement type is "Fixed". Then checks if there are no commands, or it looks
  # like a simple Mart or a PokÃƒÂ© Center nurse event.
  def self?.plain_event_or_mart?: (RPG::Event event) -> bool

  # Given two events that are next to each other, decides whether otherEvent is
  # likely to be a "counter event", i.e. is placed on a tile with the Counter
  # flag, or is on a non-passable tile between two passable tiles (e.g. a desk)
  # where one of those two tiles is occupied by thisEvent.
  def self?.likely_counter?: (RPG::Event thisEvent, RPG::Event otherEvent, Integer mapID, MapData mapData) -> bool

  # Checks all events in the given map to see if any look like they've been
  # placed on a desk with an NPC behind it, where the event on the desk is the
  # actual interaction with the NPC. In other words, it's not making proper use
  # of the counter flag (which lets the player interact with an event on the
  # other side of counter tiles).
  # Any events found to be like this have their contents merged into the NPC
  # event and the counter event itself is deleted. The tile below the counter
  # event gets its counter flag set (if it isn't already).
  def self?.check_counters: (RPG::Map map, Integer mapID, MapData mapData) -> void

  # ============================================================================
  # Main compiler method for events
  # ============================================================================
  def self?.compile_trainer_events: (bool _mustcompile) -> void
end



