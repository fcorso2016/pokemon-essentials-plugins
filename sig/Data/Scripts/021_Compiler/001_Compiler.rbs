# ==============================================================================
# Records which file, section and line are currently being read
# ==============================================================================
module FileLineData
  @file: String
  @linedata: String
  @lineno: Integer
  @section: String?
  @key: String?
  @value: String?

  def self.file: () -> String

  def self.file=: (String value) -> String

  def self.clear: () -> void

  def self.setSection: (String section, String key, String? value) -> void

  def self.setLine: (String line, Integer lineno) -> void

  def self.linereport: () -> String
end

# ==============================================================================
# Compiler
# ==============================================================================
module Compiler
  def self?.findIndex: [T] (Array[T] a) { (T) -> bool } -> Integer

  def self?.prepline: (String line) -> String

  def self?.csvQuote: (String str, ?bool always) -> String

  def self?.csvQuoteAlways: (String str) -> String

  # ============================================================================
  # PBS file readers
  # ============================================================================
  def self?.pbEachFileSectionEx: (File f, ?Hash[String, [Symbol, String]]? schema) { (Hash[String, untyped], String) -> void } -> void

  # Used for types.txt, abilities.txt, moves.txt, items.txt, berry_plants.txt,
  # pokemon.txt, pokemon_forms.txt, pokemon_metrics.txt, shadow_pokemon.txt,
  # ribbons.txt, trainer_types.txt, battle_facility_lists.txt, Battle Tower
  # trainers PBS files and dungeon_parameters.txt
  def self?.pbEachFileSection: (File f, ?Hash[String, [Symbol, String]]? schema) { (Hash[String, untyped], String) -> void } -> void

  # Used for metadata.txt and map_metadata.txt
  def self?.pbEachFileSectionNumbered: (File f, ?Hash[String, [Symbol, String]]? schema) { (untyped, untyped) -> untyped } -> void

  # Used by translated text compiler
  def self?.pbEachSection: (File f) { (Array[String], String?) -> void } -> void

  # Unused
  def self?.pbEachCommentedLine: (File f) { (String, Integer) -> void } -> void

  # Used for town_map.txt and Battle Tower PokÃƒÂ©mon PBS files
  def self?.pbCompilerEachCommentedLine: (String filename) { (String, Integer) -> void } -> void

  # Unused
  def self?.pbEachPreppedLine: (File f) { (String, Integer) -> void } -> void

  # Used for map_connections.txt, phone.txt, regional_dexes.txt, encounters.txt,
  # trainers.txt and dungeon_tilesets.txt
  def self?.pbCompilerEachPreppedLine: (String filename) { (String, Integer) -> void } -> void

  # ============================================================================
  # Splits a string containing comma-separated values into an array of those
  # values.
  # ============================================================================
  def self?.split_csv_line: (String string) -> String

  # ============================================================================
  # Convert a string to certain kinds of values
  # ============================================================================
  # Unused
  # NOTE: This method is about 10 times slower than split_csv_line.
  def self?.csvfield!: (String str) -> untyped

  # Unused
  def self?.csvBoolean!: (String str, ?Integer _line) -> bool

  # Unused
  def self?.csvInt!: (String str, ?Integer _line) -> Integer

  # Unused
  def self?.csvPosInt!: (String str, ?Integer _line) -> Integer

  # Unused
  def self?.csvFloat!: (String str, ?Integer _line) -> Float

  # Unused
  def self?.csvEnumField!: (String value, untyped enumer, String _key, untyped _section) -> untyped

  # Unused
  def self?.csvEnumFieldOrInt!: (String value, untyped enumer, String _key, untyped _section) -> untyped

  # Turns a value (a string) into another data type as determined by the given
  # schema.
  # @param value [String]
  # @param schema [String]
  def self?.cast_csv_value: (String value, String schema, ?untyped? enumer) -> bool

  def self?.checkEnumField: (String ret, untyped enumer) -> untyped

  # Unused
  def self?.checkEnumFieldOrNil: (String ret, untyped enumer) -> untyped?

  # ============================================================================
  # Convert a string to values using a schema
  # ============================================================================
  # Unused
  # @deprecated This method is slated to be removed in v22.
  def self?.pbGetCsvRecord: (String rec, Integer lineno, Array[untyped] schema) -> untyped

  # ============================================================================
  # Convert a string to values using a schema
  # ============================================================================
  def self?.get_csv_record: (String rec, Array[untyped] schema) -> untyped

  # ============================================================================
  # Write values to a file using a schema
  # ============================================================================
  def self?.pbWriteCsvRecord: (String record, File file, Array[untyped] schema) -> untyped

  # ============================================================================
  # Parse string into a likely constant name and return its ID number (if any).
  # Last ditch attempt to figure out whether a constant is defined.
  # ============================================================================
  # Unused
  def self?.pbGetConst: (Module mod, String item, String err) -> untyped

  def self?.parseItem: (String item) -> Symbol

  def self?.parseSpecies: (String species) -> Symbol

  def self?.parseMove: (String move, ?bool skip_unknown) -> Symbol?

  # Unused
  def self?.parseNature: (String nature) -> Symbol

  # Unused
  def self?.parseTrainer: (String `type`) -> Symbol

  # ============================================================================
  # Replace text in PBS files before compiling them
  # ============================================================================
  def self?.edit_and_rewrite_pbs_file_text: (File filename) { (String) -> boolish } -> void
  def self?.modify_pbs_file_contents_before_compiling: () -> void

  # ============================================================================
  # Compile all data
  # ============================================================================
  def self?.compile_pbs_file_message_start: (String filename) -> void

  def self?.write_pbs_file_message_start: (String filename) -> void

  def self?.process_pbs_file_message_end: () -> void

  def self?.get_all_pbs_files_to_compile: () -> void

  def self?.compile_pbs_files: () -> void

  def self?.compile_all: (bool mustCompile) -> void

  def self?.main: () -> void
end



