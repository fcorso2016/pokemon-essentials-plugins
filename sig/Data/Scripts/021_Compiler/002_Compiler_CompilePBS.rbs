module Compiler
  def self?.compile_PBS_file_generic: (Class game_data, *String paths) { (untyped, untyped) -> void } -> (nil | untyped)

  # ============================================================================
  # Compile Town Map data
  # ============================================================================
  def self?.compile_town_map: (*String paths) -> void

  def self?.validate_compiled_town_map: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_town_maps: () -> void

  # ============================================================================
  # Compile map connections
  # ============================================================================
  def self?.compile_connections: (*String paths) -> void

  # ============================================================================
  # Compile type data
  # ============================================================================
  def self?.compile_types: (*String paths) -> void

  def self?.validate_compiled_type: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_types: () -> void

  # ============================================================================
  # Compile ability data
  # ============================================================================
  def self?.compile_abilities: (*String paths) -> void

  def self?.validate_compiled_ability: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_abilities: () -> void

  # ============================================================================
  # Compile move data
  # ============================================================================
  def self?.compile_moves: (*String paths) -> void

  def self?.validate_compiled_move: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_moves: () -> void

  # ============================================================================
  # Compile item data
  # ============================================================================
  def self?.compile_items: (*String paths) -> void

  def self?.validate_compiled_item: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_items: () -> void

  # ============================================================================
  # Compile berry plant data
  # ============================================================================
  def self?.compile_berry_plants: (*String paths) -> void

  def self?.validate_compiled_berry_plant: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_berry_plants: () -> void

  # ============================================================================
  # Compile PokÃ©mon data
  # ============================================================================
  def self?.compile_pokemon: (*String paths) -> void

  # NOTE: This method is also called by def validate_compiled_pokemon_form
  #       below, and since a form's hash can contain very little data, don't
  #       assume any data exists.
  def self?.validate_compiled_pokemon: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_pokemon: () -> void

  # ============================================================================
  # Compile PokÃ©mon forms data
  # NOTE: Doesn't use compile_PBS_file_generic because it needs its own schema
  #       and shouldn't clear GameData::Species at the start.
  # ============================================================================
  def self?.compile_pokemon_forms: (*String paths) -> void

  def self?.validate_compiled_pokemon_form: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_pokemon_forms: () -> void

  # ============================================================================
  # Compile PokÃ©mon metrics data
  # ============================================================================
  def self?.compile_pokemon_metrics: (*String paths) -> void

  def self?.validate_compiled_pokemon_metrics: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_pokemon_metrics: () -> void

  # ============================================================================
  # Compile Shadow PokÃ©mon data
  # ============================================================================
  def self?.compile_shadow_pokemon: (*String paths) -> void

  def self?.validate_compiled_shadow_pokemon: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_shadow_pokemon: () -> void

  # ============================================================================
  # Compile Regional Dexes
  # ============================================================================
  def self?.compile_regional_dexes: (*String paths) -> void

  # ============================================================================
  # Compile ribbon data
  # ============================================================================
  def self?.compile_ribbons: (*String paths) -> void

  def self?.validate_compiled_ribbon: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_ribbons: () -> void

  # ============================================================================
  # Compile wild encounter data
  # ============================================================================
  def self?.compile_encounters: (*String paths) -> void

  # ============================================================================
  # Compile trainer type data
  # ============================================================================
  def self?.compile_trainer_types: (*String paths) -> void

  def self?.validate_compiled_trainer_type: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_trainer_types: () -> void

  # ============================================================================
  # Compile individual trainer data
  # ============================================================================
  def self?.compile_trainers: (*String paths) -> void

  def self?.validate_compiled_trainer: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_trainers: () -> void

  # ============================================================================
  # Compile Battle Tower and other Cups trainers/PokÃ©mon
  # ============================================================================
  def self?.compile_trainer_lists: (?::String path) -> void

  def self?.compile_battle_tower_trainers: (untyped filename) -> void

  # ============================================================================
  # Compile metadata
  # NOTE: Doesn't use compile_PBS_file_generic because it contains data for two
  #       different GameData classes.
  # ============================================================================
  def self?.compile_metadata: (*String paths) -> void

  def self?.validate_compiled_global_metadata: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_compiled_player_metadata: (Hash[Symbol, untyped] hash) -> void

  # Should be used to check both global metadata and player character metadata.
  def self?.validate_all_compiled_metadata: () -> void

  # ============================================================================
  # Compile map metadata
  # ============================================================================
  def self?.compile_map_metadata: (*String paths) -> void

  def self?.validate_compiled_map_metadata: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_map_metadata: () -> void

  # ============================================================================
  # Compile dungeon tileset data
  # ============================================================================
  def self?.compile_dungeon_tilesets: (*String paths) -> void

  def self?.validate_compiled_dungeon_tileset: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_dungeon_tilesets: () -> void

  # ============================================================================
  # Compile dungeon parameters data
  # ============================================================================
  def self?.compile_dungeon_parameters: (*String paths) -> void

  def self?.validate_compiled_dungeon_parameters: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_dungeon_parameters: () -> void

  # ============================================================================
  # Compile phone messages
  # ============================================================================
  def self?.compile_phone: (*String paths) -> void

  def self?.validate_compiled_phone_contact: (Hash[Symbol, untyped] hash) -> void

  def self?.validate_all_compiled_phone_contacts: () -> void

  # ============================================================================
  # Compile battle animations
  # ============================================================================
  def self?.compile_animations: () -> void
end


