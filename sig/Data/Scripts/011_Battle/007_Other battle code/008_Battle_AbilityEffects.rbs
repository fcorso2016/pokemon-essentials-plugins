# ==============================================================================
#
# ==============================================================================
module Battle::AbilityEffects
  SpeedCalc: AbilityHandlerHash

  WeightCalc: AbilityHandlerHash

  # Battler's HP/stat changed
  OnHPDroppedBelowHalf: AbilityHandlerHash

  # Battler's status problem
  StatusCheckNonIgnorable: AbilityHandlerHash

  StatusImmunity: AbilityHandlerHash

  StatusImmunityNonIgnorable: AbilityHandlerHash

  StatusImmunityFromAlly: AbilityHandlerHash

  OnStatusInflicted: AbilityHandlerHash

  StatusCure: AbilityHandlerHash

  # Battler's stat stages
  StatLossImmunity: AbilityHandlerHash

  StatLossImmunityNonIgnorable: AbilityHandlerHash

  StatLossImmunityFromAlly: AbilityHandlerHash

  OnStatGain: AbilityHandlerHash

  OnStatLoss: AbilityHandlerHash

  # Priority and turn order
  PriorityChange: AbilityHandlerHash

  PriorityBracketChange: AbilityHandlerHash

  PriorityBracketUse: AbilityHandlerHash

  # Move usage failures
  OnFlinch: AbilityHandlerHash

  MoveBlocking: AbilityHandlerHash

  MoveImmunity: AbilityHandlerHash

  # Move usage
  ModifyMoveBaseType: AbilityHandlerHash

  # Accuracy calculation
  AccuracyCalcFromUser: AbilityHandlerHash

  AccuracyCalcFromAlly: AbilityHandlerHash

  AccuracyCalcFromTarget: AbilityHandlerHash

  # Damage calculation
  DamageCalcFromUser: AbilityHandlerHash

  DamageCalcFromAlly: AbilityHandlerHash

  DamageCalcFromTarget: AbilityHandlerHash

  DamageCalcFromTargetNonIgnorable: AbilityHandlerHash

  DamageCalcFromTargetAlly: AbilityHandlerHash

  CriticalCalcFromUser: AbilityHandlerHash

  CriticalCalcFromTarget: AbilityHandlerHash

  # Upon a move hitting a target
  OnBeingHit: AbilityHandlerHash

  OnDealingHit: AbilityHandlerHash

  # Abilities that trigger at the end of using a move
  OnEndOfUsingMove: AbilityHandlerHash

  AfterMoveUseFromTarget: AbilityHandlerHash

  # End Of Round
  EndOfRoundWeather: AbilityHandlerHash

  EndOfRoundHealing: AbilityHandlerHash

  EndOfRoundEffect: AbilityHandlerHash

  EndOfRoundGainItem: AbilityHandlerHash

  # Switching and fainting
  CertainSwitching: AbilityHandlerHash

  TrappingByTarget: AbilityHandlerHash

  OnSwitchIn: AbilityHandlerHash

  OnSwitchOut: AbilityHandlerHash

  ChangeOnBattlerFainting: AbilityHandlerHash

  OnBattlerFainting: AbilityHandlerHash

  OnTerrainChange: AbilityHandlerHash

  OnIntimidated: AbilityHandlerHash

  # Running from battle
  CertainEscapeFromBattle: AbilityHandlerHash

  def self.trigger: (AbilityHandlerHash hash, *untyped args, ?ret: bool) -> untyped

  def self.triggerSpeedCalc: (Symbol ability, Battle::Battler battler, Numeric mult) -> Numeric

  def self.triggerWeightCalc: (Symbol ability, Battle::Battler battler, Numeric weight) -> Numeric

  def self.triggerOnHPDroppedBelowHalf: (Symbol ability, Battle::Battler user, Battle::Battler move_user, Battle battle) -> bool

  def self.triggerStatusCheckNonIgnorable: (Symbol ability, Battle::Battler battler, Symbol status) -> bool

  def self.triggerStatusImmunity: (Symbol ability, Battle::Battler battler, Symbol status) -> bool

  def self.triggerStatusImmunityNonIgnorable: (Symbol ability, Battle::Battler battler, Symbol status) -> bool

  def self.triggerStatusImmunityFromAlly: (Symbol ability, Battle::Battler battler, Symbol status) -> bool

  def self.triggerOnStatusInflicted: (Symbol ability, Battle::Battler battler, Battle::Battler user, Symbol status) -> void

  def self.triggerStatusCure: (Symbol ability, Battle::Battler battler) -> void

  def self.triggerStatLossImmunity: (Symbol ability, Battle::Battler battler, Symbol stat, Battle battle, bool show_messages) -> bool

  def self.triggerStatLossImmunityNonIgnorable: (Symbol ability, Battle::Battler battler, Symbol stat, Battle battle, bool show_messages) -> bool

  def self.triggerStatLossImmunityFromAlly: (Symbol ability, Battle::Battler bearer, Battle::Battler battler, Symbol stat, Battle battle, bool show_messages) -> bool

  def self.triggerOnStatGain: (Symbol ability, Battle::Battler battler, Symbol stat, Battle::Battler user) -> void

  def self.triggerOnStatLoss: (Symbol ability, Battle::Battler battler, Symbol stat, Battle::Battler user) -> void

  def self.triggerPriorityChange: (Symbol ability, Battle::Battler battler, Battle::Move move, Integer priority) -> Integer
  
  def self.triggerPriorityBracketChange: (Symbol ability, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerPriorityBracketUse: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerOnFlinch: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerMoveBlocking: (Symbol ability, Battle::Battler bearer, Battle::Battler user, Array[Battle::Battler] targets, Battle::Move move, Battle battle) -> bool

  def self.triggerMoveImmunity: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`, Battle battle, bool show_message) -> bool

  def self.triggerModifyMoveBaseType: (Symbol ability, Battle::Battler user, Battle::Move move, Symbol `type`) -> Symbol

  def self.triggerAccuracyCalcFromUser: (Symbol ability, Hash[Symbol, Numeric] mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerAccuracyCalcFromAlly: (Symbol ability, Hash[Symbol, Numeric]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerAccuracyCalcFromTarget: (Symbol ability, Hash[Symbol, Numeric]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerDamageCalcFromUser: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromAlly: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromTarget: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromTargetNonIgnorable: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromTargetAlly: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerCriticalCalcFromUser: (Symbol ability, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerCriticalCalcFromTarget: (Symbol ability, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerOnBeingHit: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Battle battle) -> void

  def self.triggerOnDealingHit: (Symbol ability, Battle::Battler user, Battle::Battler target, Battle::Move move, Battle battle) -> void

  def self.triggerOnEndOfUsingMove: (Symbol ability, Battle::Battler user, Array[Battle::Battler] targets, Battle::Move move, Battle battle) -> void

  def self.triggerAfterMoveUseFromTarget: (Symbol ability, Battle::Battler target, Battle::Battler user, Battle::Move move, bool switched_battlers, Battle battle) -> void

  def self.triggerEndOfRoundWeather: (Symbol ability, Symbol weather, Battle::Battler battler, Battle battle) -> void

  def self.triggerEndOfRoundHealing: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerEndOfRoundEffect: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerEndOfRoundGainItem: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainSwitching: (Symbol ability, Battle::Battler? switcher, Battle battle) -> void

  def self.triggerTrappingByTarget: (Symbol ability, Battle::Battler? switcher, Battle::Battler bearer, Battle battle) -> void

  def self.triggerOnSwitchIn: (Symbol ability, Battle::Battler battler, Battle battle, ?bool switch_in) -> void

  def self.triggerOnSwitchOut: (Symbol ability, Battle::Battler battler, bool end_of_battle) -> void

  def self.triggerChangeOnBattlerFainting: (Symbol ability, Battle::Battler battler, bool fainted, Battle battle) -> void

  def self.triggerOnBattlerFainting: (Symbol ability, Battle::Battler battler, bool fainted, Battle battle) -> void

  def self.triggerOnTerrainChange: (Symbol ability, Battle::Battler battler, Battle battle, Symbol ability_changed) -> void

  def self.triggerOnIntimidated: (Symbol ability, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainEscapeFromBattle: (Symbol ability, Battle::Battler battler) -> void
end



