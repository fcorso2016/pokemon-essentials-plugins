# ==============================================================================
#
# ==============================================================================
module Battle::ItemEffects
  SpeedCalc: ItemHandlerHash

  WeightCalc: ItemHandlerHash

  # Battler's HP/stat changed
  HPHeal: ItemHandlerHash

  OnStatLoss: ItemHandlerHash

  # Battler's status problem
  StatusCure: ItemHandlerHash

  # Priority and turn order
  PriorityBracketChange: ItemHandlerHash

  PriorityBracketUse: ItemHandlerHash

  # Move usage failures
  OnMissingTarget: ItemHandlerHash

  # Accuracy calculation
  AccuracyCalcFromUser: ItemHandlerHash

  AccuracyCalcFromTarget: ItemHandlerHash

  # Damage calculation
  DamageCalcFromUser: ItemHandlerHash

  DamageCalcFromTarget: ItemHandlerHash

  CriticalCalcFromUser: ItemHandlerHash

  CriticalCalcFromTarget: ItemHandlerHash

  # Upon a move hitting a target
  OnBeingHit: ItemHandlerHash

  OnBeingHitPositiveBerry: ItemHandlerHash

  # Items that trigger at the end of using a move
  AfterMoveUseFromTarget: ItemHandlerHash

  AfterMoveUseFromUser: ItemHandlerHash

  OnEndOfUsingMove: ItemHandlerHash

  OnEndOfUsingMoveStatRestore: ItemHandlerHash

  # Experience and EV gain
  ExpGainModifier: ItemHandlerHash

  EVGainModifier: ItemHandlerHash

  # Weather and terrin
  WeatherExtender: ItemHandlerHash

  TerrainExtender: ItemHandlerHash

  TerrainStatBoost: ItemHandlerHash

  # End Of Round
  EndOfRoundHealing: ItemHandlerHash

  EndOfRoundEffect: ItemHandlerHash

  # Switching and fainting
  CertainSwitching: ItemHandlerHash

  TrappingByTarget: ItemHandlerHash

  OnSwitchIn: ItemHandlerHash

  OnIntimidated: ItemHandlerHash

  # Running from battle
  CertainEscapeFromBattle: ItemHandlerHash

  def self.trigger: (ItemHandlerHash hash, *untyped args, ?ret: bool) -> untyped

  def self.triggerSpeedCalc: (Symbol item, Battle::Battler battler, Numeric mult) -> Numeric

  def self.triggerWeightCalc: (Symbol item, Battle::Battler battler, Numeric w) -> Numeric

  def self.triggerHPHeal: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerOnStatLoss: (Symbol item, Battle::Battler user, Battle::Battler move_user, Battle battle) -> void

  def self.triggerStatusCure: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> void

  def self.triggerPriorityBracketChange: (Symbol item, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerPriorityBracketUse: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerOnMissingTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Integer hit_num, Battle battle) -> void

  def self.triggerAccuracyCalcFromUser: (Symbol item, Hash[Symbol, Numeric]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerAccuracyCalcFromTarget: (Symbol item, Hash[Symbol, Numeric]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerDamageCalcFromUser: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, Numeric] mults, Integer power, Symbol `type`) -> void

  def self.triggerCriticalCalcFromUser: (Symbol item, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerCriticalCalcFromTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerOnBeingHit: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Battle battle) -> void

  def self.triggerOnBeingHitPositiveBerry: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerAfterMoveUseFromTarget: (Symbol item, Battle::Battler battler, Battle::Battler user, Battle::Move move, bool switched_battlers, Battle battle) -> void

  def self.triggerAfterMoveUseFromUser: (Symbol item, Battle::Battler user, Array[Battle::Battler] targets, Battle::Move move, Integer num_hits, Battle battle) -> void

  def self.triggerOnEndOfUsingMove: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> void

  def self.triggerOnEndOfUsingMoveStatRestore: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerExpGainModifier: (Symbol item, Battle::Battler battler, Integer exp) -> Integer

  def self.triggerEVGainModifier: (Symbol item, Battle::Battler battler, Hash[Symbol, Integer] ev_array) -> void

  def self.triggerWeatherExtender: (Symbol item, Symbol weather, Integer duration, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerTerrainExtender: (Symbol item, Symbol terrain, Integer duration, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerTerrainStatBoost: (Symbol item, Battle::Battler battler, Battle battle) -> bool

  def self.triggerEndOfRoundHealing: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerEndOfRoundEffect: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainSwitching: (Symbol item, Battle::Battler switcher, Battle battle) -> bool

  def self.triggerTrappingByTarget: (Symbol item, Battle::Battler switcher, Battle::Battler bearer, Battle battle) -> bool

  def self.triggerOnSwitchIn: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerOnIntimidated: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainEscapeFromBattle: (Symbol item, Battle::Battler battler) -> void
end



