# ==============================================================================
#
# ==============================================================================
module Battle::ItemEffects
  SpeedCalc: ItemHandlerHash[^(Symbol, Battle::Battler, number) -> number]

  WeightCalc: ItemHandlerHash[^(Symbol, Battle::Battler, number) -> number]

  # Battler's HP/stat changed
  HPHeal: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> bool]

  OnStatLoss: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Battle) -> bool]

  # Battler's status problem
  StatusCure: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> bool]

  # Priority and turn order
  PriorityBracketChange: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> Integer]

  PriorityBracketUse: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> void]

  # Move usage failures
  OnMissingTarget: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Battle::Move, Integer, Battle) -> void]

  # Accuracy calculation
  AccuracyCalcFromUser: ItemHandlerHash[^(Symbol, Hash[Symbol, number], Battle::Battler, Battle::Battler, Battle::Move, Symbol) -> void]

  AccuracyCalcFromTarget: ItemHandlerHash[^(Symbol, Hash[Symbol, number], Battle::Battler, Battle::Battler, Battle::Move, Symbol) -> void]

  # Damage calculation
  DamageCalcFromUser: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Move, Hash[Symbol, number], Integer, Symbol) -> void]

  DamageCalcFromTarget: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Move, Hash[Symbol, number], Integer, Symbol) -> void]

  CriticalCalcFromUser: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Integer) -> Integer]

  CriticalCalcFromTarget: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Integer) -> Integer]

  # Upon a move hitting a target
  OnBeingHit: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Battle::Move, Battle) -> void]

  OnBeingHitPositiveBerry: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> bool]

  # Items that trigger at the end of using a move
  AfterMoveUseFromTarget: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Battle::Move, bool, Battle) -> void]

  AfterMoveUseFromUser: ItemHandlerHash[^(Symbol, Battle::Battler, Array[Battle::Battler], Battle::Move, Integer, Battle) -> void]

  OnEndOfUsingMove: ItemHandlerHash[^(Symbol, Battle::Battler, Array[Battle::Battler], Battle::Move, Battle) -> void]

  OnEndOfUsingMoveStatRestore: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> bool]

  # Experience and EV gain
  ExpGainModifier: ItemHandlerHash[^(Symbol, Battle::Battler, Integer) -> Integer]

  EVGainModifier: ItemHandlerHash[^(Symbol, Battle::Battler, Hash[Symbol, Integer]) -> void]

  # Weather and terrin
  WeatherExtender: ItemHandlerHash[^(Symbol, Symbol, Integer, Battle::Battler, Battle) -> Integer]

  TerrainExtender: ItemHandlerHash[^(Symbol, Symbol, Integer, Battle::Battler, Battle) -> Integer]

  TerrainStatBoost: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> bool]

  # End Of Round
  EndOfRoundHealing: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> void]

  EndOfRoundEffect: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> void]

  # Switching and fainting
  CertainSwitching: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> bool]

  TrappingByTarget: ItemHandlerHash[^(Symbol, Battle::Battler, Battle::Battler, Battle) -> bool]

  OnSwitchIn: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> void]

  OnIntimidated: ItemHandlerHash[^(Symbol, Battle::Battler, Battle, bool) -> void]

  # Running from battle
  CertainEscapeFromBattle: ItemHandlerHash[^(Symbol, Battle::Battler) -> bool]

  def self.trigger: (ItemHandlerHash[Proc] hash, *untyped args, ?ret: bool) -> untyped

  def self.triggerSpeedCalc: (Symbol item, Battle::Battler battler, number mult) -> number

  def self.triggerWeightCalc: (Symbol item, Battle::Battler battler, number w) -> number

  def self.triggerHPHeal: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerOnStatLoss: (Symbol item, Battle::Battler user, Battle::Battler move_user, Battle battle) -> void

  def self.triggerStatusCure: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> void

  def self.triggerPriorityBracketChange: (Symbol item, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerPriorityBracketUse: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerOnMissingTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Integer hit_num, Battle battle) -> void

  def self.triggerAccuracyCalcFromUser: (Symbol item, Hash[Symbol, number]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerAccuracyCalcFromTarget: (Symbol item, Hash[Symbol, number]  mods, Battle::Battler user, Battle::Battler target, Battle::Move move, Symbol `type`) -> void

  def self.triggerDamageCalcFromUser: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, number] mults, Integer power, Symbol `type`) -> void

  def self.triggerDamageCalcFromTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Hash[Symbol, number] mults, Integer power, Symbol `type`) -> void

  def self.triggerCriticalCalcFromUser: (Symbol item, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerCriticalCalcFromTarget: (Symbol item, Battle::Battler user, Battle::Battler target, Integer crit_stage) -> Integer

  def self.triggerOnBeingHit: (Symbol item, Battle::Battler user, Battle::Battler target, Battle::Move move, Battle battle) -> void

  def self.triggerOnBeingHitPositiveBerry: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerAfterMoveUseFromTarget: (Symbol item, Battle::Battler battler, Battle::Battler user, Battle::Move move, bool switched_battlers, Battle battle) -> void

  def self.triggerAfterMoveUseFromUser: (Symbol item, Battle::Battler user, Array[Battle::Battler] targets, Battle::Move move, Integer num_hits, Battle battle) -> void

  def self.triggerOnEndOfUsingMove: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> void

  def self.triggerOnEndOfUsingMoveStatRestore: (Symbol item, Battle::Battler battler, Battle battle, bool forced) -> bool

  def self.triggerExpGainModifier: (Symbol item, Battle::Battler battler, Integer exp) -> Integer

  def self.triggerEVGainModifier: (Symbol item, Battle::Battler battler, Hash[Symbol, Integer] ev_array) -> void

  def self.triggerWeatherExtender: (Symbol item, Symbol weather, Integer duration, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerTerrainExtender: (Symbol item, Symbol terrain, Integer duration, Battle::Battler battler, Battle battle) -> Integer

  def self.triggerTerrainStatBoost: (Symbol item, Battle::Battler battler, Battle battle) -> bool

  def self.triggerEndOfRoundHealing: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerEndOfRoundEffect: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainSwitching: (Symbol item, Battle::Battler switcher, Battle battle) -> bool

  def self.triggerTrappingByTarget: (Symbol item, Battle::Battler switcher, Battle::Battler bearer, Battle battle) -> bool

  def self.triggerOnSwitchIn: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerOnIntimidated: (Symbol item, Battle::Battler battler, Battle battle) -> void

  def self.triggerCertainEscapeFromBattle: (Symbol item, Battle::Battler battler) -> void
end



