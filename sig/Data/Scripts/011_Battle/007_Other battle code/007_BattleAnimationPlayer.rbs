# ==============================================================================
#
# ==============================================================================
class AnimFrame
  X: Integer

  Y: Integer

  ZOOMX: Integer

  ANGLE: Integer

  MIRROR: Integer

  BLENDTYPE: Integer

  VISIBLE: Integer

  PATTERN: Integer

  OPACITY: Integer

  ZOOMY: Integer

  COLORRED: Integer

  COLORGREEN: Integer

  COLORBLUE: Integer

  COLORALPHA: Integer

  TONERED: Integer

  TONEGREEN: Integer

  TONEBLUE: Integer

  TONEGRAY: Integer

  LOCKED: Integer

  FLASHRED: Integer

  FLASHGREEN: Integer

  FLASHBLUE: Integer

  FLASHALPHA: Integer

  PRIORITY: Integer

  FOCUS: Integer
end

# ==============================================================================
#
# ==============================================================================
class RPG::Animation
  def self.fromOther: (RPG::Animation otherAnim, Integer id) -> RPG::Animation

  def addSound: (Integer frame, String se) -> void

  # frame is zero-based.
  def addAnimation: (RPG::Animation otherAnim, Integer frame, Integer x, Integer y) -> void
end

# ==============================================================================
#
# ==============================================================================
class PBAnimTiming
  include _ToS

  attr_accessor frame: Integer

  attr_writer timingType: Integer

  attr_accessor name: String

  attr_accessor volume: Integer

  attr_accessor pitch: Integer

  attr_accessor bgX: number?

  attr_accessor bgY: number?

  attr_accessor opacity: number?

  attr_accessor colorRed: number?

  attr_accessor colorGreen: number?

  attr_accessor colorBlue: number?

  attr_accessor colorAlpha: number?

  attr_writer duration: number

  attr_accessor flashScope: Integer

  attr_accessor flashColor: Color

  attr_accessor flashDuration: number

  def initialize: (?Integer `type`) -> void

  def timingType: () -> Integer

  def duration: () -> number
end

# ==============================================================================
#
# ==============================================================================
class PBAnimations < Array[PBAnimation]
  include Enumerable[PBAnimation]

  attr_reader array: Array[PBAnimation]

  attr_accessor selected: Integer

  def initialize: (?Integer size) -> void

  def each: () { (PBAnimation) -> void } -> void

  def get_from_name: (String name) -> PBAnimation?

  def compact: () -> Array[PBAnimation]?

  def insert: (Integer index, PBAnimation val) -> Array[PBAnimation]

  def delete_at: (Integer index) -> PBAnimation

  def resize: (Integer len) -> void
end

# ==============================================================================
#
# ==============================================================================
class PBAnimation < Array[[Array[Integer], Array[Integer]]]
  include Enumerable[[Array[Integer], Array[Integer]]]

  @scope: Integer

  attr_accessor id: Integer

  attr_accessor name: String

  attr_accessor graphic: String

  attr_accessor hue: number

  attr_accessor position: Integer

  attr_writer speed: Integer

  attr_reader array: Array[[Array[Integer], Array[Integer]]]

  attr_reader timing: Array[PBAnimTiming]

  MAX_SPRITES: Integer

  def speed: () -> Integer

  def initialize: (?Integer size) -> void

  def each: () { ([Array[Integer], Array[Integer]]) -> void } -> void

  def insert: (Integer index, [Array[Integer], Array[Integer]] val) -> Array[[Array[Integer], Array[Integer]]]

  def delete_at: (Integer index) -> [Array[Integer], Array[Integer]]

  def resize: (Integer len) -> void

  def addFrame: () -> void

  def playTiming: (Integer frame, String bgGraphic, Color bgColor, String foGraphic, Color foColor, ?Array[number] oldbg, ?Array[number] oldfo, ?Battle::Battler? user) -> untyped
end

# ==============================================================================
# Animation player
# ==============================================================================
class PBAnimationPlayerX
  include _Disposable
  include _Updatable

  @animation: PBAnimation

  @animbitmap: Bitmap?
  @animsprites: Array[Sprite]
  @bgColor: ColoredPlane
  @bgGraphic: AnimatedPlane
  @dstLine: [Integer, Integer, Integer, Integer]?
  @foColor: ColoredPlane
  @foGraphic: AnimatedPlane
  @frame: Integer
  @inEditor: bool
  @old_frame: Integer
  @oldbg: Array[number]
  @oldfo: Array[number]
  @scene: Battle::Scene
  @srcLine: [Integer, Integer, Integer, Integer]?
  @targetOrig: [Integer, Integer]
  @targetbitmap: AnimatedBitmap?
  @targetsprite: AnimatedBitmap?
  @timer_start: number?
  @user: Battle::Battler

  @userOrig: [Integer, Integer]
  @userbitmap: AnimatedBitmap?
  @usersprite: _Visualizable?

  @viewport: Viewport?

  attr_accessor looping: bool

  MAX_SPRITES: Integer

  def initialize: (PBAnimation animation, Battle::Battler user, Battle::Battler target, ?Battle::Scene? scene, ?bool oppMove, ?bool inEditor) -> void

  def initializeSprites: () -> void

  # Makes the original user and target sprites be uninvolved with the animation.
  # The animation shows just its particles.
  def discard_user_and_target_sprites: () -> void

  def set_target_origin: (Integer x, Integer y) -> void

  def start: () -> void

  def animDone?: () -> bool

  def setLineTransform: (Integer x1, Integer y1, Integer x2, Integer y2, Integer x3, Integer y3, Integer x4, Integer y4) -> void

end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def yaxisIntersect: (Integer x1, Integer y1, Integer x2, Integer y2, Integer px, Integer py) -> [Integer, Integer]

  def repositionY: (Integer x1, Integer y1, Integer x2, Integer y2, Integer tx, Integer ty) -> [Integer, Integer]

  def transformPoint: (Integer x1, Integer y1, Integer x2, Integer y2, Integer x3, Integer y3, Integer x4, Integer y4, Integer px, Integer py) -> [Integer, Integer]

  def getSpriteCenter: (Sprite sprite) -> [Integer, Integer]

  def isReversed: (Integer src0, Integer src1, Integer dst0, Integer dst1) -> bool

  def pbCreateCel: (Integer x, Integer y, Integer pattern, ?Integer focus) -> Array[Integer]

  def pbResetCel: (Array[Integer] frame) -> void

  # ==============================================================================
  #
  # ==============================================================================
  def pbConvertRPGAnimation: (RPG::Animation animation) -> PBAnimation

  # ==============================================================================
  #
  # ==============================================================================
  def pbSpriteSetAnimFrame: (Sprite sprite, Integer frame, ?Battle::Battler? user, ?Battle::Battler? target, ?bool inEditor) -> void
end



