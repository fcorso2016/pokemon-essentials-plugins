class Battle::Battler
  # ============================================================================
  # Generalised checks for whether a status problem can be inflicted
  # ============================================================================
  # NOTE: Not all "does it have this status?" checks use this method. If the
  #       check is leading up to curing self of that status condition, then it
  #       will look at the value of @status directly instead - if it is that
  #       status condition then it is curable. This method only checks for
  #       "counts as having that status", which includes Comatose which can't be
  #       cured.
  def pbHasStatus?: (Symbol checkStatus) -> bool

  def pbHasAnyStatus?: () -> bool

  def pbCanInflictStatus?: (Symbol newStatus, Battle::Battler | nil user, bool showMessages, ?(Battle::Move | nil) move, ?bool ignoreStatus) -> bool

  def pbCanSynchronizeStatus?: (Symbol newStatus, Battle::Battler user) -> bool

  # ============================================================================
  # Generalised infliction of status problem
  # ============================================================================
  def pbInflictStatus: (Symbol newStatus, ?Integer newStatusCount, ?(String | nil) msg, ?(Battle::Battler | nil) user) -> void

  # ============================================================================
  # Sleep
  # ============================================================================
  def asleep?: () -> bool

  def pbCanSleep?: (Battle::Battler | nil user, bool showMessages, ?(Battle::Move | nil) move, ?bool ignoreStatus) -> bool

  def pbCanSleepYawn?: () -> bool

  def pbSleep: (?(String | nil) msg) -> void

  def pbSleepSelf: (?(String | nil) msg, ?Integer duration) -> void

  def pbSleepDuration: (?Integer duration) -> Integer

  # ============================================================================
  # Poison
  # ============================================================================
  def poisoned?: () -> bool

  def pbCanPoison?: (Battle::Battler? | nil user, bool showMessages, ?(Battle::Move | nil) move) -> bool

  def pbCanPoisonSynchronize?: (Battle::Battler target) -> bool

  def pbPoison: (?(Battle::Battler | nil) user, ?(String | nil) msg, ?bool toxic) -> void

  # ============================================================================
  # Burn
  # ============================================================================
  def burned?: () -> bool

  def pbCanBurn?: (Battle::Battler? | nil user, bool showMessages, ?(Battle::Move | nil) move) -> bool

  def pbCanBurnSynchronize?: (Battle::Battler target) -> bool

  def pbBurn: (?(Battle::Battler | nil) user, ?(String | nil) msg) -> void

  # ============================================================================
  # Paralyze
  # ============================================================================
  def paralyzed?: () -> bool

  def pbCanParalyze?: (Battle::Battler? | nil user, bool showMessages, ?(Battle::Move | nil) move) -> bool

  def pbCanParalyzeSynchronize?: (Battle::Battler target) -> bool

  def pbParalyze: (?(Battle::Battler | nil) user, ?(String | nil) msg) -> void

  # ============================================================================
  # Freeze
  # ============================================================================
  def frozen?: () -> bool

  def pbCanFreeze?: (Battle::Battler | nil user, bool showMessages, ?(Battle::Move | nil) move) -> bool

  def pbFreeze: (?(String | nil) msg) -> void

  # ============================================================================
  # Generalised status displays
  # ============================================================================
  def pbContinueStatus: () { () -> void } -> void

  def pbCureStatus: (?bool showMessages) -> void

  # ============================================================================
  # Confusion
  # ============================================================================
  def pbCanConfuse?: (?(Battle::Battler | nil) user, ?bool showMessages, ?(Battle::Move | nil) move, ?bool selfInflicted) -> bool

  def pbCanConfuseSelf?: (bool showMessages) -> bool

  def pbConfuse: (?String? msg) -> void

  def pbConfusionDuration: (?Integer duration) -> Integer

  def pbCureConfusion: () -> void

  # ============================================================================
  # Attraction
  # ============================================================================
  def pbCanAttract?: (Battle::Battler? | nil user, ?bool showMessages) -> bool

  def pbAttract: (Battle::Battler? | nil user, ?(String | nil) msg) -> void

  def pbCureAttract: () -> void

  # ============================================================================
  # Flinching
  # ============================================================================
  def pbFlinch: (?Battle::Battler? _user) -> void
end



