interface _BattlerBase
  def battle: -> _BattleBase
  def index: -> Integer
  def pokemon: ->  Pokemon
  def owned: -> bool

  def pokemonIndex: () -> Integer

  def species: () -> Symbol

  def gender: () -> Integer

  def status: () -> Symbol

  def hp: () -> Integer

  def level: () -> Integer

  def name: () -> String

  def totalhp: () -> Integer

  def displayGender: () -> bool

  def shiny?: () -> bool

  def super_shiny?: () -> bool

  def isSpecies?: (Symbol | String | GameData::Species check_species) -> bool

  def fainted?: () -> bool

  def shadowPokemon?: () -> bool

  def hasMega?: () -> bool

  def mega?: () -> bool

  def hasPrimal?: () -> bool

  def primal?: () -> bool

  def captured: () -> bool

  def captured=: (bool value) -> void

  def owned?: () -> bool

  def pbThis: (?bool lowerCase) -> String

  def opposes?: (Integer i) -> bool
end

class Battle::Battler
  include _BattlerBase

  # Fundamental to this object
  attr_writer battle: Battle

  attr_writer index: Integer

  # The PokÃƒÂ©mon and its properties
  @pokemon: Pokemon?

  @pokemonIndex: Integer

  attr_writer species: Symbol

  attr_accessor types: Array[Symbol]

  attr_accessor ability_id: Symbol?

  attr_accessor item_id: Symbol?

  attr_accessor moves: Array[Battle::Move]

  attr_accessor attack: Integer

  attr_accessor spatk: Integer

  attr_accessor speed: Integer

  attr_accessor stages: Hash[Symbol, Integer]

  @totalhp: Integer

  attr_reader fainted: bool

  @captured: bool

  attr_reader dummy: bool

  attr_accessor effects: Array[Integer | bool]

  # Things the battler has done in battle
  attr_accessor turnCount: Integer

  attr_accessor participants: Array[Integer]

  attr_accessor lastAttacker: Array[Integer]

  attr_accessor lastFoeAttacker: Array[Integer]

  attr_accessor lastHPLost: Integer

  attr_accessor lastHPLostFromFoe: Integer

  attr_accessor lastMoveUsed: Symbol?

  attr_accessor lastMoveUsedType: Symbol?

  attr_accessor lastRegularMoveUsed: Symbol?

  attr_accessor lastRegularMoveTarget: Integer

  attr_accessor lastRoundMoved: Integer

  attr_accessor lastMoveFailed: bool

  attr_accessor lastRoundMoveFailed: bool

  attr_accessor movesUsed: Array[Symbol]

  attr_accessor currentMove: Symbol?

  attr_accessor droppedBelowHalfHP: bool

  attr_accessor statsDropped: bool

  attr_accessor tookMoveDamageThisRound: bool

  attr_accessor tookDamageThisRound: bool

  attr_accessor tookPhysicalHit: bool

  attr_accessor statsRaisedThisRound: bool

  attr_accessor statsLoweredThisRound: bool

  attr_accessor canRestoreIceFace: bool

  attr_accessor damageState: Battle::DamageState

  # These arrays should all have the same number of values in them
  STAT_STAGE_MULTIPLIERS: Array[Integer]

  STAT_STAGE_DIVISORS: Array[Integer]

  ACC_EVA_STAGE_MULTIPLIERS: Array[Integer]

  ACC_EVA_STAGE_DIVISORS: Array[Integer]

  STAT_STAGE_MAXIMUM: Integer

  # ============================================================================
  # Complex accessors
  # ============================================================================
  @level: Integer

  def level=: (Integer value) -> void

  attr_reader form: Integer

  def form=: (Integer value) -> void

  def ability: () -> GameData::Ability

  def ability=: (Symbol | String | GameData::Ability value) -> void

  def item: () -> GameData::Item?

  def item=: (Symbol | String | GameData::Item value) -> void

  def defense: () -> Integer

  attr_writer defense: Integer

  def spdef: () -> Integer

  attr_writer spdef: Integer

  @hp: Integer

  def hp=: (Integer value) -> void

  @status: Symbol

  def status=: (Symbol value) -> void

  attr_reader statusCount: Integer

  def statusCount=: (Integer value) -> void

  # ============================================================================
  # Properties from PokÃƒÂ©mon
  # ============================================================================
  def happiness: () -> Integer

  def affection_level: () -> Integer

  def nature: () -> GameData::Nature?

  def pokerusStage: () -> Integer

  # ============================================================================
  # Mega Evolution, Primal Reversion, Shadow PokÃƒÂ©mon
  # ============================================================================
  def inHyperMode?: () -> bool

  # ============================================================================
  # Display-only properties
  # ============================================================================
  attr_writer name: String

  def displayPokemon: () -> Pokemon

  def displaySpecies: () -> Symbol

  def displayForm: () -> Integer

  alias owned owned?

  def abilityName: () -> String

  def itemName: () -> String

  def pbTeam: (?bool lowerCase) -> String

  def pbOpposingTeam: (?bool lowerCase) -> String

  # ============================================================================
  # Calculated properties
  # ============================================================================
  def pbSpeed: () -> Integer

  def pbWeight: () -> number

  # ============================================================================
  # Queries about what the battler has
  # ============================================================================
  def plainStats: () -> Hash[Symbol, Integer]

  # Returns the active types of this PokÃƒÂ©mon. The array should not include the
  # same type more than once, and should not include any invalid types.
  def pbTypes: (?bool withExtraType) -> Array[Symbol]

  def pbHasType?: (Symbol `type`) -> bool

  def pbHasOtherType?: (Symbol `type`) -> bool

  # NOTE: Do not create any held item which affects whether a PokÃƒÂ©mon's ability
  #       is active. The ability Klutz affects whether a PokÃƒÂ©mon's item is
  #       active, and the code for the two combined would cause an infinite loop
  #       (regardless of whether any PokÃƒÂ©mon actually has either the ability or
  #       the item - the code existing is enough to cause the loop).
  def abilityActive?: (?bool ignore_fainted, ?Symbol? check_ability) -> bool

  def hasActiveAbility?: (Symbol | Array[Symbol] check_ability, ?bool ignore_fainted) -> bool

  alias hasWorkingAbility hasActiveAbility?

  # Applies to both losing self's ability (i.e. being replaced by another) and
  # having self's ability be negated.
  def unstoppableAbility?: (?Symbol? abil) -> bool

  # Applies to gaining the ability.
  def ungainableAbility?: (?Symbol? abil) -> bool

  def itemActive?: (?bool ignoreFainted) -> bool

  def hasActiveItem?: (Symbol | Array[Symbol] check_item, ?bool ignore_fainted) -> bool

  alias hasWorkingItem hasActiveItem?

  # Returns whether the specified item will be unlosable for this PokÃƒÂ©mon.
  def unlosableItem?: (Symbol | String | GameData::Item check_item) -> bool

  def eachMove: () { (Battle::Move) -> void } -> void

  def eachMoveWithIndex: () { (Battle::Move, Integer) -> void } -> void

  def pbHasMove?: (Symbol move_id) -> bool

  def pbHasMoveType?: (Symbol check_type) -> bool

  def pbHasMoveFunction?: (*String arg) -> bool

  def pbGetMoveWithID: (Symbol move_id) -> Battle::Move?

  def hasMoldBreaker?: () -> bool

  def canChangeType?: () -> bool

  def airborne?: () -> bool

  def affectedByTerrain?: () -> bool

  def takesIndirectDamage?: (?bool showMsg) -> bool

  def takesSandstormDamage?: () -> bool

  def takesHailDamage?: () -> bool

  def takesShadowSkyDamage?: () -> bool

  def effectiveWeather: () -> Symbol

  def affectedByPowder?: (?bool showMsg) -> bool

  def canHeal?: () -> bool

  def affectedByContactEffect?: (?bool showMsg) -> bool

  def trappedInBattle?: () -> bool

  def movedThisRound?: () -> bool

  def usingMultiTurnAttack?: () -> bool

  def inTwoTurnAttack?: (*String arg) -> bool

  def semiInvulnerable?: () -> bool

  def pbEncoredMoveIndex: () -> Integer

  def initialItem: () -> Symbol

  def setInitialItem: (Symbol | String | GameData::Item value) -> void

  def recycleItem: () -> Symbol

  def setRecycleItem: (Symbol value) -> void

  def belched?: () -> bool

  def setBelched: () -> void

  # ============================================================================
  # Methods relating to this battler's position on the battlefield
  # ============================================================================
  # Returns whether the given position/battler is near to self.
  def near?: (Battle::Battler | Integer i) -> bool

  # Returns whether self is owned by the player.
  def pbOwnedByPlayer?: () -> bool

  def wild?: () -> bool

  # Returns 0 if self is on the player's side, or 1 if self is on the opposing
  # side.
  def idxOwnSide: () -> Integer

  # Returns 1 if self is on the player's side, or 0 if self is on the opposing
  # side.
  def idxOpposingSide: () -> Integer

  # Returns the data structure for this battler's side.
  def pbOwnSide: () -> Battle::ActiveSide

  # Returns the data structure for the opposing PokÃƒÂ©mon's side.
  def pbOpposingSide: () -> Battle::ActiveSide

  # Yields each unfainted ally PokÃƒÂ©mon.
  # Unused
  def eachAlly: () { (Battle::Battler) -> void } -> void

  # Returns an array containing all unfainted ally PokÃƒÂ©mon.
  def allAllies: () -> Array[Battle::Battler]

  # Yields each unfainted opposing PokÃƒÂ©mon.
  # Unused
  def eachOpposing: () { (Battle::Battler) -> void } -> void

  # Returns an array containing all unfainted opposing PokÃƒÂ©mon.
  def allOpposing: () -> Array[Battle::Battler]

  # Returns the battler that is most directly opposite to self. unfaintedOnly is
  # whether it should prefer to return a non-fainted battler.
  def pbDirectOpposing: (?bool unfaintedOnly) -> Battle::Battler
end



