# TypeProf 0.21.3

# Classes
interface _BattleBase
  def pbRandom: (Integer x) -> Integer

  def disablePokeBalls=: (bool value) -> void
  def sendToBoxes=: (bool value) -> void
  def defaultWeather=: (Symbol value) -> void
  def defaultTerrain=: (Symbol value) -> void

  def wildBattle?: -> bool
  def trainerBattle?: -> bool
  def setBattleMode: (String mode) -> void
  def pbSideSize: (Integer index) -> Integer

  def pbPlayer: -> Trainer
  def opponent: -> Array[Trainer]?
  def pbGetOwnerFromBattlerIndex: (Integer | Battle::Battler idxBattler) -> Trainer?

  def pbSetSeen: (Battle::Battler battler) -> void
  def pbSetCaught: (Battle::Battler battler) -> void
  def pbParty: (Integer | Battle::Battler idxBattler) -> Array[Pokemon]

  def pbAllFainted?: (?(Integer | Battle::Battler) idxBattler) -> bool

  def opposes?: (Integer | Battle::Battler idxBattler1, ?(Integer | Battle::Battler) idxBattler2) -> bool
  def pbRemoveFromParty: (Integer | Battle::Battler idxBattler, Integer idxParty) -> void
  def pbGainExp: -> void

  def pbDisplay: (String msg) -> void
  def pbDisplayBrief: (String msg) -> void
  def pbDisplayPaused: (String msg) -> void
  def pbDisplayConfirm: (String msg) -> void

  def pbAbort: -> void
  def pbStartBattle: -> Integer
end

class Battle
  include _BattleBase

  @caughtPokemon: Array[Pokemon]
  @party1: Array[Pokemon]
  @party2: Array[Pokemon]
  @party1order: Array[Integer]
  @party2order: Array[Integer]
  # [battler, speed, sub-priority from ability, sub-priority from item,
  #  final sub-priority, priority, tie-breaker order]
  @priority: Array[[Battler, Integer, Integer, Integer, Integer, Integer, Integer]]
  @priorityTrickRoom: bool
  @runCommand: Integer
  @nextPickupUse: Integer
  @mega_rings: Array[Symbol]
  @battleAI: AI

  attr_reader scene: Scene
  attr_reader peer: Peer
  attr_reader field: ActiveField
  attr_reader sides: [ActiveSide, ActiveSide]
  attr_reader positions: Array[ActivePosition]
  attr_reader battlers: Array[Battler]
  attr_reader sideSizes: [Integer, Integer]
  attr_accessor backdrop: String
  attr_accessor backdropBase: String?
  attr_accessor time: Numeric
  attr_accessor environment: Symbol
  attr_reader turnCount: Integer
  attr_accessor decision: Integer
  attr_reader player: Array[Trainer]?
  attr_reader opponent: Array[Trainer]?
  attr_accessor items: Array[Symbol]?
  attr_accessor ally_items: Array[Symbol]?
  attr_accessor party1starts: Array[Integer]
  attr_accessor party2starts: Array[Integer]
  attr_accessor internalBattle: bool
  attr_accessor debug: bool
  attr_accessor canRun: bool
  attr_accessor canLose: bool
  attr_accessor canSwitch: bool
  attr_accessor switchStyle: bool
  attr_accessor showAnims: bool
  attr_accessor controlPlayer: bool
  attr_accessor expGain: bool
  attr_accessor moneyGain: bool
  attr_accessor disablePokeBalls: bool
  attr_accessor sendToBoxes: Integer
  attr_accessor rules: Hash[String, bool]
  attr_accessor choices: Array[[Symbol, Integer, Move?, Integer]]
  attr_accessor megaEvolution: Array[Array[Integer]]
  attr_reader initialItems: Array[Array[Symbol?]]
  attr_reader recycleItems: Array[Array[Symbol?]]
  attr_reader belch: Array[Array[bool]]
  attr_reader battleBond: Array[Array[bool]]
  attr_reader corrosiveGas: Array[Array[bool]]
  attr_reader usedInBattle: Array[Array[bool]]
  attr_reader successStates: Array[untyped]
  attr_accessor lastMoveUsed: Symbol?
  attr_accessor lastMoveUser: Integer
  attr_accessor first_poke_ball: Symbol
  attr_accessor poke_ball_failed: bool
  attr_reader switching: bool
  attr_reader futureSight: bool
  attr_reader command_phase: bool
  attr_reader endOfRound: bool
  attr_accessor moldBreaker: bool
  attr_reader struggle: Move
  def initialize: (Scene scene, Array[Pokemon] p1, Array[Pokemon] p2, Trainer | Array[Trainer] player, Trainer | Array[Trainer] opponent) -> void
  def singleBattle?: -> bool
  def maxBattlerIndex: -> Integer
  def pbGetOwnerIndexFromBattlerIndex: (Integer | Battler idxBattler) -> Integer
  def pbGetOwnerIndexFromPartyIndex: (Integer | Battler idxBattler, Integer idxParty) -> Integer
  def pbGetOwnerFromPartyIndex: (Integer | Battler idxBattler, Integer idxParty) -> Trainer?
  def pbGetOwnerName: (Integer | Battler idxBattler) -> String
  def pbGetOwnerItems: (Integer | Battler idxBattler) -> Array[Symbol?]
  def pbIsOwner?: (Integer | Battler idxBattler, Integer idxParty) -> bool
  def pbOwnedByPlayer?: (Integer | Battler idxBattler) -> bool
  def pbNumPositions: (Integer side, Integer idxTrainer) -> Integer
  def pbOpposingParty: (Integer | Battler idxBattler) -> Array[Pokemon]
  def pbPartyOrder: (Integer | Battler idxBattler) -> Array[Integer]
  def pbPartyStarts: (Integer | Battler idxBattler) -> [Integer]
  def pbPlayerDisplayParty: (?(Integer | Battler) idxBattler) -> Array[Pokemon]
  def pbAbleCount: (?(Integer | Battler) idxBattler) -> Integer
  def pbAbleNonActiveCount: (?(Integer | Battler) idxBattler) -> Integer
  def pbTeamAbleNonActiveCount: (?(Integer | Battler) idxBattler) -> Integer
  def pbAbleTeamCounts: (Integer side) -> Array[Integer]
  def pbTeamIndexRangeFromBattlerIndex: (Integer | Battler idxBattler) -> [Integer, Integer]
  def pbTeamLengthFromBattlerIndex: (Integer | Battler idxBattler) -> Integer
  def eachInTeamFromBattlerIndex: (Integer | Battler idxBattler) { (Pokemon, Integer) -> void } -> void
  def eachInTeam: (Integer side, Integer idxTrainer) { (Pokemon, Integer) -> void } -> void
  def pbLastInTeam: (Integer | Battler idxBattler) -> Integer
  def pbMaxLevelInTeam: (Integer side, Integer idxTrainer) -> Integer
  def eachBattler: { (Battler) -> void } -> void
  def allBattlers: -> Array[Battler]
  def eachSameSideBattler: (?(Integer | Battler) idxBattler) { (Battler) -> void } -> void
  def allSameSideBattlers: (?(Integer | Battler) idxBattler) -> Array[Battler]
  def eachOtherSideBattler: (?(Integer | Battler) idxBattler) { (Battler) -> void } -> void
  def allOtherSideBattlers: (?(Integer | Battler) idxBattler) -> Array[Battler]
  def pbSideBattlerCount: (?(Integer | Battler) idxBattler) -> Integer
  def pbOpposingBattlerCount: (?(Integer | Battler) idxBattler) -> Integer
  def pbPlayerBattlerCount: -> Integer
  def pbCheckGlobalAbility: (Symbol abil) -> Battler?
  def pbCheckOpposingAbility: (Symbol abil, ?(Integer | Battler) idxBattler, ?bool nearOnly) -> Battler?
  def pbGetOpposingIndicesInOrder: (Integer | Battler idxBattler) -> Array[Integer]
  def nearBattlers?: (Integer | Battler idxBattler1, Integer | Battler idxBattler2) -> bool
  def pbSwapBattlers: (Integer idxA, Integer idxB) -> bool
  def pbFindBattler: (Integer idxParty, ?(Integer | Battler) idxBattlerOther) -> Battler?
  def pbThisEx: (Integer | Battler idxBattler, Integer idxParty) -> String
  def pbSetDefeated: (Battler battler) -> void
  def nextPickupUse: -> Integer
  def defaultWeather=: (Symbol value) -> void
  def pbWeather: -> Symbol
  def pbStartWeather: (Battler? user, Symbol newWeather, ?bool fixedDuration, ?bool showAnim) -> void
  def pbEndPrimordialWeather: -> void
  def pbStartWeatherAbility: (Symbol new_weather, Battler battler, ?bool ignore_primal) -> void
  def defaultTerrain=: (Symbol value) -> void
  def pbStartTerrain: (Battler? user, Symbol newTerrain, ?bool fixedDuration) -> Array[untyped]?
  def pbShowCommands: (String msg, Array[String] commands, ?Integer defaultValue) -> Integer
  def pbAnimation: (Symbol move, Battler? user, Integer | Array[Integer] targets, ?Integer hitNum) -> void
  def pbCommonAnimation: (String name, ?Battler? user, ?(Integer? | Array[Integer]) targets) -> void
  def pbShowAbilitySplash: (Battler battler, ?bool delay, ?bool logTrigger) -> void
  def pbHideAbilitySplash: (Battler battler) -> void
  def pbReplaceAbilitySplash: (Battler battler) -> void
end



