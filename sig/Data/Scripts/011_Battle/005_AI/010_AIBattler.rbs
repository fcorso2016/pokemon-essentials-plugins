# ==============================================================================
#
# ==============================================================================
class Battle::AI::AIBattler
  @ai: Battle::AI

  attr_reader index: Integer

  attr_reader side: Integer

  attr_reader party_index: Integer

  attr_reader battler: Battle::Battler

  def initialize: (Battle::AI ai, Integer index) -> void

  def refresh_battler: () -> void

  def pokemon: () -> Pokemon

  def level: () -> Integer

  def hp: () -> Integer

  def totalhp: () -> Integer

  def fainted?: () -> bool

  def status: () -> Symbol

  def statusCount: () -> Integer

  def gender: () -> Integer

  def turnCount: () -> Integer

  def effects: () -> Array[Integer | bool]

  def stages: () -> Hash[Symbol, Integer]

  def statStageAtMax?: (Symbol stat) -> bool

  def statStageAtMin?: (Symbol stat) -> bool

  def moves: () -> Array[Battle::Move]

  def wild?: () -> bool

  def name: () -> String

  def opposes?: (?Battle::AI::AIBattler? other) -> bool

  def idxOwnSide: () -> Integer

  def pbOwnSide: () -> Battle::ActiveSide

  def idxOpposingSide: () -> Integer

  def pbOpposingSide: () -> Battle::ActiveSide

  # Returns how much damage this battler will take at the end of this round.
  def rough_end_of_round_damage: () -> Integer

  def base_stat: (Symbol stat) -> Integer

  def rough_stat: (Symbol stat) -> Integer

  def faster_than?: (Battle::AI::AIBattler other) -> bool

  def types: () -> Array[Symbol]

  def pbTypes: (?bool withExtraType) -> Array[Symbol]

  def has_type?: (Symbol `type`) -> bool

  alias pbHasType? has_type?

  def effectiveness_of_type_against_battler: (Symbol `type`, ?Battle::AI::AIBattler? user, ?Battle::AI::AIMove? move) -> Numeric

  def ability_id: () -> Symbol

  def ability: () -> GameData::Ability

  def ability_active?: () -> bool

  def has_active_ability?: (Symbol ability, ?bool ignore_fainted) -> bool

  def has_mold_breaker?: () -> bool

  def item_id: () -> Symbol

  def item: () -> GameData::Item

  def item_active?: () -> bool

  def has_active_item?: (Symbol item) -> bool

  def check_for_move: () { (Battle::Move) -> void } -> void

  def has_damaging_move_of_type?: (*Symbol types) -> bool

  def has_move_with_function?: (*String functions) -> bool

  def can_attack?: () -> bool

  def can_switch_lax?: () -> bool

  # NOTE: This specifically means "is not currently trapped but can become
  #       trapped by an effect". Similar to def pbCanSwitchOut? but this returns
  #       false if any certain switching OR certain trapping applies.
  def can_become_trapped?: () -> bool

  def wants_status_problem?: (Symbol new_status) -> bool

  # Returns a value indicating how beneficial the given ability will be to this
  # battler if it has it.
  # Return values are typically between -10 and +10. 0 is indifferent, positive
  # values mean this battler benefits, negative values mean this battler suffers.
  # NOTE: This method assumes the ability isn't being negated. The calculations
  #       that call this method separately check for it being negated, because
  #       they need to do something special in that case.
  def wants_ability?: (?Symbol ability) -> Integer

  # Returns a value indicating how beneficial the given item will be to this
  # battler if it is holding it.
  # Return values are typically between -10 and +10. 0 is indifferent, positive
  # values mean this battler benefits, negative values mean this battler suffers.
  # NOTE: This method assumes the item isn't being negated. The calculations
  #       that call this method separately check for it being negated, because
  #       they need to do something special in that case.
  def wants_item?: (Symbol item) -> Integer

  # Items can be consumed by Stuff Cheeks, Teatime, Bug Bite/Pluck and Fling.
  def get_score_change_for_consuming_item: (Symbol item, ?bool try_preserving_item) -> Integer

  private

  def effectiveness_of_type_against_single_battler_type: (Symbol `type`, Symbol defend_type, ?Battle::AI::AIBattler? user) -> Numeric
end



