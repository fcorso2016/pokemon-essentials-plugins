# ==============================================================================
#
# ==============================================================================
class Battle::AI::AIMove
  @ai: Battle::AI

  attr_reader move: Battle::Move

  def initialize: (Battle::AI ai) -> void

  def set_up: (Battle::Move move) -> void

  def id: () -> Symbol

  def name: () -> String

  def physicalMove?: (?Symbol? thisType) -> bool

  def specialMove?: (?Symbol? thisType) -> bool

  def damagingMove?: () -> bool

  def statusMove?: () -> bool

  def function_code: () -> String

  def type: () -> Symbol

  def rough_type: () -> Symbol

  def pbTarget: (Battle::AI::AIBattler | Battle::Battler user) -> Battle::Battler

  # Returns whether this move targets multiple battlers.
  def targets_multiple_battlers?: () -> bool

  def rough_priority: (Battle::AI::AIBattler user) -> Integer

  # Returns this move's base power, taking into account various effects that
  # modify it.
  def base_power: () -> Integer

  # Full damage calculation.
  def rough_damage: () -> Integer

  def accuracy: () -> Integer

  # Full accuracy calculation.
  def rough_accuracy: () -> Integer

  def apply_rough_accuracy_modifiers: (Battle::AI::AIBattler user, Battle::AI::AIBattler target, Symbol calc_type, Hash[Symbol, number] modifiers) -> void

  # Full critical hit chance calculation (returns the determined critical hit
  # stage).
  def rough_critical_hit_stage: () -> Integer

  # Return values:
  #   0: Regular additional effect chance or isn't an additional effect
  #   -999: Additional effect will be negated
  #   Other: Amount to add to a move's score
  def get_score_change_for_additional_effect: (Battle::AI::AIBattler user, ?Battle::AI::AIBattler? target) -> Integer
end



