# Battle scene (the visuals of the battle)
class Battle::Scene
  include _Scene

  @aborted: bool
  @briefMessage: bool
  @battleEnd: bool

  attr_accessor abortable: bool

  attr_reader viewport: Viewport

  attr_reader sprites: Hash[String, _Visualizable]

  USE_ABILITY_SPLASH: bool

  MESSAGE_PAUSE_TIME: number

  # Text colors
  MESSAGE_BASE_COLOR: Color

  MESSAGE_SHADOW_COLOR: Color

  # The number of party balls to show in each side's lineup.
  NUM_BALLS: Integer

  # Centre bottom of the player's side base graphic
  PLAYER_BASE_X: Integer

  PLAYER_BASE_Y: Integer

  # Centre middle of the foe's side base graphic
  FOE_BASE_X: Integer

  FOE_BASE_Y: Integer

  # Default focal points of user and target in animations - do not change!
  # Is the centre middle of each sprite
  FOCUSUSER_X: Integer

  FOCUSUSER_Y: Integer

  FOCUSTARGET_X: Integer

  FOCUSTARGET_Y: Integer

  # Menu types
  BLANK: Integer

  MESSAGE_BOX: Integer

  COMMAND_BOX: Integer

  FIGHT_BOX: Integer

  TARGET_BOX: Integer

  # Returns where the centre bottom of a battler's sprite should be, given its
  # index and the number of battlers on its side, assuming the battler has
  # metrics of 0 (those are added later).
  def self.pbBattlerPosition: (Integer index, ?Integer sideSize) -> [Integer, Integer]

  # Returns where the centre bottom of a trainer's sprite should be, given its
  # side (0/1), index and the number of trainers on its side.
  def self.pbTrainerPosition: (Integer side, ?Integer index, ?Integer sideSize) -> [Integer, Integer]

  # ============================================================================
  # Updating and refreshing
  # ============================================================================
  def pbUpdate: (?Window_CommandPokemon? cw) -> void

  def pbGraphicsUpdate: () -> void

  def pbInputUpdate: () -> void

  def pbFrameUpdate: (?Window_CommandPokemon? cw) -> void

  def pbRefresh: () -> void

  def pbRefreshOne: (Integer idxBattler) -> void

  def pbRefreshEverything: () -> void

  # ============================================================================
  # Party lineup
  # ============================================================================
  # Returns whether the party line-ups are currently coming on-screen
  def inPartyAnimation?: () -> bool

  # ============================================================================
  # Window displays
  # ============================================================================
  def pbShowWindow: (Integer windowType) -> void

  # This is for the end of brief messages, which have been lingering on-screen
  # while other things happened. This is only called when another message wants
  # to be shown, and makes the brief message linger for one more second first.
  # Some animations skip this extra second by setting @briefMessage to false
  # despite not having any other messages to show.
  def pbWaitMessage: () -> void

  # NOTE: A regular message is displayed for 1 second after it fully appears (or
  #       less if Back/Use is pressed). Disappears automatically after that time.
  def pbDisplayMessage: (String msg, ?bool brief) { () -> void } -> void

  alias pbDisplay pbDisplayMessage

  # NOTE: A paused message has the arrow in the bottom corner indicating there
  #       is another message immediately afterward. It is displayed for 3
  #       seconds after it fully appears (or less if B/C is pressed) and
  #       disappears automatically after that time, except at the end of battle.
  def pbDisplayPausedMessage: (String msg) { () -> void } -> void

  def pbDisplayConfirmMessage: (String msg) -> void

  def pbShowCommands: (String msg, Array[String] commands, Integer defaultValue) -> void

  # ============================================================================
  # Sprites
  # ============================================================================
  def pbAddSprite: (String id, Integer x, Integer y, String? filename, Viewport viewport) -> void

  def pbAddPlane: (String id, String filename, Viewport viewport) -> void

  def pbDisposeSprites: () -> void

  # Used by Ally Switch.
  def pbSwapBattlerSprites: (Integer idxA, Integer idxB) -> void

  # ============================================================================
  # Phases
  # ============================================================================
  def pbBeginCommandPhase: () -> void

  def pbBeginAttackPhase: () -> void

  def pbBeginEndOfRoundPhase: () -> void

  def pbEndBattle: (Integer _result) -> void

  # ============================================================================
  #
  # ============================================================================
  def pbSelectBattler: (Integer | Battle::Battler idxBattler, ?Integer selectMode) -> void

  def pbChangePokemon: (Integer | Battle::Battler idxBattler, Pokemon pkmn) -> void

  def pbResetCommandsIndex: (Integer idxBattler) -> void

  # ============================================================================
  #
  # ============================================================================
  # This method is called when the player wins a wild PokÃƒÂ©mon battle.
  # This method can change the battle's music for example.
  def pbWildBattleSuccess: () -> void

  # This method is called when the player wins a trainer battle.
  # This method can change the battle's music for example.
  def pbTrainerBattleSuccess: () -> void
end



