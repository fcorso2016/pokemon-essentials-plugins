class Battle::Scene
  @bagChoices: Array[Integer]
  @bagLastPocket: Integer

  # ============================================================================
  # The player chooses a main command for a PokÃ©mon
  # Return values: -1=Cancel, 0=Fight, 1=Bag, 2=PokÃ©mon, 3=Run, 4=Call
  # ============================================================================
  def pbCommandMenu: (Integer idxBattler, bool firstAction) -> Integer

  # Mode: 0 = regular battle with "Run" (first choosable action in the round only)
  #       1 = regular battle with "Cancel"
  #       2 = regular battle with "Call" (for Shadow PokÃ©mon battles)
  #       3 = Safari Zone
  #       4 = Bug-Catching Contest
  def pbCommandMenuEx: (Integer idxBattler, Array[String] texts, ?Integer mode) -> Integer

  # ============================================================================
  # The player chooses a move for a PokÃ©mon to use
  # ============================================================================
  def pbFightMenu: (Integer idxBattler, ?bool megaEvoPossible) { (Integer) -> void } -> void

  # ============================================================================
  # Opens the party screen to choose a PokÃ©mon to switch in (or just view its
  # summary screens)
  # mode: 0=PokÃ©mon command, 1=choose a PokÃ©mon to send to the Boxes, 2=view
  #       summaries only
  # ============================================================================
  def pbPartyScreen: (Integer idxBattler, ?bool canCancel, ?Integer mode) { (Integer, PokemonPartyScreen) -> void } -> void

  # ============================================================================
  # Opens the Bag screen and chooses an item to use
  # ============================================================================
  def pbItemMenu: (Integer idxBattler, bool _firstAction) { (Symbol, Integer, Integer, Integer, _Scene) -> void } -> void

  # ============================================================================
  # The player chooses a target battler for a move/item (non-single battles only)
  # ============================================================================
  # Returns an array containing battler names to display when choosing a move's
  # target.
  # nil means can't select that position, "" means can select that position but
  # there is no battler there, otherwise is a battler's name.
  def pbCreateTargetTexts: (Integer idxBattler, GameData::Target target_data) -> Array[String?]

  # Returns the initial position of the cursor when choosing a target for a move
  # in a non-single battle.
  def pbFirstTarget: (Integer idxBattler, GameData::Target target_data) -> Integer

  def pbChooseTarget: (Integer idxBattler, GameData::Target target_data, ?Hash[String, _Visualizable]? visibleSprites) -> Integer

  # ============================================================================
  # Opens a PokÃ©mon's summary screen to try to learn a new move
  # ============================================================================
  # Called whenever a PokÃ©mon should forget a move. It should return -1 if the
  # selection is canceled, or 0 to 3 to indicate the move to forget. It should
  # not allow HM moves to be forgotten.
  def pbForgetMove: (Pokemon pkmn, Symbol moveToLearn) -> Integer

  # ============================================================================
  # Opens the nicknaming screen for a newly caught PokÃ©mon
  # ============================================================================
  def pbNameEntry: (String helpText, Pokemon pkmn) -> String

  # ============================================================================
  # Shows the PokÃ©dex entry screen for a newly caught PokÃ©mon
  # ============================================================================
  def pbShowPokedex: (Symbol | String | GameData::Species species) -> void
end


