# ==============================================================================
# Data box for regular battles
# ==============================================================================
class Battle::Scene::PokemonDataBox < Sprite
  include _Refreshable

  @anim_exp_current: Integer?
  @anim_exp_duration_mult: Math::double?
  @anim_exp_end: Integer?
  @anim_exp_flash_timer_start: Math::double?
  @anim_exp_range: Integer?
  @anim_exp_start: Integer?
  @anim_exp_timer_start: Math::double?
  @anim_hp_current: Integer?
  @anim_hp_end: Integer?
  @anim_hp_start: Integer?
  @anim_hp_timer_start: Math::double?
  @contents: Bitmap
  @databoxBitmap: AnimatedBitmap
  @expBar: Sprite
  @expBarBitmap: AnimatedBitmap
  @hpBar: Sprite
  @hpBarBitmap: AnimatedBitmap
  @hpNumbers: BitmapSprite
  @numbersBitmap: AnimatedBitmap
  @show_exp_bar: bool
  @show_hp_numbers: bool
  @spriteBaseX: Integer
  @spriteX: Integer
  @spriteY: Integer
  @sprites: Hash[String, _Visualizable]

  attr_reader battler: Battle::Battler

  attr_accessor selected: Integer

  # Time in seconds to fully fill the Exp bar (from empty).
  EXP_BAR_FILL_TIME: Math::double

  # Time in seconds for this data box to flash when the Exp fully fills.
  EXP_FULL_FLASH_DURATION: Math::double

  # Maximum time in seconds to make a change to the HP bar.
  HP_BAR_CHANGE_TIME: Math::double

  # Time (in seconds) for one complete sprite bob cycle (up and down) while
  # choosing a command for this battler or when this battler is being chosen as
  # a target. Set to nil to prevent bobbing.
  BOBBING_DURATION: Math::double

  # Height in pixels of a status icon
  STATUS_ICON_HEIGHT: Integer

  # Text colors
  NAME_BASE_COLOR: Color

  NAME_SHADOW_COLOR: Color

  MALE_BASE_COLOR: Color

  MALE_SHADOW_COLOR: Color

  FEMALE_BASE_COLOR: Color

  FEMALE_SHADOW_COLOR: Color

  def initialize: (Battle::Battler battler, [Integer, Integer] sideSize, ?Viewport? viewport) -> void

  def initializeDataBoxGraphic: ([Integer, Integer] sideSize) -> void

  def initializeOtherGraphics: (Viewport? viewport) -> void

  def opacity=: (Math::double value) -> void

  def color=: (Color value) -> void

  def battler=: (Battle::Battler b) -> void

  def hp: () -> Integer

  def exp_fraction: () -> Float

  # NOTE: A change in HP takes the same amount of time to animate, no matter how
  #       big a change it is.
  def animate_hp: (Integer old_val, Integer new_val) -> void

  def animating_hp?: () -> bool

  # NOTE: Filling the Exp bar from empty to full takes EXP_BAR_FILL_TIME seconds
  #       no matter what. Filling half of it takes half as long, etc.
  def animate_exp: (Integer old_val, Integer new_val, Integer range) -> void

  def animating_exp?: () -> bool

  def pbDrawNumber: (Integer number, Bitmap btmp, Integer startX, Integer startY, ?Symbol align) -> void

  def draw_background: () -> void

  def draw_name: () -> void

  def draw_level: () -> void

  def draw_gender: () -> void

  def draw_status: () -> void

  def draw_shiny_icon: () -> void

  def draw_special_form_icon: () -> void

  def draw_owned_icon: () -> void

  def refresh_hp: () -> void

  def refresh_exp: () -> void

  def update_hp_animation: () -> void

  def update_exp_animation: () -> void

  def update_positions: () -> void
end

# ==============================================================================
# Splash bar to announce a triggered ability
# ==============================================================================
class Battle::Scene::AbilitySplashBar < Sprite
  include _Refreshable

  @bgBitmap: AnimatedBitmap

  @bgSprite: Sprite

  @contents: Bitmap

  @side: Integer

  attr_reader battler: Battle::Battler?

  TEXT_BASE_COLOR: Color

  TEXT_SHADOW_COLOR: Color

  def initialize: (Integer side, ?Viewport? viewport) -> void

  def battler=: (Battle::Battler? value) -> void
end

# ==============================================================================
# PokÃƒÂ©mon sprite (used in battle)
# ==============================================================================
class Battle::Scene::BattlerSprite < RPG::Sprite
  @_iconBitmap: AnimatedBitmap?
  @battleAnimations: Array[Battle::Scene::Animation]

  @spriteVisible: bool
  @spriteX: Integer
  @spriteXExtra: Integer
  @spriteY: Integer
  @spriteYExtra: Integer
  @updating: bool

  attr_reader pkmn: Pokemon?

  attr_accessor index: Integer

  attr_accessor selected: Integer

  attr_reader sideSize: Integer

  # Time (in seconds) for one complete sprite bob cycle (up and down) while
  # choosing a command for this battler. Set to nil to prevent bobbing.
  COMMAND_BOBBING_DURATION: Math::double

  # Time (in seconds) for one complete blinking cycle while this battler is
  # being chosen as a target. Set to nil to prevent blinking.
  TARGET_BLINKING_DURATION: Math::double

  def initialize: (Viewport? viewport, Integer sideSize, Integer index, Array[Battle::Scene::Animation] battleAnimations) -> void

  # Set sprite's origin to bottom middle
  def pbSetOrigin: () -> void

  def pbSetPosition: () -> void

  def setPokemonBitmap: (Pokemon pkmn, ?bool back) -> void

  # This method plays the battle entrance animation of a PokÃƒÂ©mon. By default
  # this is just playing the PokÃƒÂ©mon's cry, but you can expand on it. The
  # recommendation is to create a PictureEx animation and push it into
  # the @battleAnimations array.
  def pbPlayIntroAnimation: (?PictureEx? pictureEx) -> void
end

# ==============================================================================
# Shadow sprite for PokÃƒÂ©mon (used in battle)
# ==============================================================================
class Battle::Scene::BattlerShadowSprite < RPG::Sprite
  @_iconBitmap: AnimatedBitmap?
  @sideSize: Integer

  attr_reader pkmn: Pokemon?

  attr_accessor index: Integer

  attr_accessor selected: Integer

  def initialize: (Viewport? viewport, Integer sideSize, Integer index) -> void

  # Set sprite's origin to centre
  def pbSetOrigin: () -> void

  def pbSetPosition: () -> void

  def setPokemonBitmap: (Pokemon? pkmn) -> void
end



