# ==============================================================================
# Used when generating new trainers for battle challenges
# ==============================================================================
class Battle::DebugSceneNoVisuals
  include _Scene

  @battle: Battle?

  @lastCmd: [Integer, Integer, Integer, Integer]

  @lastMove: [Integer, Integer, Integer, Integer]

  @log_messages: bool

  def initialize: (?bool log_messages) -> void

  # Called whenever the battle begins.
  def pbStartBattle: (Battle battle) -> void

  def pbBlitz: (Array[String] keys) -> Integer

  # Called whenever a new round begins.
  def pbBeginCommandPhase: () -> void

  def pbBeginAttackPhase: () -> void

  def pbBeginEndOfRoundPhase: () -> void

  def pbShowOpponent: (Integer idxTrainer) -> void

  def pbDamageAnimation: (Battle::Battler battler, ?Integer effectiveness) -> void

  def pbCommonAnimation: (String animName, ?Battle::Battler? user, ?(Battle::Battler | Array[Battle::Battler])? target) -> void

  def pbAnimation: (Symbol | String | GameData::Move moveID, Battle::Battler user, Battle::Battler | Array[Battle::Battler] targets, ?Integer hitNum) -> void

  def pbHitAndHPLossAnimation: (Battle::Battler | Array[Battle::Battler] targets) -> void

  def pbShowPartyLineup: (Integer side, ?bool fullAnim) -> void

  def pbShowAbilitySplash: (Battle::Battler battler, ?bool delay, ?bool logTrigger) -> void

  def pbReplaceAbilitySplash: (Battle::Battler battler) -> void

  def pbHideAbilitySplash: (Battle::Battler battler) -> void

  def pbEndBattle: (Integer result) -> void

  def pbWildBattleSuccess: () -> void

  def pbTrainerBattleSuccess: () -> void

  def pbBattleArenaJudgment: (Battle::Battler b1, Battle::Battler b2, [Integer, Integer, Integer] r1, [Integer, Integer, Integer] r2) -> void

  def pbBattleArenaBattlers: (Battle::Battler b1, Battle::Battler b2) -> void

  def pbUpdate: (?Window_CommandPokemon? cw) -> void

  def pbRefresh: () -> void

  def pbRefreshOne: (Integer | Battle::Battler idxBattler) -> void

  def pbDisplayMessage: (String msg, ?bool brief) -> void

  alias pbDisplay pbDisplayMessage

  def pbDisplayPausedMessage: (String msg) -> void

  def pbDisplayConfirmMessage: (String msg) -> bool

  def pbShowCommands: (String msg, Array[String] commands, Integer defaultValue) -> Integer

  def pbSendOutBattlers: (Array[[Integer, Pokemon]] sendOuts, ?bool startBattle) -> void

  def pbRecall: (Integer | Battle::Battler idxBattler) -> void

  def pbItemMenu: (Integer | Battle::Battler idxBattler, bool firstAction) -> Integer

  def pbResetCommandsIndex: (Integer | Battle::Battler idxBattler) -> void

  def pbHPChanged: (Battle::Battler battler, Integer oldHP, ?bool showAnim) -> void

  def pbChangePokemon: (Integer | Battle::Battler idxBattler, Pokemon pkmn) -> void

  def pbFaintBattler: (Battle::Battler battler) -> void

  def pbEXPBar: (Battle::Battler battler, Integer startExp, Integer endExp, Integer tempExp1, Integer tempExp2) -> void

  def pbLevelUp: (Pokemon pkmn, Battle::Battler battler, Integer oldTotalHP, Integer oldAttack, Integer oldDefense, Integer oldSpAtk, Integer oldSpDef, Integer oldSpeed) -> void

  def pbForgetMove: (Pokemon pkmn, Symbol moveToLearn) -> Integer

  def pbCommandMenu: (Integer | Battle::Battler idxBattler, bool firstAction) -> Integer

  def pbFightMenu: (Integer | Battle::Battler idxBattler, ?bool megaEvoPossible) { (Integer) -> boolish } -> void

  def pbChooseTarget: (Integer | Battle::Battler idxBattler, GameData::Target target_data, ?Hash[String, _Visualizable]? visibleSprites) -> Integer

  def pbPartyScreen: (Integer | Battle::Battler idxBattler, ?bool canCancel) { (Integer, Battle::DebugSceneNoVisuals) -> boolish } -> void
end


