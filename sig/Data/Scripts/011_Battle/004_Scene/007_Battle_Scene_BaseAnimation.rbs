# ==============================================================================
# Base class for all hardcoded battle animations.
# ==============================================================================
class Battle::Scene::Animation
  include _Disposable
  include _Updatable

  @animDone: bool
  @pictureEx: Array[PictureEx]
  @pictureSprites: Array[Sprite_Picture]
  @sprites: Hash[String, _Visualizable]

  @tempSprites: Array[Sprite]
  @viewport: Viewport?

  def initialize: (Hash[String, _Visualizable] sprites, Viewport? viewport) -> void
  def createProcesses: () -> void

  def empty?: () -> bool

  def animDone?: () -> bool

  def addSprite: (untyped s, ?Integer origin) -> PictureEx

  def addNewSprite: (Integer x, Integer y, String name, ?Integer origin) -> PictureEx
end

# ==============================================================================
# Mixin module for certain hardcoded battle animations that involve PokÃƒÂ© Balls.
# ==============================================================================
module Battle::Scene::Animation::BallAnimationMixin
  @ballSprite: PictureEx

  # Returns the color that the PokÃƒÂ©mon turns when it goes into or out of its
  # PokÃƒÂ© Ball.
  def getBattlerColorFromPokeBall: (Symbol poke_ball) -> Color

  def addBallSprite: (Integer ballX, Integer ballY, Symbol poke_ball) -> PictureEx

  def ballTracksHand: (PictureEx ball, Sprite traSprite, ?bool safariThrow) -> [Integer, Integer]

  def trainerThrowingFrames: (PictureEx ball, Trainer trainer, Sprite traSprite) -> [Integer, Integer]

  def createBallTrajectory: (PictureEx ball, number delay, number duration, Integer startX, Integer startY, Integer midX, Integer midY, Integer endX, Integer endY) -> void

  def createBallTumbling: (PictureEx ball, number delay, number duration) -> void

  def ballSetOpen: (PictureEx ball, number delay, Symbol poke_ball) -> void

  def ballSetClosed: (PictureEx ball, number delay, Symbol poke_ball) -> void

  def ballOpenUp: (PictureEx ball, number delay, Symbol poke_ball, ?bool showSquish, ?bool playSE) -> void

  def battlerAppear: (PictureEx battler, number delay, Integer battlerX, Integer battlerY, Sprite batSprite, Color color) -> void

  def battlerAbsorb: (PictureEx battler, number delay, Integer battlerX, Integer battlerY, Color color) -> void

  # NOTE: This array makes the Ball Burst animation differ between types of PokÃƒÂ©
  #       Ball in certain simple ways. The HGSS animations occasionally have
  #       additional differences, which haven't been coded yet in Essentials as
  #       they're more complex and I couldn't be bothered.
  BALL_BURST_VARIANCES: Hash[Symbol, Array[Tone | String]]

  # The regular PokÃƒÂ© Ball burst animation, for when a PokÃƒÂ©mon appears from a
  # PokÃƒÂ© Ball.
  def ballBurst: (number delay, PictureEx ball, Integer ballX, Integer ballY, Symbol poke_ball) -> void

  # NOTE: This array makes the Ball Burst capture animation differ between types
  #       of PokÃƒÂ© Ball in certain simple ways. The HGSS animations occasionally
  #       have additional differences, which haven't been coded yet in
  #       Essentials as they're more complex and I couldn't be bothered.
  BALL_BURST_CAPTURE_VARIANCES: Hash[Symbol, Array[Tone | String]]

  # The PokÃƒÂ© Ball burst animation used when absorbing a wild PokÃƒÂ©mon during a
  # capture attempt.
  def ballBurstCapture: (number delay, PictureEx ball, Integer ballX, Integer ballY, Symbol poke_ball) -> void

  # The animation shown over a thrown PokÃƒÂ© Ball when it has successfully caught
  # a PokÃƒÂ©mon.
  def ballCaptureSuccess: (PictureEx ball, number delay, Integer ballX, Integer ballY) -> void

  # The PokÃƒÂ© Ball burst animation used when recalling a PokÃƒÂ©mon. In HGSS, this
  # is the same for all types of PokÃƒÂ© Ball except for the color that the battler
  # turns - see def getBattlerColorFromPokeBall.
  def ballBurstRecall: (number delay, PictureEx ball, Integer ballX, Integer ballY, Symbol poke_ball) -> void
end



