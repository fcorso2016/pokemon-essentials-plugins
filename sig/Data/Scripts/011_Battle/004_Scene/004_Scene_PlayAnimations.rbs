class Battle::Scene
  # ============================================================================
  # Animates the battle intro
  # ============================================================================
  def pbBattleIntroAnimation: () -> void

  # ============================================================================
  # Animates a party lineup appearing for the given side
  # ============================================================================
  def pbShowPartyLineup: (Integer | Battle::Battler side, ?bool fullAnim) -> void

  # ============================================================================
  # Animates an opposing trainer sliding in from off-screen. Will animate a
  # previous trainer that is already on-screen slide off first. Used at the end
  # of battle.
  # ============================================================================
  def pbShowOpponent: (Integer idxTrainer) -> void

  # ============================================================================
  # Animates a trainer's sprite and party lineup hiding (if they are visible).
  # Animates a PokÃ©mon being sent out into battle, then plays the shiny
  # animation for it if relevant.
  # sendOuts is an array; each element is itself an array: [idxBattler,pkmn]
  # ============================================================================
  def pbSendOutBattlers: (Array[[Integer, Pokemon]] sendOuts, ?bool startBattle) -> void

  # ============================================================================
  # Animates a PokÃ©mon being recalled into its PokÃ© Ball and its data box hiding
  # ============================================================================
  def pbRecall: (Integer idxBattler) -> void

  # ============================================================================
  # Ability splash bar animations
  # ============================================================================
  def pbShowAbilitySplash: (Battle::Battler battler) -> void

  def pbHideAbilitySplash: (Battle::Battler battler) -> void

  def pbReplaceAbilitySplash: (Battle::Battler battler) -> void

  # ============================================================================
  # HP change animations
  # ============================================================================
  # Shows a HP-changing common animation and animates a data box's HP bar.
  # Called by def pbReduceHP, def pbRecoverHP.
  def pbHPChanged: (Battle::Battler battler, Integer oldHP, ?bool showAnim) -> void

  def pbDamageAnimation: (Battle::Battler battler, ?Integer effectiveness) -> void

  # Animates battlers flashing and data boxes' HP bars because of damage taken
  # by an attack. targets is an array, which are all animated simultaneously.
  # Each element in targets is also an array: [battler, old HP, effectiveness]
  def pbHitAndHPLossAnimation: (Array[[Battle::Battler, Integer, Integer]] targets) -> void

  # ============================================================================
  # Animates a data box's Exp bar
  # ============================================================================
  def pbEXPBar: (Battle::Battler battler, Integer startExp, Integer endExp, Integer tempExp1, Integer tempExp2) -> void

  # ============================================================================
  # Shows stats windows upon a PokÃ©mon levelling up
  # ============================================================================
  def pbLevelUp: (Pokemon pkmn, Battle::Battler _battler, Integer oldTotalHP, Integer oldAttack, Integer oldDefense, Integer oldSpAtk, Integer oldSpDef, Integer oldSpeed) -> void

  # ============================================================================
  # Animates a PokÃ©mon fainting
  # ============================================================================
  def pbFaintBattler: (Battle::Battler battler) -> void

  # ============================================================================
  # Animates throwing a PokÃ© Ball at a PokÃ©mon in an attempt to catch it
  # ============================================================================
  def pbThrow: (Symbol ball, Integer shakes, bool critical, Battle::Battler targetBattler, ?bool showPlayer) -> void

  def pbThrowSuccess: () -> void

  def pbHideCaptureBall: (Integer idxBattler) -> void

  def pbThrowAndDeflect: (Symbol ball, Integer idxBattler) -> void

  # ============================================================================
  # Hides all battler shadows before yielding to a move animation, and then
  # restores the shadows afterwards
  # ============================================================================
  def pbSaveShadows: () { () -> void } -> void

  # ============================================================================
  # Loads a move/common animation
  # ============================================================================
  # Returns the animation ID to use for a given move/user. Returns nil if that
  # move has no animations defined for it.
  def pbFindMoveAnimDetails: ([Hash[Symbol, Integer], Hash[Symbol, Integer]] move2anim, Symbol moveID, Integer idxUser, ?Integer hitNum) -> [Integer, bool]?

  # Returns the animation ID to use for a given move. If the move has no
  # animations, tries to use a default move animation depending on the move's
  # type. If that default move animation doesn't exist, trues to use Tackle's
  # move animation. Returns nil if it can't find any of these animations to use.
  def pbFindMoveAnimation: (Symbol moveID, Integer idxUser, Integer hitNum) -> [Integer, bool]?

  # ============================================================================
  # Plays a move/common animation
  # ============================================================================
  # Plays a move animation.
  def pbAnimation: (Symbol moveID, Battle::Battler user, Battle::Battler | Array[Battle::Battler] targets, ?Integer hitNum) -> void

  # Plays a common animation.
  def pbCommonAnimation: (String animName, ?Battle::Battler? user, ?(Battle::Battler | Array[Battle::Battler])? target) -> void

  def pbAnimationCore: (PBAnimation animation, Battle::Battler user, Battle::Battler target, ?bool oppMove) -> void

  # Ball burst common animations should have a focus of "Target" and a priority
  # of "Front".
  def pbBallBurstCommonAnimation: (PictureEx _picture_ex, String anim_name, Battle::Battler battler, Integer target_x, Integer target_y) -> void
end


