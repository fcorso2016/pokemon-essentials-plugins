class Battle::Move
  # ============================================================================
  # Move's type calculation
  # ============================================================================
  def pbBaseType: (Battle::Battler user) -> Symbol

  def pbCalcType: (Battle::Battler user) -> Symbol

  # ============================================================================
  # Type effectiveness calculation
  # ============================================================================
  def pbCalcTypeModSingle: (Symbol moveType, Symbol defType, Battle::Battler user, Battle::Battler target) -> Math::double

  def pbCalcTypeMod: (Symbol moveType, Battle::Battler user, Battle::Battler target) -> Math::double

  # ============================================================================
  # Accuracy check
  # ============================================================================
  def pbBaseAccuracy: (Battle::Battler user, Battle::Battler target) -> Integer

  # Accuracy calculations for one-hit KO moves are handled elsewhere.
  def pbAccuracyCheck: (Battle::Battler user, Battle::Battler target) -> bool

  def pbCalcAccuracyModifiers: (Battle::Battler user, Battle::Battler target, Hash[Symbol, Math::double] modifiers) -> void

  # ============================================================================
  # Critical hit check
  # ============================================================================
  # Return values:
  #   -1: Never a critical hit.
  #    0: Calculate normally.
  #    1: Always a critical hit.
  def pbCritialOverride: (Battle::Battler user, Battle::Battler target) -> Integer

  # Returns whether the move will be a critical hit.
  def pbIsCritical?: (Battle::Battler user, Battle::Battler target) -> bool

  # ============================================================================
  # Damage calculation
  # ============================================================================
  def pbBaseDamage: (Integer baseDmg, Battle::Battler user, Battle::Battler target) -> Math::double

  def pbBaseDamageMultiplier: (Math::double damageMult, Battle::Battler user, Battle::Battler target) -> Math::double

  def pbModifyDamage: (Math::double damageMult, Battle::Battler user, Battle::Battler target) -> Math::double

  def pbGetAttackStats: (Battle::Battler user, Battle::Battler target) -> [Integer, Integer]

  def pbGetDefenseStats: (Battle::Battler user, Battle::Battler target) -> [Integer, Integer]

  def pbCalcDamage: (Battle::Battler user, Battle::Battler target, ?Integer numTargets) -> void

  def pbCalcDamageMultipliers: (Battle::Battler user, Battle::Battler target, Integer numTargets, Symbol `type`, Math::double baseDmg, Hash[Symbol, Math::double] multipliers) -> void

  # ============================================================================
  # Additional effect chance
  # ============================================================================
  def pbAdditionalEffectChance: (Battle::Battler user, Battle::Battler target, ?Integer effectChance) -> Integer

  # NOTE: Flinching caused by a move's effect is applied in that move's code,
  #       not here.
  def pbFlinchChance: (Battle::Battler user, Battle::Battler target) -> Integer
end



