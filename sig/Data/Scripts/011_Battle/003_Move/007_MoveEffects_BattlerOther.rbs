# ==============================================================================
# Puts the target to sleep.
# ==============================================================================
class Battle::Move::SleepTarget < Battle::Move
end

# ==============================================================================
# Puts the target to sleep. Fails if user is not Darkrai. (Dark Void (Gen 7+))
# ==============================================================================
class Battle::Move::SleepTargetIfUserDarkrai < Battle::Move::SleepTarget
end

# ==============================================================================
# Puts the target to sleep. Changes the user's form if the user is Meloetta.
# (Relic Song)
# ==============================================================================
class Battle::Move::SleepTargetChangeUserMeloettaForm < Battle::Move::SleepTarget
end

# ==============================================================================
# Makes the target drowsy; it falls asleep at the end of the next turn. (Yawn)
# ==============================================================================
class Battle::Move::SleepTargetNextTurn < Battle::Move
end

# ==============================================================================
# Poisons the target.
# ==============================================================================
class Battle::Move::PoisonTarget < Battle::Move
  @toxic: bool
end

# ==============================================================================
# Poisons the target and decreases its Speed by 1 stage. (Toxic Thread)
# ==============================================================================
class Battle::Move::PoisonTargetLowerTargetSpeed1 < Battle::Move
  attr_reader statDown: [Symbol, Integer]
end

# ==============================================================================
# Badly poisons the target. (Poison Fang, Toxic)
# ==============================================================================
class Battle::Move::BadPoisonTarget < Battle::Move::PoisonTarget
end

# ==============================================================================
# Paralyzes the target.
# ==============================================================================
class Battle::Move::ParalyzeTarget < Battle::Move
end

# ==============================================================================
# Paralyzes the target. Doesn't affect target if move's type has no effect on
# it. (Thunder Wave)
# ==============================================================================
class Battle::Move::ParalyzeTargetIfNotTypeImmune < Battle::Move::ParalyzeTarget
end

# ==============================================================================
# Paralyzes the target. Accuracy perfect in rain, 50% in sunshine. Hits some
# semi-invulnerable targets. (Thunder)
# ==============================================================================
class Battle::Move::ParalyzeTargetAlwaysHitsInRainHitsTargetInSky < Battle::Move::ParalyzeTarget
end

# ==============================================================================
# Paralyzes the target. May cause the target to flinch. (Thunder Fang)
# ==============================================================================
class Battle::Move::ParalyzeFlinchTarget < Battle::Move
end

# ==============================================================================
# Burns the target.
# ==============================================================================
class Battle::Move::BurnTarget < Battle::Move
end

# ==============================================================================
# Burns the target if any of its stats were increased this round.
# (Burning Jealousy)
# ==============================================================================
class Battle::Move::BurnTargetIfTargetStatsRaisedThisTurn < Battle::Move::BurnTarget
end

# ==============================================================================
# Burns the target. May cause the target to flinch. (Fire Fang)
# ==============================================================================
class Battle::Move::BurnFlinchTarget < Battle::Move
end

# ==============================================================================
# Freezes the target.
# ==============================================================================
class Battle::Move::FreezeTarget < Battle::Move
end

# ==============================================================================
# Freezes the target. Effectiveness against Water-type is 2x. (Freeze-Dry)
# ==============================================================================
class Battle::Move::FreezeTargetSuperEffectiveAgainstWater < Battle::Move::FreezeTarget
end

# ==============================================================================
# Freezes the target. Accuracy perfect in hail. (Blizzard)
# ==============================================================================
class Battle::Move::FreezeTargetAlwaysHitsInHail < Battle::Move::FreezeTarget
end

# ==============================================================================
# Freezes the target. May cause the target to flinch. (Ice Fang)
# ==============================================================================
class Battle::Move::FreezeFlinchTarget < Battle::Move
end

# ==============================================================================
# Burns, freezes or paralyzes the target. (Tri Attack)
# ==============================================================================
class Battle::Move::ParalyzeBurnOrFreezeTarget < Battle::Move
end

# ==============================================================================
# User passes its status problem to the target. (Psycho Shift)
# ==============================================================================
class Battle::Move::GiveUserStatusToTarget < Battle::Move
end

# ==============================================================================
# Cures user of burn, poison and paralysis. (Refresh)
# ==============================================================================
class Battle::Move::CureUserBurnPoisonParalysis < Battle::Move
end

# ==============================================================================
# Cures all party PokÃƒÂ©mon of permanent status problems. (Aromatherapy, Heal Bell)
# ==============================================================================
# NOTE: In Gen 5, this move should have a target of UserSide, while in Gen 6+ it
#       should have a target of UserAndAllies. This is because, in Gen 5, this
#       move shouldn't call def pbSuccessCheckAgainstTarget for each PokÃƒÂ©mon
#       currently in battle that will be affected by this move (i.e. allies
#       aren't protected by their substitute/ability/etc., but they are in Gen
#       6+). We achieve this by not targeting any battlers in Gen 5, since
#       pbSuccessCheckAgainstTarget is only called for targeted battlers.
class Battle::Move::CureUserPartyStatus < Battle::Move
  def pbAromatherapyHeal: (Pokemon pkmn, ?Battle::Battler? battler) -> void
end

# ==============================================================================
# Cures the target's burn. (Sparkling Aria)
# ==============================================================================
class Battle::Move::CureTargetBurn < Battle::Move
end

# ==============================================================================
# Safeguards the user's side from being inflicted with status problems.
# (Safeguard)
# ==============================================================================
class Battle::Move::StartUserSideImmunityToInflictedStatus < Battle::Move
end

# ==============================================================================
# Causes the target to flinch.
# ==============================================================================
class Battle::Move::FlinchTarget < Battle::Move
end

# ==============================================================================
# Causes the target to flinch. Fails if the user is not asleep. (Snore)
# ==============================================================================
class Battle::Move::FlinchTargetFailsIfUserNotAsleep < Battle::Move::FlinchTarget
end

# ==============================================================================
# Causes the target to flinch. Fails if this isn't the user's first turn.
# (Fake Out)
# ==============================================================================
class Battle::Move::FlinchTargetFailsIfNotUserFirstTurn < Battle::Move::FlinchTarget
end

# ==============================================================================
# Power is doubled if the target is using Bounce, Fly or Sky Drop. Hits some
# semi-invulnerable targets. May make the target flinch. (Twister)
# ==============================================================================
class Battle::Move::FlinchTargetDoublePowerIfTargetInSky < Battle::Move::FlinchTarget
end

# ==============================================================================
# Confuses the target.
# ==============================================================================
class Battle::Move::ConfuseTarget < Battle::Move
end

# ==============================================================================
# Confuses the target. Accuracy perfect in rain, 50% in sunshine. Hits some
# semi-invulnerable targets. (Hurricane)
# ==============================================================================
class Battle::Move::ConfuseTargetAlwaysHitsInRainHitsTargetInSky < Battle::Move::ConfuseTarget
end

# ==============================================================================
# Attracts the target. (Attract)
# ==============================================================================
class Battle::Move::AttractTarget < Battle::Move
end

# ==============================================================================
# Changes user's type depending on the environment. (Camouflage)
# ==============================================================================
class Battle::Move::SetUserTypesBasedOnEnvironment < Battle::Move
  TERRAIN_TYPES: Hash[Symbol, Symbol]

  ENVIRONMENT_TYPES: Hash[Symbol, Symbol]

  @newType: Symbol
end

# ==============================================================================
# Changes user's type to a random one that resists/is immune to the last move
# used by the target. (Conversion 2)
# ==============================================================================
class Battle::Move::SetUserTypesToResistLastAttack < Battle::Move
  @newTypes: Array[Symbol]
end

# ==============================================================================
# User copies target's types. (Reflect Type)
# ==============================================================================
class Battle::Move::SetUserTypesToTargetTypes < Battle::Move
end

# ==============================================================================
# Changes user's type to that of a random user's move, except a type the user
# already has (even partially), OR changes to the user's first move's type.
# (Conversion)
# ==============================================================================
class Battle::Move::SetUserTypesToUserMoveType < Battle::Move
  @newTypes: Array[Symbol]
end

# ==============================================================================
# The target's types become Psychic. (Magic Powder)
# ==============================================================================
class Battle::Move::SetTargetTypesToPsychic < Battle::Move
end

# ==============================================================================
# Target becomes Water type. (Soak)
# ==============================================================================
class Battle::Move::SetTargetTypesToWater < Battle::Move
end

# ==============================================================================
# Gives target the Ghost type. (Trick-or-Treat)
# ==============================================================================
class Battle::Move::AddGhostTypeToTarget < Battle::Move
end

# ==============================================================================
# Gives target the Grass type. (Forest's Curse)
# ==============================================================================
class Battle::Move::AddGrassTypeToTarget < Battle::Move
end

# ==============================================================================
# User loses their Fire type. Fails if user is not Fire-type. (Burn Up)
# ==============================================================================
class Battle::Move::UserLosesFireType < Battle::Move
end

# ==============================================================================
# Target's ability becomes Simple. (Simple Beam)
# ==============================================================================
class Battle::Move::SetTargetAbilityToSimple < Battle::Move
end

# ==============================================================================
# Target's ability becomes Insomnia. (Worry Seed)
# ==============================================================================
class Battle::Move::SetTargetAbilityToInsomnia < Battle::Move
end

# ==============================================================================
# User copies target's ability. (Role Play)
# ==============================================================================
class Battle::Move::SetUserAbilityToTargetAbility < Battle::Move
end

# ==============================================================================
# Target copies user's ability. (Entrainment)
# ==============================================================================
class Battle::Move::SetTargetAbilityToUserAbility < Battle::Move
end

# ==============================================================================
# User and target swap abilities. (Skill Swap)
# ==============================================================================
class Battle::Move::UserTargetSwapAbilities < Battle::Move
end

# ==============================================================================
# Target's ability is negated. (Gastro Acid)
# ==============================================================================
class Battle::Move::NegateTargetAbility < Battle::Move
end

# ==============================================================================
# Negates the target's ability while it remains on the field, if it has already
# performed its action this round. (Core Enforcer)
# ==============================================================================
class Battle::Move::NegateTargetAbilityIfTargetActed < Battle::Move
end

# ==============================================================================
# Ignores all abilities that alter this move's success or damage.
# (Moongeist Beam, Sunsteel Strike)
# ==============================================================================
class Battle::Move::IgnoreTargetAbility < Battle::Move
end

# ==============================================================================
# For 5 rounds, user becomes airborne. (Magnet Rise)
# ==============================================================================
class Battle::Move::StartUserAirborne < Battle::Move
end

# ==============================================================================
# For 3 rounds, target becomes airborne and can always be hit. (Telekinesis)
# ==============================================================================
class Battle::Move::StartTargetAirborneAndAlwaysHitByMoves < Battle::Move
end

# ==============================================================================
# Hits airborne semi-invulnerable targets. (Sky Uppercut)
# ==============================================================================
class Battle::Move::HitsTargetInSky < Battle::Move
end

# ==============================================================================
# Grounds the target while it remains active. Hits some semi-invulnerable
# targets. (Smack Down, Thousand Arrows)
# ==============================================================================
class Battle::Move::HitsTargetInSkyGroundsTarget < Battle::Move
end

# ==============================================================================
# For 5 rounds, increases gravity on the field. PokÃƒÂ©mon cannot become airborne.
# (Gravity)
# ==============================================================================
class Battle::Move::StartGravity < Battle::Move
end

# ==============================================================================
# User transforms into the target. (Transform)
# ==============================================================================
class Battle::Move::TransformUserIntoTarget < Battle::Move
end



