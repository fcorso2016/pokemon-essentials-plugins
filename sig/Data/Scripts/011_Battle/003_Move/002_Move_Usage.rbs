class Battle::Move
  # ============================================================================
  # Effect methods per move usage
  # ============================================================================
  def pbCanChooseMove?: (Battle::Battler user, bool commandPhase, bool showMessages) -> bool

  def pbDisplayChargeMessage: (Battle::Battler user) -> void

  def pbOnStartUse: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  def pbAddTarget: (Array[Battle::Battler] targets, Battle::Battler user) -> void

  def pbModifyTargets: (Array[Battle::Battler] targets, Battle::Battler user) -> void

  # Reset move usage counters (child classes can increment them).
  def pbChangeUsageCounters: (Battle::Battler user, bool specialUsage) -> void

  def pbDisplayUseMessage: (Battle::Battler user) -> void

  def pbShowFailMessages?: (Array[Battle::Battler] targets) -> bool

  def pbMissMessage: (Battle::Battler user, Battle::Battler target) -> bool

  # ============================================================================
  #
  # ============================================================================
  # Whether the move is currently in the "charging" turn of a two-turn move.
  # Is bool if Power Herb or another effect lets a two-turn move charge and
  # attack in the same turn.
  # user.effects[PBEffects::TwoTurnAttack] is set to the move's ID during the
  # charging turn, and is nil during the attack turn.
  def pbIsChargingTurn?: (Battle::Battler user) -> bool

  def pbDamagingMove?: () -> boolish

  def pbContactMove?: (Battle::Battler user) -> bool

  # The maximum number of hits in a round this move will actually perform. This
  # can be 1 for Beat Up, and can be 2 for any moves affected by Parental Bond.
  def pbNumHits: (Battle::Battler user, Array[Battle::Battler] targets) -> Integer

  # For two-turn moves when they charge and attack in the same turn.
  def pbQuickChargingMove: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  # ============================================================================
  # Effect methods per hit
  # ============================================================================
  def pbOverrideSuccessCheckPerHit: (Battle::Battler user, Battle::Battler target) -> bool

  def pbCrashDamage: (Battle::Battler user) -> void

  def pbInitialEffect: (Battle::Battler user, Array[Battle::Battler] targets, Integer hitNum) -> void

  def pbDesignateTargetsForHit: (Array[Battle::Battler] targets, Integer hitNum) -> Array[Integer]

  def pbRepeatHit?: () -> bool

  def pbShowAnimation: (Symbol id, Battle::Battler user, Array[Battle::Battler] targets, ?::Integer hitNum, ?bool showAnimation) -> void

  def pbSelfKO: (Battle::Battler user) -> void

  def pbEffectWhenDealingDamage: (Battle::Battler user, Battle::Battler target) -> void

  def pbEffectAgainstTarget: (Battle::Battler user, Battle::Battler target) -> void

  def pbEffectGeneral: (Battle::Battler user) -> void

  def pbAdditionalEffect: (Battle::Battler user, Battle::Battler target) -> void

  def pbEffectAfterAllHits: (Battle::Battler user, Battle::Battler target) -> void

  def pbSwitchOutTargetEffect: (Battle::Battler user, Array[Battle::Battler] targets, Integer numHits, Array[Integer] switched_battlers) -> void

  def pbEndOfMoveUsageEffect: (Battle::Battler user, Array[Battle::Battler] targets, Integer numHits, Array[Integer] switchedBattlers) -> void

  # ============================================================================
  # Check if target is immune to the move because of its ability
  # ============================================================================
  def pbImmunityByAbility: (Battle::Battler user, Battle::Battler target, bool show_message) -> bool

  # ============================================================================
  # Move failure checks
  # ============================================================================
  # Check whether the move fails completely due to move-specific requirements.
  def pbMoveFailed?: (Battle::Battler user, Array[Battle::Battler] targets) -> bool

  # Checks whether the move will be ineffective against the target.
  def pbFailsAgainstTarget?: (Battle::Battler user, Battle::Battler target, untyped show_message) -> bool

  def pbMoveFailedLastInRound?: (Battle::Battler user, ?bool showMessage) -> bool

  def pbMoveFailedTargetAlreadyMoved?: (Battle::Battler target, ?bool showMessage) -> bool

  def pbMoveFailedAromaVeil?: (Battle::Battler user, Battle::Battler target, ?bool showMessage) -> bool

  # ============================================================================
  # Weaken the damage dealt (doesn't actually change a battler's HP)
  # ============================================================================
  def pbCheckDamageAbsorption: (Battle::Battler user, Battle::Battler target) -> void

  def pbReduceDamage: (Battle::Battler user, Battle::Battler target) -> void

  # ============================================================================
  # Change the target's HP by the amount calculated above
  # ============================================================================
  def pbInflictHPDamage: (Battle::Battler target) -> void

  # ============================================================================
  # Animate the damage dealt, including lowering the HP
  # ============================================================================
  # Animate being damaged and losing HP (by a move)
  def pbAnimateHitAndHPLost: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  # ============================================================================
  # Messages upon being hit
  # ============================================================================
  def pbEffectivenessMessage: (Battle::Battler user, Battle::Battler target, ?Integer numTargets) -> void

  def pbHitEffectivenessMessages: (Battle::Battler user, Battle::Battler target, ?Integer numTargets) -> void

  def pbEndureKOMessage: (Battle::Battler target) -> void

  # Used by Counter/Mirror Coat/Metal Burst/Revenge/Focus Punch/Bide/Assurance.
  def pbRecordDamageLost: (Battle::Battler user, Battle::Battler target) -> void
end



