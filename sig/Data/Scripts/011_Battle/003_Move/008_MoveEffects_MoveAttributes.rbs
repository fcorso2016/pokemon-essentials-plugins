# ==============================================================================
# Inflicts a fixed 20HP damage. (Sonic Boom)
# ==============================================================================
class Battle::Move::FixedDamage20 < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Inflicts a fixed 40HP damage. (Dragon Rage)
# ==============================================================================
class Battle::Move::FixedDamage40 < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Halves the target's current HP. (Nature's Madness, Super Fang)
# ==============================================================================
class Battle::Move::FixedDamageHalfTargetHP < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Inflicts damage equal to the user's level. (Night Shade, Seismic Toss)
# ==============================================================================
class Battle::Move::FixedDamageUserLevel < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Inflicts damage between 0.5 and 1.5 times the user's level. (Psywave)
# ==============================================================================
class Battle::Move::FixedDamageUserLevelRandom < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Inflicts damage to bring the target's HP down to equal the user's HP. (Endeavor)
# ==============================================================================
class Battle::Move::LowerTargetHPToUserHP < Battle::Move::FixedDamageMove
end

# ==============================================================================
# OHKO. Accuracy increases by difference between levels of user and target.
# ==============================================================================
class Battle::Move::OHKO < Battle::Move::FixedDamageMove
end

# ==============================================================================
# OHKO. Accuracy increases by difference between levels of user and target.
# Lower accuracy when used by a non-Ice-type PokÃƒÂ©mon. Doesn't affect Ice-type
# PokÃƒÂ©mon. (Sheer Cold (Gen 7+))
# ==============================================================================
class Battle::Move::OHKOIce < Battle::Move::OHKO
end

# ==============================================================================
# OHKO. Accuracy increases by difference between levels of user and target. Hits
# targets that are semi-invulnerable underground. (Fissure)
# ==============================================================================
class Battle::Move::OHKOHitsUndergroundTarget < Battle::Move::OHKO
end

# ==============================================================================
# The target's ally loses 1/16 of its max HP. (Flame Burst)
# ==============================================================================
class Battle::Move::DamageTargetAlly < Battle::Move
end

# ==============================================================================
# Power increases with the user's HP. (Eruption, Water Spout)
# ==============================================================================
class Battle::Move::PowerHigherWithUserHP < Battle::Move
end

# ==============================================================================
# Power increases the less HP the user has. (Flail, Reversal)
# ==============================================================================
class Battle::Move::PowerLowerWithUserHP < Battle::Move
end

# ==============================================================================
# Power increases with the target's HP. (Crush Grip, Wring Out)
# ==============================================================================
class Battle::Move::PowerHigherWithTargetHP < Battle::Move
end

# ==============================================================================
# Power increases with the user's happiness. (Return)
# ==============================================================================
class Battle::Move::PowerHigherWithUserHappiness < Battle::Move
end

# ==============================================================================
# Power decreases with the user's happiness. (Frustration)
# ==============================================================================
class Battle::Move::PowerLowerWithUserHappiness < Battle::Move
end

# ==============================================================================
# Power increases with the user's positive stat changes (ignores negative ones).
# (Power Trip, Stored Power)
# ==============================================================================
class Battle::Move::PowerHigherWithUserPositiveStatStages < Battle::Move
end

# ==============================================================================
# Power increases with the target's positive stat changes (ignores negative ones).
# (Punishment)
# ==============================================================================
class Battle::Move::PowerHigherWithTargetPositiveStatStages < Battle::Move
end

# ==============================================================================
# Power increases the quicker the user is than the target. (Electro Ball)
# ==============================================================================
class Battle::Move::PowerHigherWithUserFasterThanTarget < Battle::Move
end

# ==============================================================================
# Power increases the quicker the target is than the user. (Gyro Ball)
# ==============================================================================
class Battle::Move::PowerHigherWithTargetFasterThanUser < Battle::Move
end

# ==============================================================================
# Power increases the less PP this move has. (Trump Card)
# ==============================================================================
class Battle::Move::PowerHigherWithLessPP < Battle::Move
end

# ==============================================================================
# Power increases the heavier the target is. (Grass Knot, Low Kick)
# ==============================================================================
class Battle::Move::PowerHigherWithTargetWeight < Battle::Move
end

# ==============================================================================
# Power increases the heavier the user is than the target. (Heat Crash, Heavy Slam)
# ==============================================================================
class Battle::Move::PowerHigherWithUserHeavierThanTarget < Battle::Move
end

# ==============================================================================
# Power doubles for each consecutive use. (Fury Cutter)
# ==============================================================================
class Battle::Move::PowerHigherWithConsecutiveUse < Battle::Move
end

# ==============================================================================
# Power is multiplied by the number of consecutive rounds in which this move was
# used by any PokÃƒÂ©mon on the user's side. (Echoed Voice)
# ==============================================================================
class Battle::Move::PowerHigherWithConsecutiveUseOnUserSide < Battle::Move
end

# ==============================================================================
# Power is chosen at random. Power is doubled if the target is using Dig. Hits
# some semi-invulnerable targets. (Magnitude)
# ==============================================================================
class Battle::Move::RandomPowerDoublePowerIfTargetUnderground < Battle::Move
  @magnitudeDmg: Integer
end

# ==============================================================================
# Power is doubled if the target's HP is down to 1/2 or less. (Brine)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetHPLessThanHalf < Battle::Move
end

# ==============================================================================
# Power is doubled if the user is burned, poisoned or paralyzed. (Facade)
# Burn's halving of Attack is negated (new mechanics).
# ==============================================================================
class Battle::Move::DoublePowerIfUserPoisonedBurnedParalyzed < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is asleep. Wakes the target up. (Wake-Up Slap)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetAsleepCureTarget < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is poisoned. (Venoshock)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetPoisoned < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is paralyzed. Cures the target of paralysis.
# (Smelling Salts)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetParalyzedCureTarget < Battle::Move
end

# ==============================================================================
# Power is doubled if the target has a status problem. (Hex)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetStatusProblem < Battle::Move
end

# ==============================================================================
# Power is doubled if the user has no held item. (Acrobatics)
# ==============================================================================
class Battle::Move::DoublePowerIfUserHasNoItem < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is using Dive. Hits some semi-invulnerable
# targets. (Surf)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetUnderwater < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is using Dig. Power is halved if Grassy Terrain
# is in effect. Hits some semi-invulnerable targets. (Earthquake)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetUnderground < Battle::Move
end

# ==============================================================================
# Power is doubled if the target is using Bounce, Fly or Sky Drop. Hits some
# semi-invulnerable targets. (Gust)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetInSky < Battle::Move
end

# ==============================================================================
# Power is doubled if Electric Terrain applies. (Rising Voltage)
# ==============================================================================
class Battle::Move::DoublePowerInElectricTerrain < Battle::Move
end

# ==============================================================================
# Power is doubled if the user's last move failed. (Stomping Tantrum)
# ==============================================================================
class Battle::Move::DoublePowerIfUserLastMoveFailed < Battle::Move
end

# ==============================================================================
# Power is doubled if a user's teammate fainted last round. (Retaliate)
# ==============================================================================
class Battle::Move::DoublePowerIfAllyFaintedLastTurn < Battle::Move
end

# ==============================================================================
# Power is doubled if the user has lost HP due to the target's move this round.
# (Avalanche, Revenge)
# ==============================================================================
class Battle::Move::DoublePowerIfUserLostHPThisTurn < Battle::Move
end

# ==============================================================================
# Power is doubled if the target has already lost HP this round. (Assurance)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetLostHPThisTurn < Battle::Move
end

# ==============================================================================
# Power is doubled if any of the user's stats were lowered this round. (Lash Out)
# ==============================================================================
class Battle::Move::DoublePowerIfUserStatsLoweredThisTurn < Battle::Move
end

# ==============================================================================
# Power is doubled if the target has already moved this round. (Payback)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetActed < Battle::Move
end

# ==============================================================================
# Power is doubled if the user moves before the target, or if the target
# switched in this round. (Bolt Beak, Fishious Rend)
# ==============================================================================
class Battle::Move::DoublePowerIfTargetNotActed < Battle::Move
end

# ==============================================================================
# This attack is always a critical hit. (Frost Breath, Storm Throw)
# ==============================================================================
class Battle::Move::AlwaysCriticalHit < Battle::Move
  def pbCritialOverride: (untyped user, untyped target) -> 1
end

# ==============================================================================
# Until the end of the next round, the user's moves will always be critical hits.
# (Laser Focus)
# ==============================================================================
class Battle::Move::EnsureNextCriticalHit < Battle::Move
end

# ==============================================================================
# For 5 rounds, foes' attacks cannot become critical hits. (Lucky Chant)
# ==============================================================================
class Battle::Move::StartPreventCriticalHitsAgainstUserSide < Battle::Move
end

# ==============================================================================
# If target would be KO'd by this attack, it survives with 1HP instead.
# (False Swipe, Hold Back)
# ==============================================================================
class Battle::Move::CannotMakeTargetFaint < Battle::Move
end

# ==============================================================================
# If user would be KO'd this round, it survives with 1HP instead. (Endure)
# ==============================================================================
class Battle::Move::UserEnduresFaintingThisTurn < Battle::Move::ProtectMove
end

# ==============================================================================
# Weakens Electric attacks. (Mud Sport)
# ==============================================================================
class Battle::Move::StartWeakenElectricMoves < Battle::Move
end

# ==============================================================================
# Weakens Fire attacks. (Water Sport)
# ==============================================================================
class Battle::Move::StartWeakenFireMoves < Battle::Move
end

# ==============================================================================
# For 5 rounds, lowers power of physical attacks against the user's side.
# (Reflect)
# ==============================================================================
class Battle::Move::StartWeakenPhysicalDamageAgainstUserSide < Battle::Move
end

# ==============================================================================
# For 5 rounds, lowers power of special attacks against the user's side. (Light Screen)
# ==============================================================================
class Battle::Move::StartWeakenSpecialDamageAgainstUserSide < Battle::Move
end

# ==============================================================================
# For 5 rounds, lowers power of attacks against the user's side. Fails if
# weather is not hail. (Aurora Veil)
# ==============================================================================
class Battle::Move::StartWeakenDamageAgainstUserSideIfHail < Battle::Move
end

# ==============================================================================
# Ends the opposing side's Light Screen, Reflect and Aurora Break. (Brick Break,
# Psychic Fangs)
# ==============================================================================
class Battle::Move::RemoveScreens < Battle::Move
end

# ==============================================================================
# User is protected against moves with the "B" flag this round. (Detect, Protect)
# ==============================================================================
class Battle::Move::ProtectUser < Battle::Move::ProtectMove
end

# ==============================================================================
# User is protected against moves with the "B" flag this round. If a PokÃƒÂ©mon
# makes contact with the user while this effect applies, that PokÃƒÂ©mon is
# poisoned. (Baneful Bunker)
# ==============================================================================
class Battle::Move::ProtectUserBanefulBunker < Battle::Move::ProtectMove
end

# ==============================================================================
# User is protected against damaging moves this round. Decreases the Attack of
# the user of a stopped contact move by 2 stages. (King's Shield)
# ==============================================================================
class Battle::Move::ProtectUserFromDamagingMovesKingsShield < Battle::Move::ProtectMove
end

# ==============================================================================
# For the rest of this round, the user avoids all damaging moves that would hit
# it. If a move that makes contact is stopped by this effect, decreases the
# Defense of the PokÃƒÂ©mon using that move by 2 stages. Contributes to Protect's
# counter. (Obstruct)
# ==============================================================================
class Battle::Move::ProtectUserFromDamagingMovesObstruct < Battle::Move::ProtectMove
end

# ==============================================================================
# User is protected against moves that target it this round. Damages the user of
# a stopped contact move by 1/8 of its max HP. (Spiky Shield)
# ==============================================================================
class Battle::Move::ProtectUserFromTargetingMovesSpikyShield < Battle::Move::ProtectMove
end

# ==============================================================================
# This round, the user's side is unaffected by damaging moves. (Mat Block)
# ==============================================================================
class Battle::Move::ProtectUserSideFromDamagingMovesIfUserFirstTurn < Battle::Move
end

# ==============================================================================
# User's side is protected against status moves this round. (Crafty Shield)
# ==============================================================================
class Battle::Move::ProtectUserSideFromStatusMoves < Battle::Move
end

# ==============================================================================
# User's side is protected against moves with priority greater than 0 this round.
# (Quick Guard)
# ==============================================================================
class Battle::Move::ProtectUserSideFromPriorityMoves < Battle::Move::ProtectMove
end

# ==============================================================================
# User's side is protected against moves that target multiple battlers this round.
# (Wide Guard)
# ==============================================================================
class Battle::Move::ProtectUserSideFromMultiTargetDamagingMoves < Battle::Move::ProtectMove
end

# ==============================================================================
# Ends target's protections immediately. (Feint)
# ==============================================================================
class Battle::Move::RemoveProtections < Battle::Move
end

# ==============================================================================
# Ends target's protections immediately. (Hyperspace Hole)
# ==============================================================================
class Battle::Move::RemoveProtectionsBypassSubstitute < Battle::Move::RemoveProtections
end

# ==============================================================================
# Decreases the user's Defense by 1 stage. Ends target's protections
# immediately. (Hyperspace Fury)
# ==============================================================================
class Battle::Move::HoopaRemoveProtectionsBypassSubstituteLowerUserDef1 < Battle::Move::StatDownMove
end

# ==============================================================================
# User takes recoil damage equal to 1/4 of the damage this move dealt.
# ==============================================================================
class Battle::Move::RecoilQuarterOfDamageDealt < Battle::Move::RecoilMove
end

# ==============================================================================
# User takes recoil damage equal to 1/3 of the damage this move dealt.
# ==============================================================================
class Battle::Move::RecoilThirdOfDamageDealt < Battle::Move::RecoilMove
end

# ==============================================================================
# User takes recoil damage equal to 1/3 of the damage this move dealt.
# May paralyze the target. (Volt Tackle)
# ==============================================================================
class Battle::Move::RecoilThirdOfDamageDealtParalyzeTarget < Battle::Move::RecoilMove
end

# ==============================================================================
# User takes recoil damage equal to 1/3 of the damage this move dealt.
# May burn the target. (Flare Blitz)
# ==============================================================================
class Battle::Move::RecoilThirdOfDamageDealtBurnTarget < Battle::Move::RecoilMove
end

# ==============================================================================
# User takes recoil damage equal to 1/2 of the damage this move dealt.
# (Head Smash, Light of Ruin)
# ==============================================================================
class Battle::Move::RecoilHalfOfDamageDealt < Battle::Move::RecoilMove
end

# ==============================================================================
# Type effectiveness is multiplied by the Flying-type's effectiveness against
# the target. (Flying Press)
# ==============================================================================
class Battle::Move::EffectivenessIncludesFlyingType < Battle::Move
end

# ==============================================================================
# Poisons the target. This move becomes physical or special, whichever will deal
# more damage (only considers stats, stat stages and Wonder Room). Makes contact
# if it is a physical move. Has a different animation depending on the move's
# category. (Shell Side Arm)
# ==============================================================================
class Battle::Move::CategoryDependsOnHigherDamagePoisonTarget < Battle::Move::PoisonTarget
  @calcCategory: Integer
end

# ==============================================================================
# Ignores all abilities that alter this move's success or damage. This move is
# physical if user's Attack is higher than its Special Attack (after applying
# stat stages), and special otherwise. (Photon Geyser)
# ==============================================================================
class Battle::Move::CategoryDependsOnHigherDamageIgnoreTargetAbility < Battle::Move::IgnoreTargetAbility
  @calcCategory: Integer
end

# ==============================================================================
# The user's Defense (and its Defense stat stages) are used instead of the
# user's Attack (and Attack stat stages) to calculate damage. All other effects
# are applied normally, applying the user's Attack modifiers and not the user's
# Defence modifiers. (Body Press)
# ==============================================================================
class Battle::Move::UseUserDefenseInsteadOfUserAttack < Battle::Move
end

# ==============================================================================
# Target's Attack is used instead of user's Attack for this move's calculations.
# (Foul Play)
# ==============================================================================
class Battle::Move::UseTargetAttackInsteadOfUserAttack < Battle::Move
end

# ==============================================================================
# Target's Defense is used instead of its Special Defense for this move's
# calculations. (Psyshock, Psystrike, Secret Sword)
# ==============================================================================
class Battle::Move::UseTargetDefenseInsteadOfTargetSpDef < Battle::Move
end

# ==============================================================================
# User's attack next round against the target will definitely hit.
# (Lock-On, Mind Reader)
# ==============================================================================
class Battle::Move::EnsureNextMoveAlwaysHits < Battle::Move
end

# ==============================================================================
# Target's evasion stat changes are ignored from now on. (Foresight, Odor Sleuth)
# Normal and Fighting moves have normal effectiveness against the Ghost-type target.
# ==============================================================================
class Battle::Move::StartNegateTargetEvasionStatStageAndGhostImmunity < Battle::Move
end

# ==============================================================================
# Target's evasion stat changes are ignored from now on. (Miracle Eye)
# Psychic moves have normal effectiveness against the Dark-type target.
# ==============================================================================
class Battle::Move::StartNegateTargetEvasionStatStageAndDarkImmunity < Battle::Move
end

# ==============================================================================
# This move ignores target's Defense, Special Defense and evasion stat changes.
# (Chip Away, Darkest Lariat, Sacred Sword)
# ==============================================================================
class Battle::Move::IgnoreTargetDefSpDefEvaStatStages < Battle::Move
end

# ==============================================================================
# This move's type is the same as the user's first type. (Revelation Dance)
# ==============================================================================
class Battle::Move::TypeIsUserFirstType < Battle::Move
end

# ==============================================================================
# Power and type depends on the user's IVs. (Hidden Power)
# ==============================================================================
class Battle::Move::TypeDependsOnUserIVs < Battle::Move
end

# ==============================================================================
# Power and type depend on the user's held berry. Destroys the berry.
# (Natural Gift)
# ==============================================================================
class Battle::Move::TypeAndPowerDependOnUserBerry < Battle::Move
end

# ==============================================================================
# Type depends on the user's held Plate. (Judgment)
# ==============================================================================
class Battle::Move::TypeDependsOnUserPlate < Battle::Move
  @itemTypes: Hash[Symbol, Symbol]
end

# ==============================================================================
# Type depends on the user's held Memory. (Multi-Attack)
# ==============================================================================
class Battle::Move::TypeDependsOnUserMemory < Battle::Move
  @itemTypes: Hash[Symbol, Symbol]
end

# ==============================================================================
# Type depends on the user's held Drive. (Techno Blast)
# ==============================================================================
class Battle::Move::TypeDependsOnUserDrive < Battle::Move
  @itemTypes: Hash[Symbol, Symbol]
end

# ==============================================================================
# Increases the user's Speed by 1 stage. This move's type depends on the user's
# form (Electric if Full Belly, Dark if Hangry). Fails if the user is not
# Morpeko (works if transformed into Morpeko). (Aura Wheel)
# ==============================================================================
class Battle::Move::TypeDependsOnUserMorpekoFormRaiseUserSpeed1 < Battle::Move::RaiseUserSpeed1
end

# ==============================================================================
# Power is doubled in weather. Type changes depending on the weather. (Weather Ball)
# ==============================================================================
class Battle::Move::TypeAndPowerDependOnWeather < Battle::Move
end

# ==============================================================================
# Power is doubled if a terrain applies and user is grounded; also, this move's
# type and animation depends on the terrain. (Terrain Pulse)
# ==============================================================================
class Battle::Move::TypeAndPowerDependOnTerrain < Battle::Move
end

# ==============================================================================
# Target's moves become Electric-type for the rest of the round. (Electrify)
# ==============================================================================
class Battle::Move::TargetMovesBecomeElectric < Battle::Move
end

# ==============================================================================
# All Normal-type moves become Electric-type for the rest of the round.
# (Ion Deluge, Plasma Fists)
# ==============================================================================
class Battle::Move::NormalMovesBecomeElectric < Battle::Move
end

class Object
  # NOTE: This allows Hidden Power to be Fairy-type (if you have that type in your
  #       game). I don't care that the official games don't work like that.
  def pbHiddenPower: (untyped pkmn) -> ::Array[untyped]
end



