# ==============================================================================
# Superclass that handles moves using a non-existent function code.
# Damaging moves just do damage with no additional effect.
# Status moves always fail.
# ==============================================================================
class Battle::Move::Unimplemented < Battle::Move
end

# ==============================================================================
# Pseudomove for confusion damage.
# ==============================================================================
class Battle::Move::Confusion < Battle::Move
end

# ==============================================================================
# Struggle.
# ==============================================================================
class Battle::Move::Struggle < Battle::Move
end

# ==============================================================================
# Raise one of user's stats.
# ==============================================================================
class Battle::Move::StatUpMove < Battle::Move
  attr_reader statUp: [Symbol, Integer]
end

# ==============================================================================
# Raise multiple of user's stats.
# ==============================================================================
class Battle::Move::MultiStatUpMove < Battle::Move
  attr_reader statUp: Array[Symbol | Integer]
end

# ==============================================================================
# Lower multiple of user's stats.
# ==============================================================================
class Battle::Move::StatDownMove < Battle::Move
  attr_reader statDown: [Symbol, Integer]
end

# ==============================================================================
# Lower one of target's stats.
# ==============================================================================
class Battle::Move::TargetStatDownMove < Battle::Move
  attr_reader statDown: Array[Symbol | Integer]
end

# ==============================================================================
# Lower multiple of target's stats.
# ==============================================================================
class Battle::Move::TargetMultiStatDownMove < Battle::Move
  attr_reader statDown: Array[Symbol | Integer]

  def pbCheckForMirrorArmor: (Battle::Battler user, Battle::Battler target) -> bool

  def pbLowerTargetMultipleStats: (Battle::Battler user, Battle::Battler target) -> void
end

# ==============================================================================
# Fixed damage-inflicting move.
# ==============================================================================
class Battle::Move::FixedDamageMove < Battle::Move
  def pbFixedDamage: (Battle::Battler user, Battle::Battler target) -> Integer
end

# ==============================================================================
# Two turn move.
# ==============================================================================
class Battle::Move::TwoTurnMove < Battle::Move
  @damagingTurn: bool
  @powerHerb: bool

  attr_reader chargingTurn: bool

  # user.effects[PBEffects::TwoTurnAttack] is set to the move's ID if this
  # method returns true, or nil if false.
  # Non-nil means the charging turn. nil means the attacking turn.
  def pbIsChargingTurn?: (Battle::Battler user) -> bool

  def pbChargingTurnMessage: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  def pbAttackingTurnMessage: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  def pbEffectAgainstTarget: (Battle::Battler user, Battle::Battler target) -> void

  def pbChargingTurnEffect: (Battle::Battler user, Battle::Battler target) -> void

  def pbAttackingTurnEffect: (Battle::Battler user, Battle::Battler target) -> void

end

# ==============================================================================
# Healing move.
# ==============================================================================
class Battle::Move::HealingMove < Battle::Move
  def pbHealAmount: (Battle::Battler user) -> Integer
end

# ==============================================================================
# Recoil move.
# ==============================================================================
class Battle::Move::RecoilMove < Battle::Move
  def pbRecoilDamage: (Battle::Battler user, Battle::Battler target) -> Integer

  def pbEffectAfterAllHits: (Battle::Battler user, Battle::Battler target) -> void
end

# ==============================================================================
# Protect move.
# ==============================================================================
class Battle::Move::ProtectMove < Battle::Move

  @effect: Integer
  @sidedEffect: bool

  def pbChangeUsageCounters: (Battle::Battler user, bool specialUsage) -> void

  def pbProtectMessage: (Battle::Battler user) -> void
end

# ==============================================================================
# Weather-inducing move.
# ==============================================================================
class Battle::Move::WeatherMove < Battle::Move
  attr_reader weatherType: Symbol
end

# ==============================================================================
# Pledge move.
# ==============================================================================
class Battle::Move::PledgeMove < Battle::Move
  @comboEffect: Symbol?
  @overrideAnim: Symbol?
  @pledgeCombo: bool
  @pledgeOtherUser: Battle::Battler?
  @pledgeSetup: bool
  @combos: Array[[String, Symbol, Symbol?, Symbol?]]

  def pbOnStartUse: (Battle::Battler user, Array[Battle::Battler] targets) -> void

  def pbEffectAfterAllHits: (Battle::Battler user, Battle::Battler target) -> void

end



