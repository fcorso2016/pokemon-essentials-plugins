class Battle::Move
  attr_reader battle: Battle

  attr_reader realMove: Pokemon::Move

  attr_accessor id: Symbol

  attr_reader name: String

  attr_reader function_code: String

  attr_reader power: Integer

  attr_reader type: Symbol

  attr_reader category: Integer

  attr_reader accuracy: Integer

  attr_accessor pp: Integer

  attr_writer total_pp: Integer

  attr_reader addlEffect: Integer

  attr_reader target: Symbol

  attr_reader priority: Integer

  attr_reader flags: Array[String]

  attr_accessor calcType: Symbol

  attr_accessor powerBoost: bool

  attr_accessor snatched: bool

  CRITICAL_HIT_RATIOS: Array[Integer]

  def to_int: () -> Symbol

  # @deprecated This method is slated to be removed in v22.
  def baseDamage: () -> Integer

  # ============================================================================
  # Creating a move
  # ============================================================================
  def initialize: (Battle battle, Pokemon::Move move) -> void

  # This is the code actually used to generate a Battle::Move object. The
  # object generated is a subclass of this one which depends on the move's
  # function code.
  def self.from_pokemon_move: (Battle battle, Pokemon::Move move) -> Battle::Move

  # ============================================================================
  # About the move
  # ============================================================================
  def pbTarget: (Battle::Battler _user) -> GameData::Target

  def total_pp: () -> Integer

  # NOTE: This method is only ever called while using a move (and also by the
  #       AI), so using @calcType here is acceptable.
  def physicalMove?: (?Symbol? thisType) -> bool

  # NOTE: This method is only ever called while using a move (and also by the
  #       AI), so using @calcType here is acceptable.
  def specialMove?: (?Symbol? thisType) -> bool

  def damagingMove?: () -> bool

  def statusMove?: () -> bool

  def pbPriority: (Battle::Battler user) -> Integer

  def usableWhenAsleep?: () -> bool

  def unusableInGravity?: () -> bool

  def healingMove?: () -> bool

  def recoilMove?: () -> bool

  def flinchingMove?: () -> bool

  def callsAnotherMove?: () -> bool

  # Whether the move can/will hit more than once in the same turn (including
  # Beat Up which may instead hit just once). Not the same as pbNumHits>1.
  def multiHitMove?: () -> bool

  def chargingTurnMove?: () -> bool

  def successCheckPerHit?: () -> bool

  def hitsFlyingTargets?: () -> bool

  def hitsDiggingTargets?: () -> bool

  def hitsDivingTargets?: () -> bool

  def ignoresReflect?: () -> bool

  def targetsPosition?: () -> bool

  def cannotRedirect?: () -> bool

  def worksWithNoTargets?: () -> bool

  def damageReducedByBurn?: () -> bool

  def triggersHyperMode?: () -> bool

  def canSnatch?: () -> bool

  def canMagicCoat?: () -> bool

  def contactMove?: () -> bool

  def canProtectAgainst?: () -> bool

  def canMirrorMove?: () -> bool

  def thawsUser?: () -> bool

  def highCriticalRate?: () -> bool

  def bitingMove?: () -> bool

  def punchingMove?: () -> bool

  def soundMove?: () -> bool

  def powderMove?: () -> bool

  def pulseMove?: () -> bool

  def bombMove?: () -> bool

  def danceMove?: () -> bool

  # Causes perfect accuracy and double damage if target used Minimize. Perfect accuracy only with Gen 6+ mechanics.
  def tramplesMinimize?: () -> bool

  def nonLethal?: (Battle::Battler _user, Battle::Battler _target) -> bool

  def preventsBattlerConsumingHealingBerry?: (Battle::Battler battler, Array[Integer] targets) -> boolish

  # user is the PokÃƒÂ©mon using this move.
  def ignoresSubstitute?: (Battle::Battler? user) -> bool

  def display_type: (Battle::Battler battler) -> Symbol

  def display_damage: (Battle::Battler battler) -> Integer

  def display_category: (Battle::Battler battler) -> Integer

  def display_accuracy: (Battle::Battler battler) -> Integer
end



