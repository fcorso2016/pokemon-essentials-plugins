# ==============================================================================
# This round, user becomes the target of attacks that have single targets.
# (Follow Me, Rage Powder)
# ==============================================================================
class Battle::Move::RedirectAllMovesToUser < Battle::Move
end

# ==============================================================================
# This round, target becomes the target of attacks that have single targets.
# (Spotlight)
# ==============================================================================
class Battle::Move::RedirectAllMovesToTarget < Battle::Move
end

# ==============================================================================
# Unaffected by moves and abilities that would redirect this move. (Snipe Shot)
# ==============================================================================
class Battle::Move::CannotBeRedirected < Battle::Move
end

# ==============================================================================
# Randomly damages or heals the target. (Present)
# NOTE: Apparently a Normal Gem should be consumed even if this move will heal,
#       but I think that's silly so I've omitted that effect.
# ==============================================================================
class Battle::Move::RandomlyDamageOrHealTarget < Battle::Move
  @presentDmg: Integer
end

# ==============================================================================
# Damages target if target is a foe, or heals target by 1/2 of its max HP if
# target is an ally. (Pollen Puff)
# ==============================================================================
class Battle::Move::HealAllyOrDamageFoe < Battle::Move
  @healing: bool
end

# ==============================================================================
# User is Ghost: User loses 1/2 of max HP, and curses the target.
# Cursed PokÃƒÂ©mon lose 1/4 of their max HP at the end of each round.
# User is not Ghost: Decreases the user's Speed by 1 stage, and increases the
# user's Attack and Defense by 1 stage each. (Curse)
# ==============================================================================
class Battle::Move::CurseTargetOrLowerUserSpd1RaiseUserAtkDef1 < Battle::Move
  attr_reader statUp: [Symbol, Integer, Symbol, Integer]
  attr_reader statDown: [Symbol, Integer]
end

# ==============================================================================
# Effect depends on the environment. (Secret Power)
# ==============================================================================
class Battle::Move::EffectDependsOnEnvironment < Battle::Move
  attr_reader secretPower: Integer
end

# ==============================================================================
# If Psychic Terrain applies and the user is grounded, power is multiplied by
# 1.5 (in addition to Psychic Terrain's multiplier) and it targets all opposing
# PokÃƒÂ©mon. (Expanding Force)
# ==============================================================================
class Battle::Move::HitsAllFoesAndPowersUpInPsychicTerrain < Battle::Move
end

# ==============================================================================
# Powders the foe. This round, if it uses a Fire move, it loses 1/4 of its max
# HP instead. (Powder)
# ==============================================================================
class Battle::Move::TargetNextFireMoveDamagesTarget < Battle::Move
end

# ==============================================================================
# Power is doubled if Fusion Flare has already been used this round. (Fusion Bolt)
# ==============================================================================
class Battle::Move::DoublePowerAfterFusionFlare < Battle::Move
  @doublePower: bool
end

# ==============================================================================
# Power is doubled if Fusion Bolt has already been used this round. (Fusion Flare)
# ==============================================================================
class Battle::Move::DoublePowerAfterFusionBolt < Battle::Move
  @doublePower: bool
end

# ==============================================================================
# Powers up the ally's attack this round by 1.5. (Helping Hand)
# ==============================================================================
class Battle::Move::PowerUpAllyMove < Battle::Move
end

# ==============================================================================
# Counters a physical move used against the user this round, with 2x the power.
# (Counter)
# ==============================================================================
class Battle::Move::CounterPhysicalDamage < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Counters a specical move used against the user this round, with 2x the power.
# (Mirror Coat)
# ==============================================================================
class Battle::Move::CounterSpecialDamage < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Counters the last damaging move used against the user this round, with 1.5x
# the power. (Metal Burst)
# ==============================================================================
class Battle::Move::CounterDamagePlusHalf < Battle::Move::FixedDamageMove
end

# ==============================================================================
# Increases the user's Defense and Special Defense by 1 stage each. Ups the
# user's stockpile by 1 (max. 3). (Stockpile)
# ==============================================================================
class Battle::Move::UserAddStockpileRaiseDefSpDef1 < Battle::Move
end

# ==============================================================================
# Power is 100 multiplied by the user's stockpile (X). Resets the stockpile to
# 0. Decreases the user's Defense and Special Defense by X stages each. (Spit Up)
# ==============================================================================
class Battle::Move::PowerDependsOnUserStockpile < Battle::Move
end

# ==============================================================================
# Heals user depending on the user's stockpile (X). Resets the stockpile to 0.
# Decreases the user's Defense and Special Defense by X stages each. (Swallow)
# ==============================================================================
class Battle::Move::HealUserDependingOnUserStockpile < Battle::Move
end

# ==============================================================================
# Combos with another Pledge move used by the ally. (Grass Pledge)
# If the move is a combo, power is doubled and causes either a sea of fire or a
# swamp on the opposing side.
# ==============================================================================
class Battle::Move::GrassPledge < Battle::Move::PledgeMove
end

# ==============================================================================
# Combos with another Pledge move used by the ally. (Fire Pledge)
# If the move is a combo, power is doubled and causes either a rainbow on the
# user's side or a sea of fire on the opposing side.
# ==============================================================================
class Battle::Move::FirePledge < Battle::Move::PledgeMove
end

# ==============================================================================
# Combos with another Pledge move used by the ally. (Water Pledge)
# If the move is a combo, power is doubled and causes either a swamp on the
# opposing side or a rainbow on the user's side.
# ==============================================================================
class Battle::Move::WaterPledge < Battle::Move::PledgeMove
end

# ==============================================================================
# Uses the last move that was used. (Copycat)
# ==============================================================================
class Battle::Move::UseLastMoveUsed < Battle::Move
  @copied_move: Symbol

  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# Uses the last move that the target used. (Mirror Move)
# ==============================================================================
class Battle::Move::UseLastMoveUsedByTarget < Battle::Move
end

# ==============================================================================
# Uses the move the target was about to use this round, with 1.5x power.
# (Me First)
# ==============================================================================
class Battle::Move::UseMoveTargetIsAboutToUse < Battle::Move
  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# Uses a different move depending on the environment. (Nature Power)
# NOTE: This code does not support the Gen 5 and older definition of the move
#       where it targets the user. It makes more sense for it to target another
#       PokÃƒÂ©mon.
# ==============================================================================
class Battle::Move::UseMoveDependingOnEnvironment < Battle::Move
  attr_reader npMove: Symbol
end

# ==============================================================================
# Uses a random move that exists. (Metronome)
# ==============================================================================
class Battle::Move::UseRandomMove < Battle::Move
  @metronomeMove: Symbol?

  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# Uses a random move known by any non-user PokÃƒÂ©mon in the user's party. (Assist)
# ==============================================================================
class Battle::Move::UseRandomMoveFromUserParty < Battle::Move
  @assistMoves: Array[Symbol]

  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# Uses a random move the user knows. Fails if user is not asleep. (Sleep Talk)
# ==============================================================================
class Battle::Move::UseRandomUserMoveIfAsleep < Battle::Move
  @sleepTalkMoves: Array[Integer]

  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# This round, reflects all moves that can be Magic Coated which target the user
# or which have no target back at their origin. (Magic Coat)
# ==============================================================================
class Battle::Move::BounceBackProblemCausingStatusMoves < Battle::Move
end

# ==============================================================================
# This round, snatches all used moves that can be Snatched. (Snatch)
# ==============================================================================
class Battle::Move::StealAndUseBeneficialStatusMove < Battle::Move
end

# ==============================================================================
# This move turns into the last move used by the target, until user switches
# out. (Mimic)
# ==============================================================================
class Battle::Move::ReplaceMoveThisBattleWithTargetLastMoveUsed < Battle::Move
  attr_reader moveBlacklist: Array[String]
end

# ==============================================================================
# This move permanently turns into the last move used by the target. (Sketch)
# ==============================================================================
class Battle::Move::ReplaceMoveWithTargetLastMoveUsed < Battle::Move
  attr_reader moveBlacklist: Array[String]
end



