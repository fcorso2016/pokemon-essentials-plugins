# ==============================================================================
#
# ==============================================================================
module RecordedBattleModule
  @properties: Hash[String, untyped]
  @randomnumbers: Array[Integer]

  @roundindex: Integer

  @switches: Array[bool]

  attr_reader randomnums: Array[Integer]

  attr_reader rounds: Array[Array[Array[Integer]]]

  module Commands
    FIGHT: Integer

    BAG: Integer

    POKEMON: Integer

    RUN: Integer
  end

  def initialize: (*untyped arg) -> void

  def pbGetBattleType: () -> Integer

  def pbGetTrainerInfo: (Trainer trainer) -> Array[[Symbol, String, Integer, Array[bool]] | [Symbol, String, Integer, String, String]]?

  def pbStartBattle: () -> void

  def pbDumpRecord: () -> [Integer, Hash[String, untyped], Array[Array[Array[untyped]]], Array[Integer], Array[bool]]

  def pbSwitchInBetween: (Integer idxBattler, ?bool checkLaxOnly, ?bool canCancel) -> Integer

  def pbRegisterMove: (Integer idxBattler, Integer idxMove, ?bool showMessages) -> bool

  def pbRegisterTarget: (Integer idxBattler, Integer idxTarget) -> void

  def pbRun: (Integer idxBattler, ?bool duringBattle) -> bool

  def pbAutoChooseMove: (Integer idxBattler, ?bool showMessages) -> bool

  def pbRegisterSwitch: (Integer idxBattler, Integer idxParty) -> bool

  def pbRegisterItem: (Integer idxBattler, Symbol item, ?Integer? idxTarget, ?Integer? idxMove) -> bool

  def pbCommandPhase: () -> void

  def pbStorePokemon: (Pokemon pkmn) -> void

  def pbRandom: (Integer num) -> Integer
end

# ==============================================================================
#
# ==============================================================================
module RecordedBattlePlaybackModule
  module Commands
    FIGHT: Integer

    BAG: Integer

    POKEMON: Integer

    RUN: Integer
  end

  @backdrop: String
  @backdropBase: String?
  @battletype: Integer

  @canRun: bool
  @environment: Symbol
  @internalBattle: bool
  @items: Array[Symbol]?
  @party1starts: Array[Integer]
  @party2starts: Array[Integer]
  @properties: Hash[String, untyped]

  @randomindex: Integer
  @randomnums: Array[Integer]
  @roundindex: Integer
  @rounds: Array[Array[Array[Integer]]]

  @rules: Hash[String, bool]
  @showAnims: bool
  @switchStyle: bool
  @switches: Array[bool]

  @switchindex: Integer

  @time: number

  def initialize: (Battle::Scene scene, [Integer, Hash[String, untyped], Array[Array[Array[untyped]]], Array[Integer], Array[bool]] battle) -> void

  def pbStartBattle: () -> void

  def pbSwitchInBetween: (Integer idxBattler, ?bool checkLaxOnly, ?bool canCancel) -> Integer

  def pbRandom: (Integer _num) -> Integer

  def pbDisplayPaused: (String str) -> void

  def pbCommandPhaseLoop: (bool isPlayer) -> void
end

# ==============================================================================
#
# ==============================================================================
class RecordedBattle < Battle
  include RecordedBattleModule
end

class RecordedBattle::BattlePalaceBattle < BattlePalaceBattle
  include RecordedBattleModule
end

class RecordedBattle::BattleArenaBattle < BattleArenaBattle
  include RecordedBattleModule
end

class RecordedBattle::PlaybackBattle < Battle
  include RecordedBattlePlaybackModule
end

class RecordedBattle::BattlePalacePlaybackBattle < BattlePalaceBattle
  include RecordedBattlePlaybackModule
end

class RecordedBattle::BattleArenaPlaybackBattle < BattleArenaBattle
  include RecordedBattlePlaybackModule
end

# ==============================================================================
#
# ==============================================================================
module RecordedBattle::PlaybackHelper
  def self.pbGetOpponent: (Battle battle) -> Array[Trainer]

  def self.pbGetBattleBGM: (Battle battle) -> RPG::AudioFile

  def self.pbCreateTrainerInfo: (Array[[Symbol, String, Integer, Array[bool]] | [Symbol, String, Integer, String, String]] trainer) -> Array[Trainer]
end



