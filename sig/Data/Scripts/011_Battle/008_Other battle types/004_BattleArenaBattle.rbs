# ==============================================================================
# Success state
# ==============================================================================
class Battle::SuccessState
  attr_accessor typeMod: Numeric

  attr_accessor useState: Integer

  attr_accessor protected: bool

  attr_accessor skill: Integer

  def initialize: () -> void

  def clear: (?bool full) -> void

  def updateSkill: () -> void
end

# ==============================================================================
#
# ==============================================================================
class BattleArenaBattle < Battle

  @battlersChanged: bool

  @count: Integer
  @mind: [Integer, Integer]

  @partyindexes: [Integer, Integer]
  @skill: [Integer, Integer]

  @starthp: [Integer, Integer]

  def pbOnAllBattlersEnteringBattle: () -> untyped

  def pbRecordBattlerAsActive: (Battle::Battler battler) -> void

  def pbMindScore: (Battle::Move move) -> Integer
end

# ==============================================================================
#
# ==============================================================================
class Battle::AI
  attr_accessor battleArena: bool

  alias _battleArena_pbChooseToSwitchOut pbChooseToSwitchOut
end

# ==============================================================================
#
# ==============================================================================
class Battle::Scene
  def pbBattleArenaUpdate: () -> void

  def updateJudgment: (SpriteWindow_Base window, Integer phase, Battle::Battler battler1, Battle::Battler battler2, [Integer, Integer, Integer] ratings1, [Integer, Integer, Integer] ratings2) -> void

  def pbBattleArenaBattlers: (Battle::Battler battler1, Battle::Battler battler2) -> void

  def pbBattleArenaJudgment: (Battle::Battler battler1, Battle::Battler battler2, [Integer, Integer, Integer] ratings1, [Integer, Integer, Integer] ratings2) -> void
end


