# ==============================================================================
# Instances of this class are individual PokÃƒÂ©mon.
# The player's party PokÃƒÂ©mon are stored in the array $player.party.
# ==============================================================================
class Pokemon
  include _Inspectable

  @form: Integer
  @gender: Integer?
  @item: Symbol?
  @level: Integer?
  @ability: Symbol?
  @mail: Mail?
  @name: String?
  @nature: Symbol?
  @super_shiny: bool?
  @ability_index: Integer?
  @nature_for_stats: Symbol?

  @timeEggHatched: Integer?
  @timeReceived: Integer?

  # @return [Symbol] this PokÃƒÂ©mon's species
  attr_reader species: Symbol

  # If defined, this PokÃƒÂ©mon's form will be this value even if a MultipleForms
  # handler tries to say otherwise.
  # @return [Integer, nil] this PokÃƒÂ©mon's form
  attr_accessor forced_form: Integer?

  # If defined, is the time (in Integer form) when this PokÃƒÂ©mon's form was set.
  # @return [Integer, nil] the time this PokÃƒÂ©mon's form was set
  attr_accessor time_form_set: Integer?

  # @return [Integer] the current experience points
  attr_reader exp: Integer

  # @return [Integer] the number of steps until this PokÃƒÂ©mon hatches, 0 if this PokÃƒÂ©mon is not an egg
  attr_accessor steps_to_hatch: Integer

  # @return [Integer] the current HP
  attr_reader hp: Integer

  # @return [Symbol] this PokÃƒÂ©mon's current status (see GameData::Status)
  attr_reader status: Symbol

  # @return [Integer] sleep count / toxic flag / 0:
  #   sleep (number of rounds before waking up), toxic (0 = regular poison, 1 = toxic)
  attr_accessor statusCount: Integer

  # This PokÃƒÂ©mon's shininess (true, false, nil). Is recalculated if made nil.
  # @param value [Boolean, nil] whether this PokÃƒÂ©mon is shiny
  attr_writer shiny: bool?

  # @return [Array<Pokemon::Move>] the moves known by this PokÃƒÂ©mon
  attr_accessor moves: Array[Move]

  # @return [Array<Symbol>] the IDs of moves known by this PokÃƒÂ©mon when it was obtained
  attr_accessor first_moves: Array[Symbol]

  # @return [Array<Symbol>] an array of ribbons owned by this PokÃƒÂ©mon
  attr_accessor ribbons: Array[Symbol]

  # @return [Integer] contest stats
  attr_accessor cool: Integer

  # @return [Integer] contest stats
  attr_accessor beauty: Integer

  # @return [Integer] contest stats
  attr_accessor cute: Integer

  # @return [Integer] contest stats
  attr_accessor smart: Integer

  # @return [Integer] contest stats
  attr_accessor tough: Integer

  # @return [Integer] contest stats
  attr_accessor sheen: Integer

  # @return [Integer] the PokÃƒÂ©rus strain and infection time
  attr_accessor pokerus: Integer

  # @return [Integer] this PokÃƒÂ©mon's current happiness (an integer between 0 and 255)
  attr_accessor happiness: Integer

  # @return [Symbol] the item ID of the PokÃƒÂ© Ball this PokÃƒÂ©mon is in
  attr_accessor poke_ball: Symbol

  # @return [Array<Integer>] this PokÃƒÂ©mon's markings, one value per mark
  attr_accessor markings: Array[Integer]

  # @return [Hash<Integer>] a hash of IV values for HP, Atk, Def, Speed, Sp. Atk and Sp. Def
  attr_accessor iv: Hash[Symbol, Integer]

  # An array of booleans indicating whether a stat is made to have maximum IVs
  # (for Hyper Training). Set like @ivMaxed[:ATTACK] = true
  # @return [Hash<Boolean>] a hash of booleans that max each IV value
  attr_accessor ivMaxed: Hash[Symbol, bool]

  # @return [Hash<Integer>] this PokÃƒÂ©mon's effort values
  attr_accessor ev: Hash[Symbol, Integer]

  # @return [Integer] calculated stats
  attr_reader totalhp: Integer

  # @return [Integer] calculated stats
  attr_reader attack: Integer

  # @return [Integer] calculated stats
  attr_reader defense: Integer

  # @return [Integer] calculated stats
  attr_reader spatk: Integer

  # @return [Integer] calculated stats
  attr_reader spdef: Integer

  # @return [Integer] calculated stats
  attr_reader speed: Integer

  # @return [Owner] this PokÃƒÂ©mon's owner
  attr_reader owner: Owner

  # @return [Integer] the manner this PokÃƒÂ©mon was obtained:
  #   0 (met), 1 (as egg), 2 (traded), 4 (fateful encounter)
  attr_accessor obtain_method: Integer

  # @return [Integer] the ID of the map this PokÃƒÂ©mon was obtained in
  attr_accessor obtain_map: Integer

  # Describes the manner this PokÃƒÂ©mon was obtained. If left undefined,
  # the obtain map's name is used.
  # @return [String] the obtain text
  attr_accessor obtain_text: String

  # @return [Integer] the level of this PokÃƒÂ©mon when it was obtained
  attr_accessor obtain_level: Integer

  # If this PokÃƒÂ©mon hatched from an egg, returns the map ID where the hatching happened.
  # Otherwise returns 0.
  # @return [Integer] the map ID where egg was hatched (0 by default)
  attr_accessor hatched_map: Integer

  # Another PokÃƒÂ©mon which has been fused with this PokÃƒÂ©mon (or nil if there is none).
  # Currently only used by Kyurem, to record a fused Reshiram or Zekrom.
  # @return [Pokemon, nil] the PokÃƒÂ©mon fused into this one (nil if there is none)
  attr_accessor fused: Pokemon?

  # @return [Integer] this PokÃƒÂ©mon's personal ID
  attr_accessor personalID: Integer

  # Used by Galarian Yamask to remember that it took sufficient damage from a
  # battle and can evolve.
  attr_accessor ready_to_evolve: bool

  # Whether this PokÃƒÂ©mon can be deposited in storage/Day Care
  attr_accessor cannot_store: bool

  # Whether this PokÃƒÂ©mon can be released
  attr_accessor cannot_release: bool

  # Whether this PokÃƒÂ©mon can be traded
  attr_accessor cannot_trade: bool

  # Max total IVs
  IV_STAT_LIMIT: Integer

  # Max total EVs
  EV_LIMIT: Integer

  # Max EVs that a single stat can have
  EV_STAT_LIMIT: Integer

  # Maximum length a PokÃƒÂ©mon's nickname can be
  MAX_NAME_SIZE: Integer

  # Maximum number of moves a PokÃƒÂ©mon can know at once
  MAX_MOVES: Integer

  def self.play_cry: (Symbol species, ?Integer form, ?Integer volume, ?Integer pitch) -> void

  def play_cry: (?Integer volume, ?Integer? pitch) -> void

  def species_data: () -> GameData::Species

  # Changes the PokÃƒÂ©mon's species and re-calculates its statistics.
  # @param species_id [Symbol, String, GameData::Species] ID of the species to change this PokÃƒÂ©mon to
  def species=: (Symbol | String | GameData::Species species_id) -> void

  # @param check_species [Symbol, String, GameData::Species] ID of the species to check for
  # @return [Boolean] whether this PokÃƒÂ©mon is of the specified species
  def isSpecies?: (Symbol | String | GameData::Species check_species) -> bool

  def form: () -> Integer

  def form_simple: () -> Integer

  def form=: (Integer value) -> void

  # The same as def form=, but yields to a given block in the middle so that a
  # message about the form changing can be shown before calling "onSetForm"
  # which may have its own messages, e.g. learning a move.
  def setForm: (Integer value) { () -> void } -> void

  def form_simple=: (Integer value) -> void

  # @return [Integer] this PokÃƒÂ©mon's level
  def level: () -> Integer

  # Sets this PokÃƒÂ©mon's level. The given level must be between 1 and the
  # maximum level (defined in {GameData::GrowthRate}).
  # @param value [Integer] new level (between 1 and the maximum level)
  def level=: (Integer value) -> void

  # Sets this PokÃƒÂ©mon's Exp. Points.
  # @param value [Integer] new experience points
  def exp=: (Integer value) -> void

  # @return [Boolean] whether this PokÃƒÂ©mon is an egg
  def egg?: () -> bool

  # @return [GameData::GrowthRate] this PokÃƒÂ©mon's growth rate
  def growth_rate: () -> GameData::GrowthRate

  # @return [Integer] this PokÃƒÂ©mon's base Experience value
  def base_exp: () -> Integer

  # @return [Float] a number between 0 and 1 indicating how much of the current level's
  #   Exp this PokÃƒÂ©mon has
  def exp_fraction: () -> Float

  # Sets the PokÃƒÂ©mon's health.
  # @param value [Integer] new HP value
  def hp=: (Integer value) -> void

  # Sets this PokÃƒÂ©mon's status. See {GameData::Status} for all possible status effects.
  # @param value [Symbol, String, GameData::Status] status to set
  def status=: (Symbol | String | GameData::Status value) -> void

  # @return [Boolean] whether the PokÃƒÂ©mon is not fainted and not an egg
  def able?: () -> bool

  # @return [Boolean] whether the PokÃƒÂ©mon is fainted
  def fainted?: () -> bool

  # Heals all HP of this PokÃƒÂ©mon.
  def heal_HP: () -> void

  # Heals the status problem of this PokÃƒÂ©mon.
  def heal_status: () -> void

  # Restores all PP of this PokÃƒÂ©mon. If a move index is given, restores the PP
  # of the move in that index.
  # @param move_index [Integer] index of the move to heal (-1 if all moves
  #   should be healed)
  def heal_PP: (?Integer move_index) -> void

  # Heals all HP, PP, and status problems of this PokÃƒÂ©mon.
  def heal: () -> void

  # @return [Array<Symbol>] an array of this PokÃƒÂ©mon's types
  def types: () -> Array[Symbol]

  # @deprecated This method is slated to be removed in v22.
  def type1: () -> Symbol

  # @deprecated This method is slated to be removed in v22.
  def type2: () -> Symbol

  # @param type [Symbol, String, GameData::Type] type to check
  # @return [Boolean] whether this PokÃƒÂ©mon has the specified type
  def hasType?: (Symbol | String | GameData::Type `type`) -> bool

  # @return [0, 1, 2] this PokÃƒÂ©mon's gender (0 = male, 1 = female, 2 = genderless)
  def gender: () -> Integer

  # Sets this PokÃƒÂ©mon's gender to a particular gender (if possible).
  # @param value [0, 1] new gender (0 = male, 1 = female)
  def gender=: (Integer value) -> void

  # Makes this PokÃƒÂ©mon male.
  def makeMale: () -> void

  # Makes this PokÃƒÂ©mon female.
  def makeFemale: () -> void

  # @return [Boolean] whether this PokÃƒÂ©mon is male
  def male?: () -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon is female
  def female?: () -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon is genderless
  def genderless?: () -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon species is restricted to only ever being one
  #   gender (or genderless)
  def singleGendered?: () -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon is shiny (differently colored)
  def shiny?: () -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon is super shiny (differently colored,
  #   square sparkles)
  def super_shiny?: () -> bool

  # @param value [Boolean] whether this PokÃƒÂ©mon is super shiny
  def super_shiny=: (bool value) -> void

  # The index of this PokÃƒÂ©mon's ability (0, 1 are natural abilities, 2+ are
  # hidden abilities) as defined for its species/form. An ability may not be
  # defined at this index. Is recalculated (as 0 or 1) if made nil.
  # @return [Integer] the index of this PokÃƒÂ©mon's ability
  def ability_index: () -> Integer

  # @param value [Integer, nil] forced ability index (nil if none is set)
  def ability_index=: (Integer? value) -> void

  # @return [GameData::Ability, nil] an Ability object corresponding to this PokÃƒÂ©mon's ability
  def ability: () -> GameData::Ability?

  # @return [Symbol, nil] the ability symbol of this PokÃƒÂ©mon's ability
  def ability_id: () -> Symbol?

  # @param value [Symbol, String, GameData::Ability, nil] ability to set
  def ability=: ((Symbol | String | GameData::Ability)? value) -> void

  # Returns whether this PokÃƒÂ©mon has a particular ability. If no value
  # is given, returns whether this PokÃƒÂ©mon has an ability set.
  # @param check_ability [Symbol, String, GameData::Ability, nil] ability ID to check
  # @return [Boolean] whether this PokÃƒÂ©mon has a particular ability or
  #   an ability at all
  def hasAbility?: (?(Symbol | String | GameData::Ability)? check_ability) -> bool

  # @return [Boolean] whether this PokÃƒÂ©mon has a hidden ability
  def hasHiddenAbility?: () -> bool

  # @return [Array<Array<Symbol,Integer>>] the abilities this PokÃƒÂ©mon can have,
  #   where every element is [ability ID, ability index]
  def getAbilityList: () -> Array[[Symbol, Integer]]

  # @return [GameData::Nature, nil] a Nature object corresponding to this PokÃƒÂ©mon's nature
  def nature: () -> GameData::Nature?

  def nature_id: () -> Symbol

  # Sets this PokÃƒÂ©mon's nature to a particular nature.
  # @param value [Symbol, String, GameData::Nature, nil] nature to change to
  def nature=: ((Symbol | String | GameData::Nature)? value) -> void

  # Returns the calculated nature, taking into account things that change its
  # stat-altering effect (i.e. Gen 8 mints). Only used for calculating stats.
  # @return [GameData::Nature, nil] this PokÃƒÂ©mon's calculated nature
  def nature_for_stats: () -> GameData::Nature?

  def nature_for_stats_id: () -> Symbol

  # If defined, this PokÃƒÂ©mon's nature is considered to be this when calculating stats.
  # @param value [Symbol, String, GameData::Nature, nil] ID of the nature to use for calculating stats
  def nature_for_stats=: ((Symbol | String | GameData::Nature)? value) -> void

  # Returns whether this PokÃƒÂ©mon has a particular nature. If no value is given,
  # returns whether this PokÃƒÂ©mon has a nature set.
  # @param check_nature [Symbol, String, GameData::Nature, nil] nature ID to check
  # @return [Boolean] whether this PokÃƒÂ©mon has a particular nature or a nature
  #   at all
  def hasNature?: (?(Symbol | String | GameData::Nature)? check_nature) -> bool

  # @return [GameData::Item, nil] an Item object corresponding to this PokÃƒÂ©mon's item
  def item: () -> GameData::Item?

  def item_id: () -> Symbol

  # Gives an item to this PokÃƒÂ©mon to hold.
  # @param value [Symbol, String, GameData::Item, nil] ID of the item to give
  #   to this PokÃƒÂ©mon
  def item=: ((Symbol | String | GameData::Item)? value) -> void

  # Returns whether this PokÃƒÂ©mon is holding an item. If an item id is passed,
  # returns whether the PokÃƒÂ©mon is holding that item.
  # @param check_item [Symbol, String, GameData::Item, nil] item ID to check
  # @return [Boolean] whether the PokÃƒÂ©mon is holding the specified item or
  #   an item at all
  def hasItem?: (?(Symbol | String | GameData::Item)? check_item) -> bool

  # @return [Array<Array<Symbol>>] the items this species can be found holding in the wild
  def wildHoldItems: () -> ::Array[[Symbol, Symbol, Symbol]]

  # @return [Mail, nil] mail held by this PokÃƒÂ©mon (nil if there is none)
  def mail: () -> Mail?

  # If mail is a Mail object, gives that mail to this PokÃƒÂ©mon. If nil is given,
  # removes the held mail.
  # @param mail [Mail, nil] mail to be held by this PokÃƒÂ©mon
  def mail=: (Mail? mail) -> void

  # @return [Integer] the number of moves known by the PokÃƒÂ©mon
  def numMoves: () -> Integer

  # @param move_id [Symbol, String, GameData::Move] ID of the move to check
  # @return [Boolean] whether the PokÃƒÂ©mon knows the given move
  def hasMove?: (Symbol | String | GameData::Move move_id) -> bool

  # Returns the list of moves this PokÃƒÂ©mon can learn by levelling up.
  # @return [Array<Array<Integer,Symbol>>] this PokÃƒÂ©mon's move list, where every element is [level, move ID]
  def getMoveList: () -> Array[[Integer, Symbol]]

  # Sets this PokÃƒÂ©mon's movelist to the default movelist it originally had.
  def reset_moves: () -> void

  # Silently learns the given move. Will erase the first known move if it has to.
  # @param move_id [Symbol, String, GameData::Move] ID of the move to learn
  def learn_move: (Symbol | String | GameData::Move move_id) -> void

  # Deletes the given move from the PokÃƒÂ©mon.
  # @param move_id [Symbol, String, GameData::Move] ID of the move to delete
  def forget_move: (Symbol | String | GameData::Move move_id) -> void

  # Deletes the move at the given index from the PokÃƒÂ©mon.
  # @param index [Integer] index of the move to be deleted
  def forget_move_at_index: (Integer index) -> void

  # Deletes all moves from the PokÃƒÂ©mon.
  def forget_all_moves: () -> void

  # Copies currently known moves into a separate array, for Move Relearner.
  def record_first_moves: () -> void

  # Adds a move to this PokÃƒÂ©mon's first moves.
  # @param move_id [Symbol, String, GameData::Move] ID of the move to add
  def add_first_move: (Symbol | String | GameData::Move move_id) -> void

  # Removes a move from this PokÃƒÂ©mon's first moves.
  # @param move_id [Symbol, String, GameData::Move] ID of the move to remove
  def remove_first_move: (Symbol | String | GameData::Move move_id) -> void

  # Clears this PokÃƒÂ©mon's first moves.
  def clear_first_moves: () -> void

  # @param move_id [Symbol, String, GameData::Move] ID of the move to check
  # @return [Boolean] whether the PokÃƒÂ©mon is compatible with the given move
  def compatible_with_move?: (Symbol | String | GameData::Move move_id) -> bool

  def can_relearn_move?: () -> bool

  # @return [Integer] the number of ribbons this PokÃƒÂ©mon has
  def numRibbons: () -> Integer

  # @param ribbon [Symbol, String, GameData::Ribbon] ribbon ID to check for
  # @return [Boolean] whether this PokÃƒÂ©mon has the specified ribbon
  def hasRibbon?: (Symbol | String | GameData::Ribbon ribbon) -> bool

  # Gives a ribbon to this PokÃƒÂ©mon.
  # @param ribbon [Symbol, String, GameData::Ribbon] ID of the ribbon to give
  def giveRibbon: (Symbol | String | GameData::Ribbon ribbon) -> void

  # Replaces one ribbon with the next one along, if possible. If none of the
  # given ribbons are owned, give the first one.
  # @return [Symbol, String, GameData::Ribbon] ID of the ribbon that was gained
  def upgradeRibbon: (*(Symbol | String | GameData::Ribbon) args) -> (Symbol | String | GameData::Ribbon)?

  # Removes the specified ribbon from this PokÃƒÂ©mon.
  # @param ribbon [Symbol, String, GameData::Ribbon] ID of the ribbon to remove
  def takeRibbon: (Symbol | String | GameData::Ribbon ribbon) -> void

  # Removes all ribbons from this PokÃƒÂ©mon.
  def clearAllRibbons: () -> void

  # @return [Integer] the PokÃƒÂ©rus infection stage for this PokÃƒÂ©mon
  def pokerusStrain: () -> Integer

  # Returns the PokÃƒÂ©rus infection stage for this PokÃƒÂ©mon. The possible stages are
  # 0 (not infected), 1 (infected) and 2 (cured).
  # @return [0, 1, 2] current PokÃƒÂ©rus infection stage
  def pokerusStage: () -> Integer

  # Gives this PokÃƒÂ©mon PokÃƒÂ©rus (either the specified strain or a random one).
  # @param strain [Integer] PokÃƒÂ©rus strain to give (1-15 inclusive, or 0 for random)
  def givePokerus: (?Integer strain) -> void

  # Resets the infection time for this PokÃƒÂ©mon's PokÃƒÂ©rus (even if cured).
  def resetPokerusTime: () -> void

  # Reduces the time remaining for this PokÃƒÂ©mon's PokÃƒÂ©rus (if infected).
  def lowerPokerusCount: () -> void

  # Cures this PokÃƒÂ©mon's PokÃƒÂ©rus (if infected).
  def curePokerus: () -> void

  # Changes this PokÃƒÂ©mon's owner.
  # @param new_owner [Owner] the owner to change to
  def owner=: (Owner new_owner) -> void

  # @param trainer [Player, NPCTrainer, nil] the trainer to compare to the original trainer
  # @return [Boolean] whether the given trainer is not this PokÃƒÂ©mon's original trainer
  def foreign?: (?Trainer? trainer) -> bool

  # @return [Time] the time when this PokÃƒÂ©mon was obtained
  def timeReceived: () -> Time

  # Sets the time when this PokÃƒÂ©mon was obtained.
  # @param value [Integer, Time, #to_i] time in seconds since Unix epoch
  def timeReceived=: (Integer | Time | _ToI value) -> void

  # @return [Time] the time when this PokÃƒÂ©mon hatched
  def timeEggHatched: () -> Time

  # Sets the time when this PokÃƒÂ©mon hatched.
  # @param value [Integer, Time, #to_i] time in seconds since Unix epoch
  def timeEggHatched=: (Integer | Time | _ToI value) -> void

  # @return [String] the name of this PokÃƒÂ©mon
  def name: () -> String

  # @param value [String] the nickname of this PokÃƒÂ©mon
  def name=: (String value) -> void

  # @return [Boolean] whether this PokÃƒÂ©mon has been nicknamed
  def nicknamed?: () -> bool

  # @return [String] the species name of this PokÃƒÂ©mon
  def speciesName: () -> String

  # @return [Integer] the height of this PokÃƒÂ©mon in decimetres (0.1 metres)
  def height: () -> Integer

  # @return [Integer] the weight of this PokÃƒÂ©mon in hectograms (0.1 kilograms)
  def weight: () -> Integer

  # @return [Hash<Integer>] the EV yield of this PokÃƒÂ©mon (a hash with six key/value pairs)
  def evYield: () -> Hash[Symbol, Integer]

  def affection_level: () -> Integer

  # Changes the happiness of this PokÃƒÂ©mon depending on what happened to change it.
  # @param method [String] the happiness changing method (e.g. 'walking')
  def changeHappiness: (String method) -> void

  # ============================================================================
  # Evolution checks
  # ============================================================================
  # Checks whether this Pokemon can evolve because of levelling up.
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_on_level_up: () -> Symbol?

  # Checks whether this Pokemon can evolve because of using an item on it.
  # @param item_used [Symbol, GameData::Item, nil] the item being used
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_on_use_item: ((Symbol | GameData::Item)? item_used) -> Symbol?

  # Checks whether this Pokemon can evolve because of being traded.
  # @param other_pkmn [Pokemon] the other PokÃƒÂ©mon involved in the trade
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_on_trade: (Pokemon other_pkmn) -> Symbol?

  # Checks whether this Pokemon can evolve after a battle.
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_after_battle: (Integer party_index) -> Symbol?

  # Checks whether this Pokemon can evolve by a triggered event.
  # @param value [Integer] a value that may be used by the evolution method
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_by_event: (?Integer value) -> Symbol?

  # Called after this PokÃƒÂ©mon evolves, to remove its held item (if the evolution
  # required it to have a held item) or duplicate this PokÃƒÂ©mon (Shedinja only).
  # @param new_species [Symbol] the species that this PokÃƒÂ©mon evolved into
  def action_after_evolution: (Symbol new_species) -> void

  # The core method that performs evolution checks. Needs a block given to it,
  # which will provide either a GameData::Species ID (the species to evolve
  # into) or nil (keep checking).
  # @return [Symbol, nil] the ID of the species to evolve into
  def check_evolution_internal: () { (Pokemon, Symbol, Symbol, Integer | Symbol) -> Symbol? } -> Symbol?

  def trigger_event_evolution: (Integer number) -> bool

  # @return [Hash<Integer>] this PokÃƒÂ©mon's base stats, a hash with six key/value pairs
  def baseStats: () -> Hash[Symbol, Integer]

  # Returns this PokÃƒÂ©mon's effective IVs, taking into account Hyper Training.
  # Only used for calculating stats.
  # @return [Hash<Integer>] hash containing this PokÃƒÂ©mon's effective IVs
  def calcIV: () -> Hash[Symbol, Integer]

  # @return [Integer] the maximum HP of this PokÃƒÂ©mon
  def calcHP: (Integer base, Integer level, Integer iv, Integer ev) -> Integer

  # @return [Integer] the specified stat of this PokÃƒÂ©mon (not used for total HP)
  def calcStat: (Integer base, Integer level, Integer iv, Integer ev, Math::double nat) -> untyped

  # Recalculates this PokÃƒÂ©mon's stats.
  def calc_stats: () -> void

  # Creates a copy of this PokÃƒÂ©mon and returns it.
  # @return [Pokemon] a copy of this PokÃƒÂ©mon
  def clone: () -> Pokemon

  # Creates a new PokÃƒÂ©mon object.
  # @param species [Symbol, String, GameData::Species] PokÃƒÂ©mon species
  # @param level [Integer] PokÃƒÂ©mon level
  # @param owner [Owner, Player, NPCTrainer] PokÃƒÂ©mon owner (the player by default)
  # @param withMoves [Boolean] whether the PokÃƒÂ©mon should have moves
  # @param recheck_form [Boolean] whether to auto-check the form
  def initialize: (Symbol | String | GameData::Species species, Integer level, ?(Owner | Trainer) owner, ?bool withMoves, ?bool recheck_form) -> void
end



