# ==============================================================================
#
# ==============================================================================
class PokemonBox
  attr_reader pokemon: Array[Pokemon?]

  attr_accessor name: String

  attr_accessor background: Integer

  BOX_WIDTH: Integer

  BOX_HEIGHT: Integer

  BOX_SIZE: Integer

  def initialize: (String name, ?Integer maxPokemon) -> void

  def length: () -> Integer

  def nitems: () -> Integer

  def full?: () -> bool

  def empty?: () -> bool

  def []: (Integer i) -> Pokemon?

  def []=: (Integer i, Pokemon? value) -> void

  def each: () { (Pokemon) -> void } -> void

  def clear: () -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonStorage
  attr_reader boxes: Array[PokemonBox]

  attr_accessor currentBox: Integer

  attr_writer unlockedWallpapers: Array[bool]?

  BASICWALLPAPERQTY: Integer

  def initialize: (?Integer maxBoxes, ?Integer maxPokemon) -> void

  def allWallpapers: () -> Array[String]

  def unlockedWallpapers: () -> Array[bool]

  def isAvailableWallpaper?: (Integer i) -> bool

  def availableWallpapers: () -> [Array[String], Array[Integer]]

  def party: () -> Array[Pokemon]

  def party=: (Array[Pokemon] _value) -> void

  def party_full?: () -> bool

  def maxBoxes: () -> Integer

  def maxPokemon: (Integer box) -> Integer

  def full?: () -> bool

  def pbFirstFreePos: (Integer box) -> Integer

  def []: (Integer x) -> PokemonBox |
    (Integer x, Integer y) -> Pokemon?

  def []=: (Integer x, Integer y, Pokemon value) -> void

  def pbCopy: (Integer boxDst, Integer indexDst, Integer boxSrc, Integer indexSrc) -> bool

  def pbMove: (Integer boxDst, Integer indexDst, Integer boxSrc, Integer indexSrc) -> bool

  def pbMoveCaughtToParty: (Pokemon pkmn) -> boolish

  def pbMoveCaughtToBox: (Pokemon pkmn, Integer box) -> bool

  def pbStoreCaught: (Pokemon pkmn) -> Integer

  def pbDelete: (Integer box, Integer index) -> void

  def clear: () -> void
end

# ==============================================================================
# Regional Storage scripts
# ==============================================================================
class RegionalStorage
  @storages: Array[PokemonStorage]
  @lastmap: Integer
  @rgnmap: Integer

  def initialize: () -> void

  def getCurrentStorage: () -> PokemonStorage

  def allWallpapers: () -> Array[String]

  def availableWallpapers: () -> [Array[String], Array[Integer]]

  def unlockWallpaper: (Integer index) -> void

  def boxes: () -> Array[PokemonBox]

  def party: () -> Array[Pokemon]

  def party_full?: () -> bool

  def maxBoxes: () -> Integer

  def maxPokemon: (Integer box) -> Integer

  def full?: () -> bool

  def currentBox: () -> Integer

  def currentBox=: (Integer value) -> void

  def []: (Integer x, ?nil y) -> PokemonBox |
    (Integer x, Integer y) -> Pokemon?

  def []=: (Integer x, Integer y, Pokemon value) -> void

  def pbFirstFreePos: (Integer box) -> Integer

  def pbCopy: (Integer boxDst, Integer indexDst, Integer boxSrc, Integer indexSrc) -> bool

  def pbMove: (Integer boxDst, Integer indexDst, Integer boxSrc, Integer indexSrc) -> bool

  def pbMoveCaughtToParty: (Pokemon pkmn) -> boolish

  def pbMoveCaughtToBox: (Pokemon pkmn, Integer box) -> bool

  def pbStoreCaught: (Pokemon pkmn) -> Integer

  def pbDelete: (Integer box, Integer index) -> void
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbUnlockWallpaper: (Integer index) -> void

  # NOTE: I don't know why you'd want to do this, but here you go.
  def pbLockWallpaper: (Integer index) -> void

  # ==============================================================================
  # Look through PokÃ©mon in storage
  # ==============================================================================
  # Yields every PokÃ©mon/egg in storage in turn.
  def pbEachPokemon: () { (Pokemon, Integer) -> void } -> void

  # Yields every PokÃ©mon in storage in turn.
  def pbEachNonEggPokemon: () { (Pokemon, Integer) -> void } -> void
end


