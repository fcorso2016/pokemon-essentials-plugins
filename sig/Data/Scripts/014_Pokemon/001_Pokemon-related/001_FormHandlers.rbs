# ==============================================================================
#
# ==============================================================================
module MultipleForms
  type schema = {
      "getForm" => ^(Pokemon) -> Integer,
      "onSetForm" => ^(Pokemon, Integer, Integer) -> void,
      "getFormOnCreation" => ^(Pokemon) -> Integer,
      "getFormOnStartingBattle" => ^(Pokemon, bool) -> Integer,
      "getFormOnEnteringBattle" => ^(Pokemon, bool) -> Integer,
      "getFormOnLeavingBattle" => ^(Pokemon, Battle, bool, bool) -> Integer,
      "getFormOnEggCreation" => ^(Pokemon) -> Integer
    }

  @@formSpecies: SpeciesHandlerHash

  def self.copy: (Symbol sym, *Symbol syms) -> void

  def self.register: (Symbol sym, schema hash) -> void

  def self.registerIf: (Symbol sym, ^(Symbol) -> bool cond, schema hash) -> void

  def self.hasFunction?: (Pokemon pkmn, String func) -> bool

  def self.getFunction: (Pokemon | Symbol | String | GameData::Species pkmn, String func) -> Proc

  def self.call: ("getForm" | "getFormOnCreation" | "getFormOnEggCreation" func, Pokemon pkmn) -> Integer |
    ("onSetForm" func, Pokemon pkmn, Integer form, Integer oldForm) -> void |
    ("getFormOnStartingBattle" | "getFormOnEnteringBattle" func, Pokemon pkmn, bool wild) -> Integer |
    ("getFormOnLeavingBattle" func, Pokemon pkmn, Battle battle, bool used_in_battle, bool end_battle) -> Integer |
    ("changePokemonOnEnteringBattle" func, Battle::Battler battler, Pokemon pkmn, Battle battle) -> void |
    ("changePokemonOnLeavingBattle" func, Pokemon pkmn, Battle battle, bool used_in_battle, bool end_battle) -> void
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def drawSpot: (Bitmap bitmap, Array[Array[Integer]] spotpattern, Integer x, Integer y, Numeric red, Numeric green, Numeric blue) -> void

  def pbSpindaSpots: (Pokemon pkmn, Bitmap bitmap) -> void
end



