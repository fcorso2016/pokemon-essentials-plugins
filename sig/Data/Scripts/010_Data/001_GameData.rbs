# TypeProf 0.21.3

# Classes
module GameData
  def self.load_all: -> Array[Symbol]
  def self.get_all_data_filenames: -> (Array[[String, bool]])
  def self.get_all_pbs_base_filenames: -> Hash[Symbol, String]

  module ClassMethods[HashSchema < Hash[Symbol, untyped]]
    def schema: -> Hash[String, [Symbol, String]]
    def register: (HashSchema hash) -> void
    def exists?: (Symbol) -> bool |
                 (String) -> bool |
                 (Integer other) -> bool |
                 (instance other) -> bool
    def get: (Symbol) -> instance |
             (String) -> instance |
             (Integer other) -> instance |
             (instance other) -> instance
    def try_get: (Symbol) -> (instance | nil) |
                 (String) -> (instance | nil) |
                 (Integer other) -> (instance | nil) |
                 (instance other) -> (instance | nil)
    def keys: -> Array[Symbol | Integer]
    def each: {(instance) -> void} -> void
    def count: -> Integer
    def load: -> void
    def save: -> void
  end

  module ClassMethodsSymbols[HashSchema < Hash[Symbol, untyped]]
    def schema: -> Hash[String, [Symbol, String]]
    def register: (HashSchema hash) -> void
    def exists?: (Symbol other) -> bool |
                 (String other) -> bool |
                 (instance other) -> bool
    def get: (Symbol other) -> instance |
             (String other) -> instance |
             (instance other) -> instance
    def try_get: (Symbol other) -> (instance | nil) |
                 (String other) -> (instance | nil) |
                 (instance other) -> (instance | nil)
    def keys: -> Array[Symbol]
    def each: { (instance) -> void } -> void
    def each_alphabetically: { (Symbol) -> void }  -> void
    def count: -> Integer
    def load: -> void
    def save: -> void
  end

  module ClassMethodsIDNumbers[HashSchema < Hash[Symbol, untyped]]
    def schema: ->  Hash[String, [Symbol, String]]
    def register: (HashSchema hash) -> void
    def exists?: (Integer other) -> bool |
                 (instance other) -> bool
    def get: (Integer other) -> instance |
             (instance other) -> instance
    def try_get: (Integer other) -> (instance | nil) |
                 (instance other) -> (instance | nil)
    def keys: -> Array[Integer]
    def each: {(instance) -> void} -> void
    def count: -> Integer
    def load: -> void
    def save: -> void
  end

  module InstanceMethods
    @id: bot
    @id_number: bot

    def ==: (Symbol other) -> bool |
            (String other) -> bool |
            (Integer other) -> bool |
            (self other) -> bool
    def get_property_for_PBS: [T] (String key) -> T?
  end
end


