# TypeProf 0.21.3

# Classes
module GameData
  class Encounter
    type schema = {
        :id => Symbol,
        :map => Integer,
        :version => Integer,
        :step_chances => Integer,
        :types => Hash[Symbol, Array[[Integer, Symbol, Integer, Integer]]],
        :pbs_file_suffix => String
      }
    DATA: Hash[Symbol, Encounter]
    DATA_FILENAME: String
    PBS_BASE_FILENAME: String

    extend ClassMethodsSymbols[schema, Encounter]
    include InstanceMethods

    attr_accessor id: Symbol
    attr_accessor map: Integer
    attr_accessor version: Integer
    attr_reader step_chances: Integer
    attr_reader types: Hash[Symbol, Array[[Integer, Symbol, Integer, Integer]]]
    attr_reader pbs_file_suffix: String
    def self.exists?: (Integer map_id, ?Integer map_version) -> bool
    def self.get: (Integer map_id, ?Integer map_version) -> Encounter?
    def self.each: ?{ (Encounter) -> void } -> void
    def self.each_of_version: (?Integer version) {(Symbol) -> void} -> void
    def initialize: (schema hash) -> void
  end
end



