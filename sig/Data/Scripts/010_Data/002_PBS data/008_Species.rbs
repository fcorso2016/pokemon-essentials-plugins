# TypeProf 0.21.3

# Classes
module GameData
  class Species
    type schema = {
      :id => Symbol,
      :species => Symbol,
      :form => Integer,
      :real_name => String,
      :real_form_name => String,
      :real_category => String,
      :real_pokedex_entry => String,
      :pokedex_form => String,
      :types => Array[Symbol],
      :base_stats => Hash[Symbol, Integer],
      :evs => Hash[Symbol, Integer],
      :base_exp => Integer,
      :growth_rate => Symbol,
      :gender_ratio => Symbol,
      :catch_rate => Integer,
      :happiness => Integer,
      :moves => Array[[Integer, Symbol]],
      :tutor_moves => Array[Symbol],
      :egg_moves => Array[Symbol],
      :abilities => Array[Symbol],
      :hidden_abilities => Array[Symbol],
      :wild_item_common => Array[Symbol],
      :wild_item_uncommon => Array[Symbol],
      :wild_item_rare => Array[Symbol],
      :egg_groups => Array[Symbol],
      :hatch_steps => Integer,
      :incense => Symbol,
      :offspring => Array[Symbol],
      :evolutions => Array[[Symbol, Symbol, Integer | Symbol]],
      :height => Numeric,
      :weight => Numeric,
      :color => Symbol,
      :shape => Symbol,
      :habitat => Symbol,
      :generation => Integer,
      :flags => Array[String],
      :mega_stone => Symbol,
      :mega_move => Symbol,
      :unmega_form => Integer,
      :mega_message => Integer,
      :pbs_file_suffix => String,
      }
    DATA: Hash[Symbol, Species]
    DATA_FILENAME: String
    PBS_BASE_FILENAME: [String, String]

    extend ClassMethodsSymbols[schema, Species]
    include InstanceMethods[Symbol, Species]

    attr_reader id: Symbol
    attr_reader species: Symbol
    attr_reader form: Integer
    attr_reader real_name: String
    attr_reader real_form_name: String
    attr_reader real_category: String
    attr_reader real_pokedex_entry: String
    attr_reader pokedex_form: Integer
    attr_reader types: Array[Symbol]
    attr_reader base_stats: Hash[Symbol, Integer]
    attr_reader evs: Hash[Symbol, Integer]
    attr_reader base_exp: Integer
    attr_reader growth_rate: Symbol
    attr_reader gender_ratio: Symbol
    attr_reader catch_rate: Integer
    attr_reader happiness: Integer
    attr_reader moves: Array[[Integer, Symbol]]
    attr_reader tutor_moves: Array[Symbol]
    attr_reader egg_moves: Array[Symbol]
    attr_reader abilities: Array[Symbol]
    attr_reader hidden_abilities: Array[Symbol]
    attr_reader wild_item_common: Array[Symbol]
    attr_reader wild_item_uncommon: Array[Symbol]
    attr_reader wild_item_rare: Array[Symbol]
    attr_reader egg_groups: Array[Symbol]
    attr_reader hatch_steps: Integer
    attr_reader incense: Symbol
    attr_reader offspring: Array[Symbol]
    attr_reader evolutions: Array[[Symbol, Symbol, Integer | Symbol]]
    attr_reader height: Numeric
    attr_reader weight: Numeric
    attr_reader color: Symbol
    attr_reader shape: Symbol
    attr_reader habitat: Symbol
    attr_reader generation: Integer
    attr_reader flags: Array[String]
    attr_reader mega_stone: Symbol
    attr_reader mega_move: Symbol
    attr_reader unmega_form: Integer
    attr_reader mega_message: Integer
    attr_reader pbs_file_suffix: String
    def self.schema: (?bool compiling_forms) -> (Hash[String, [Symbol, String]])
    def self.editor_properties: [T < Array[[String, untyped, String]]] -> T
    def self.get_species_form: (Symbol | String | Species species, Integer form) -> Species?
    def self.each_species: ?{ (Species) -> Integer } -> Hash[untyped, untyped]
    def self.species_count: -> Integer
    def initialize: (schema hash) -> void
    def name: -> String
    def form_name: -> String
    def category: -> String
    def pokedex_entry: -> String
    def default_form: -> Integer
    def base_form: -> Integer
    def single_gendered?: -> bool
    def base_stat_total: -> bool
    def has_flag?: (String flag) -> bool
    def apply_metrics_to_sprite: (Sprite sprite, Integer index, ?bool shadow) -> untyped
    def shows_shadow?: -> bool
    def get_evolutions: (?bool exclude_invalid) -> Array[[Symbol, Symbol, Integer | Symbol]]
    def get_family_evolutions: (?bool exclude_invalid) -> Array[[Symbol, Symbol, Integer | Symbol]]
    def get_previous_species: -> Symbol
    def get_baby_species: (?bool check_items, ?Symbol? item1, ?Symbol? item2) -> Symbol
    def get_family_species: -> Array[Symbol]
    def breeding_can_produce?: (Symbol other_species) -> bool
    def get_egg_moves: -> Array[Symbol]
    def family_evolutions_have_method?: (Symbol | Array[Symbol] check_method, ?untyped | Array[untyped]? check_param) -> bool
    def family_item_evolutions_use_item?: (?Symbol? check_item) -> bool
    def minimum_level: -> Integer

    alias __orig__get_property_for_PBS get_property_for_PBS
  end
end

