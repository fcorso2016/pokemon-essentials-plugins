# TypeProf 0.21.3

# Classes
module GameData
  class Move
    type schema = {
      :id => Symbol,
      :real_name => String,
      :type => Symbol,
      :category => Integer,
      :power => Integer,
      :accuracy => Integer,
      :total_pp => Integer,
      :target => Symbol,
      :priority => Integer,
      :function_code => String,
      :flags => String | Array[String],
      :effect_chance => Integer,
      :real_description => String,
      :pbs_file_suffix => String
      }
    DATA: Hash[Symbol, Move]
    DATA_FILENAME: String
    PBS_BASE_FILENAME: String
    SCHEMA: Hash[String, [Symbol, String, (Symbol | Array[String])]]

    extend ClassMethodsSymbols[schema]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader real_name: String
    attr_reader type: Symbol
    attr_reader category: Integer
    attr_reader power: Integer
    attr_reader accuracy: Integer
    attr_reader total_pp: Integer
    attr_reader target: Symbol
    attr_reader priority: Integer
    attr_reader function_code: String
    attr_reader flags: Array[String]
    attr_reader effect_chance: Integer
    attr_reader real_description: String
    attr_reader pbs_file_suffix: String
    def initialize: (schema hash) -> void
    def base_damage: -> Integer
    def name: -> String
    def description: -> String
    def has_flag?: (String flag) -> bool
    def physical?: -> bool
    def special?: -> bool
    def damaging?: -> bool
    def status?: -> bool
    def hidden_move?: -> bool
    def display_type: (Pokemon pkmn, ?Pokemon::Move? move) -> Symbol
    def display_damage: (Pokemon pkmn, ?Pokemon::Move? move) -> Integer
    def display_category: (Pokemon pkmn, ?Pokemon::Move? move) -> Integer
    def display_accuracy: (Pokemon pkmn, ?Pokemon::Move? move) -> Integer

    alias __orig__get_property_for_PBS get_property_for_PBS
  end
end



