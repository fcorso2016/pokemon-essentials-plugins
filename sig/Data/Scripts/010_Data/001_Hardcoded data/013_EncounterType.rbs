# TypeProf 0.21.3

# Classes
module GameData
  class EncounterType
    type type_enum = :land | :cave | :water | :fishing | :contest | :none
    type schema = {
        :id => Symbol,
        :type => type_enum,
        :trigger_chance => Integer
      }
    DATA: Hash[Symbol, EncounterType]

    extend ClassMethodsSymbols[schema, EncounterType]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader real_name: String
    attr_reader type: type_enum
    attr_reader trigger_chance: Integer
    def self.load: -> void
    def self.save: -> void
    def initialize: (schema hash) -> void
    alias name real_name
  end
end



