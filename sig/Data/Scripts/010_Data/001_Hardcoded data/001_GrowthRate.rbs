# TypeProf 0.21.3

# Classes
module GameData
  class GrowthRate
    type schema = {:id => Symbol, :name => String, :exp_values => Array[Integer], :exp_formula => ^(Integer) -> Integer }
    DATA: Hash[Symbol, GrowthRate]

    extend ClassMethodsSymbols[schema, GrowthRate]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader real_name: String
    attr_reader exp_values: Array[Integer]
    attr_reader exp_formula: ^(Integer) -> Integer
    def self.load: -> void
    def self.save: -> void
    def self.max_level: -> Integer
    def initialize: (schema hash) -> void
    def name: -> String
    def minimum_exp_for_level: (Integer level) -> Integer
    def maximum_exp: -> Integer
    def add_exp: (Integer exp1, Integer exp2) -> void
    def level_from_exp: (Integer exp) -> Integer
  end
end



