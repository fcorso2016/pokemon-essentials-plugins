# TypeProf 0.21.3

# Classes
module GameData
  class Stat
    type type_enum = :none | :main_battle | :battle
    type schema = {
        :id => Symbol,
        :name => String,
        :name_brief => String,
        :type => type_enum,
        :pbs_order => Integer
      }
    DATA: Hash[Symbol, Stat]

    extend ClassMethodsSymbols[schema]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader real_name: String
    attr_reader real_name_brief: String
    attr_reader type: type_enum
    attr_reader pbs_order: Integer
    def self.load: -> void
    def self.save: -> void
    def self.each_main: {(Stat) -> void } -> void
    def self.each_main_battle: {(Stat) -> void } -> void
    def self.each_battle: {(Stat) -> void } -> void
    def initialize: (schema hash) -> void
    def name: -> String
    def name_brief: -> String
  end
end



