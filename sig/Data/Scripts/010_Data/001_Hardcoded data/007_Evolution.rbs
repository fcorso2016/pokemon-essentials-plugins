# TypeProf 0.21.3

# Classes
class Object
  private
  def pbEvolutionEvent: (untyped number) -> nil
end

module GameData
  class Evolution
    type schema = {
        :id => Symbol,
        :parameter => class,
        :any_level_up => bool,
        :level_up_proc => ^(Pokemon, untyped) -> bool,
        :use_item_proc => ^(Pokemon, untyped) -> bool,
        :on_trade_proc => ^(Pokemon, untyped, Pokemon) -> bool,
        :after_battle_proc => ^(Pokemon, Integer, untyped) -> bool,
        :event_proc => ^(Pokemon, untyped, untyped) -> bool,
        :after_evolution_proc => ^(Pokemon, Species, untyped, Species) -> bool,
      }
    DATA: Hash[Symbol, Evolution]

    extend ClassMethodsSymbols[schema]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader real_name: String
    attr_reader parameter: Class
    attr_reader any_level_up: bool
    attr_reader level_up_proc: ^(Pokemon, untyped) -> bool
    attr_reader use_item_proc: ^(Pokemon, untyped) -> bool
    attr_reader on_trade_proc: ^(Pokemon, untyped, Pokemon) -> bool
    attr_reader after_battle_proc: ^(Pokemon, Integer, untyped) -> bool
    attr_reader event_proc: ^(Pokemon, untyped, untyped) -> bool
    attr_reader after_evolution_proc: ^(Pokemon, Species, untyped, Species) -> bool
    def self.load: -> void
    def self.save: -> void
    def initialize: (schema hash) -> void
    alias name real_name
    def call_level_up: [T] (Pokemon pkmn, T param) -> bool?
    def call_use_item: [T] (Pokemon pkmn, T param) -> bool?
    def call_on_trade: [T] (Pokemon pkmn, T param, Pokemon other) -> bool?
    def call_after_battle: [T] (Pokemon pkmn, Integer index, T param) -> bool?
    def call_event: [T, V] (Pokemon pkmn, T param, V value) -> bool?
    def call_after_evolution: [T] (Pokemon pkmn, Species new_species, T param, Species evo_species) -> bool?
  end
end



