# TypeProf 0.21.3

# Classes
module GameData
  class Weather
    type category_enum = :None | :Rain |  :Hail | :Sandstorm | :Sun | :Fog
    type schema = {
        :id => Symbol,
        :id_number => Integer,
        :category => category_enum,
        :graphics => [Array[String]?, Array[String]?],
        :particle_delta_x => Integer,
        :particle_delta_y => Integer,
        :particle_delta_opacity => Integer,
        :tile_delta_x => Integer,
        :tile_delta_y => Integer,
        :tone_proc => ^(Numeric) -> Tone
      }
    DATA: Hash[Symbol, Weather]

    extend ClassMethods[schema, Weather]
    include InstanceMethods

    attr_reader id: Symbol
    attr_reader id_number: Integer
    attr_reader real_name: String
    attr_reader category: category_enum
    attr_reader graphics: [Array[String], Array[String]]
    attr_reader particle_delta_x: Integer
    attr_reader particle_delta_y: Integer
    attr_reader particle_delta_opacity: Integer
    attr_reader tile_delta_x: Integer
    attr_reader tile_delta_y: Integer
    attr_reader tone_proc: ^(Numeric) -> Tone
    def self.load: -> void
    def self.save: -> void
    def initialize: (schema hash) -> void
    alias name real_name
    def has_particles?: -> bool
    def has_tiles?: -> bool
    def tone: (Numeric strength) -> Tone
  end
end



