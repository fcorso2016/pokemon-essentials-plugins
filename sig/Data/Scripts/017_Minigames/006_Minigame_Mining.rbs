# ==============================================================================
# "Mining" mini-game
# By Maruno
# ------------------------------------------------------------------------------
# Run with:      pbMiningGame
# ==============================================================================
class MiningGameCounter < BitmapSprite
  @image: AnimatedBitmap

  attr_accessor hits: Integer

  def initialize: (Integer x, Integer y, Viewport viewport) -> void
end

# ==============================================================================
#
# ==============================================================================
class MiningGameTile < BitmapSprite
  @image: AnimatedBitmap

  attr_reader layer: Integer

  def initialize: (Viewport viewport) -> void

  def layer=: (Integer value) -> void
end

# ==============================================================================
#
# ==============================================================================
class MiningGameCursor < BitmapSprite
  @cursorbitmap: AnimatedBitmap
  @hit: Integer

  @hit_timer_start: number
  @hitsbitmap: AnimatedBitmap
  @toolbitmap: AnimatedBitmap

  attr_accessor position: untyped

  attr_accessor mode: untyped

  HIT_FRAME_DURATION: number

  TOOL_POSITIONS: Array[Array[Integer]]

  # mode: 0=pick, 1=hammer.
  def initialize: (Integer position, Integer mode, untyped viewport) -> void

  def animate: (Integer hit) -> void

  def isAnimating?: () -> bool
end

# ==============================================================================
#
# ==============================================================================
class MiningGameScene
  include _PokeScene
  include _Updatable

  BOARD_WIDTH: Integer

  BOARD_HEIGHT: Integer

  ITEMS: Array[[Symbol, Integer, Integer, Integer, Integer, Integer, Array[Integer]]]

  IRON: Array[[Integer, Integer, Integer, Integer, Array[Integer]]]

  @iron: Array[[Integer, Integer, Integer]]
  @ironbitmap: AnimatedBitmap
  @itembitmap: AnimatedBitmap
  @items: Array[[Integer, Integer, Integer]]
  @itemswon: Array[Symbol]
  @sprites: Hash[String, _Visualizable]

  @viewport: Viewport

  def pbStartScene: () -> void

  def pbDistributeItems: () -> void

  def pbDistributeIron: () -> void

  def pbNoDuplicateItems: (Symbol newitem) -> bool

  def pbCheckOverlaps: (bool checkiron, Integer provx, Integer provy, Integer provwidth, Integer provheight, Array[Integer] provpattern) -> bool

  def pbHit: () -> void

  def pbIsItemThere?: (Integer position) -> bool

  def pbIsIronThere?: (Integer position) -> bool

  def pbCheckRevealed: () -> Array[Integer]

  def pbFlashItems: (Array[Integer] revealed) -> void

  def pbMain: () -> void

  def pbGiveItems: () -> void
end

# ==============================================================================
#
# ==============================================================================
class MiningGame
  include _PokeScreen

  @scene: MiningGameScene

  def initialize: (MiningGameScene scene) -> void

  def pbStartScreen: () -> void
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbMiningGame: () -> void
end

