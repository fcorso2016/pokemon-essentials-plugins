# ==============================================================================
# "Triple Triad" mini-game
# By Unknown
# ==============================================================================
# ==============================================================================
# Card class
# ==============================================================================
class TriadCard
  attr_reader species: untyped

  attr_reader form: untyped

  attr_reader north: untyped

  attr_reader east: untyped

  attr_reader south: untyped

  attr_reader west: untyped

  attr_reader type: untyped

  def initialize: (untyped species, ?::Integer form) -> void

  def baseStatToValue: (untyped stat) -> (10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1)

  def attack: (untyped panel) -> untyped

  def defense: (untyped panel) -> untyped

  def bonus: (untyped opponent) -> (-2 | -1 | 1 | 0)

  def price: () -> untyped

  def self.createBack: (?untyped? `type`, ?bool noback) -> untyped

  def createBitmap: (untyped owner) -> untyped
end

# ==============================================================================
# Duel screen visuals
# ==============================================================================
class TriadSquare
  attr_accessor owner: untyped

  attr_accessor card: untyped

  attr_accessor type: untyped

  def initialize: () -> void

  def attack: (untyped panel) -> untyped

  def bonus: (untyped square) -> untyped

  def defense: (untyped panel) -> untyped
end

# ==============================================================================
# Scene class for handling appearance of the screen
# ==============================================================================
class TriadScene
  def pbStartScene: (untyped battle) -> untyped

  def pbEndScene: () -> untyped

  def pbDisplay: (untyped text) -> untyped

  def pbDisplayPaused: (untyped text) -> untyped

  def pbNotifyCards: (untyped playerCards, untyped opponentCards) -> untyped

  def pbChooseTriadCard: (untyped cardStorage) -> untyped

  def pbShowPlayerCards: (untyped cards) -> untyped

  def pbShowOpponentCards: (untyped cards) -> untyped

  def pbViewOpponentCards: (untyped numCards) -> untyped

  def pbPlayerChooseCard: (untyped numCards) -> untyped

  def pbPlayerPlaceCard: (untyped cardIndex) -> (nil | ::Array[untyped])

  def pbEndPlaceCard: (untyped position, untyped cardIndex) -> untyped

  def pbOpponentPlaceCard: (untyped triadCard, untyped position, untyped cardIndex) -> untyped

  def pbEndOpponentPlaceCard: (untyped position, untyped cardIndex) -> untyped

  def pbRefresh: () -> untyped

  def pbUpdateScore: () -> untyped

  def pbUpdate: () -> untyped
end

# ==============================================================================
# Duel screen logic
# ==============================================================================
class TriadScreen
  attr_accessor openHand: untyped

  attr_accessor countUnplayedCards: untyped

  attr_reader width: untyped

  attr_reader height: untyped

  attr_reader board: untyped

  attr_reader playerName: untyped

  attr_reader opponentName: untyped

  def initialize: (untyped scene) -> void

  def maxCards: () -> untyped

  def isOccupied?: (untyped x, untyped y) -> untyped

  def getOwner: (untyped x, untyped y) -> untyped

  def getPanel: (untyped x, untyped y) -> untyped

  def quantity: (untyped items, untyped item) -> untyped

  def pbAdd: (untyped items, untyped item) -> untyped

  def pbSubtract: (untyped items, untyped item) -> untyped

  def flipBoard: (untyped x, untyped y, ?untyped? attackerParam, ?bool recurse) -> (nil | untyped)

  # If pbStartScreen includes parameters, it should
  # pass the parameters to pbStartScene.
  def pbStartScreen: (untyped opponentName, untyped minLevel, untyped maxLevel, ?untyped? rules, ?untyped? oppdeck, ?untyped? prize) -> (0 | untyped)
end

# ==============================================================================
# Card storage
# ==============================================================================
class PokemonGlobalMetadata
  attr_writer triads: untyped

  MINIMUM_TRIAD_CARDS: 5

  def triads: () -> untyped
end

# ==============================================================================
#
# ==============================================================================
class TriadStorage
  attr_reader items: untyped

  MAX_PER_SLOT: 999

  def initialize: () -> void

  def []: (untyped i) -> untyped

  def length: () -> untyped

  def empty?: () -> untyped

  def maxSize: () -> untyped

  def clear: () -> untyped

  def get_item: (untyped index) -> (nil | untyped)

  # Number of the item in the given index
  def get_item_count: (untyped index) -> (0 | untyped)

  def quantity: (untyped item) -> untyped

  def can_add?: (untyped item, ?::Integer qty) -> untyped

  def add: (untyped item, ?::Integer qty) -> untyped

  def remove: (untyped item, ?::Integer qty) -> untyped

  def total_cards: () -> untyped
end

class Object
  # ==============================================================================
  # Start duel
  # ==============================================================================
  def pbCanTriadDuel?: () -> untyped

  def pbTriadDuel: (untyped name, untyped minLevel, untyped maxLevel, ?untyped? rules, ?untyped? oppdeck, ?untyped? prize) -> untyped

  # ==============================================================================
  # Card shop screen
  # ==============================================================================
  def pbBuyTriads: () -> (nil | untyped)

  def pbSellTriads: () -> (nil | untyped)

  def pbTriadList: () -> (nil | untyped)

  # ==============================================================================
  # Give the player a particular card
  # ==============================================================================
  def pbGiveTriadCard: (untyped species, ?::Integer quantity) -> bool
end


