# ==============================================================================
# The Bag object, which actually contains all the items.
# ==============================================================================
class PokemonBag
  attr_reader pockets: Array[Array[[Symbol, Integer]]]

  attr_accessor last_viewed_pocket: Integer

  attr_accessor last_pocket_selections: Array[Integer]

  attr_reader registered_items: Array[Symbol]

  attr_reader ready_menu_selection: [Integer, Integer, Integer]

  def self.pocket_names: () -> Array[String]

  def self.pocket_count: () -> Integer

  def initialize: () -> void

  def reset_last_selections: () -> void

  def clear: () -> void

  # Gets the index of the current selected item in the pocket
  def last_viewed_index: (Integer pocket) -> Integer

  # Sets the index of the current selected item in the pocket
  def set_last_viewed_index: (Integer pocket, Integer value) -> void

  def quantity: (Symbol | String | GameData::Item item) -> Integer

  def has?: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  alias can_remove? has?

  def can_add?: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  def add: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  # Adds qty number of item. Doesn't add anything if it can't add all of them.
  def add_all: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  # Deletes as many of item as possible (up to qty), and returns whether it
  # managed to delete qty of them.
  def remove: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  # Deletes qty number of item. Doesn't delete anything if there are less than
  # qty of the item in the Bag.
  def remove_all: (Symbol | String | GameData::Item item, ?Integer qty) -> bool

  # This only works if the old and new items are in the same pocket. Used for
  # switching on/off certain Key Items. Replaces all old_item in its pocket with
  # new_item.
  def replace_item: (Symbol | String | GameData::Item old_item, Symbol | String | GameData::Item new_item) -> bool

  # Returns whether item has been registered for quick access in the Ready Menu.
  def registered?: (Symbol | String | GameData::Item item) -> bool

  # Registers the item in the Ready Menu.
  def register: (Symbol item) -> void

  # Unregisters the item from the Ready Menu.
  def unregister: (Symbol item) -> void

  private

  def max_pocket_size: (Integer pocket) -> Integer
end

# ==============================================================================
# The PC item storage object, which actually contains all the items
# ==============================================================================
class PCItemStorage
  attr_reader items: Array[[Symbol, Integer]]

  MAX_SIZE: 999

  MAX_PER_SLOT: 999

  def initialize: () -> void

  def []: (Integer i) -> [Symbol, Integer]

  def length: () -> Integer

  def empty?: () -> bool

  def clear: () -> void

  # Unused
  def get_item: (Integer index) -> Symbol?

  # Number of the item in the given index
  # Unused
  def get_item_count: (Integer index) -> Integer

  def quantity: (Symbol item) -> Integer

  def can_add?: (Symbol item, ?Integer qty) -> bool

  def add: (Symbol item, ?Integer qty) -> bool

  def remove: (Symbol item, ?Integer qty) -> bool
end

# ==============================================================================
# Implements methods that act on arrays of items.  Each element in an item
# array is itself an array of [itemID, itemCount].
# Used by the Bag, PC item storage, and Triple Triad.
# ==============================================================================
module ItemStorageHelper
  # Returns the quantity of item in items
  def self.quantity: (Array[[Symbol, Integer]] items, Symbol item) -> Integer

  def self.can_add?: (Array[[Symbol, Integer]]  items, Integer max_slots, Integer max_per_slot, Symbol item, Integer qty) -> bool

  def self.add: (Array[[Symbol, Integer]]  items, Integer max_slots, Integer max_per_slot, Symbol item, Integer qty) -> bool
  # Deletes an item (items array, max. size per slot, item, no. of items to delete)
  def self.remove: (Array[[Symbol, Integer]]  items, Symbol item, Integer qty) -> bool
end


