# ==============================================================================
#
# ==============================================================================
class Phone
  attr_accessor contacts: Array[Contact]

  attr_accessor rematch_variant: Integer

  attr_accessor rematches_enabled: bool

  attr_accessor time_to_next_call: Numeric

  attr_accessor last_refresh_time: Numeric

  def initialize: () -> void

  # Returns a visible contact only.
  def get: (bool trainer, String name) -> Contact |
    (bool trainer, Symbol trainer_type, String name, ?Integer version) -> Contact

  def get_version: (Symbol trainer_type, String name, ?Integer start_version) -> (0 | untyped)

  # Trainer type, name[, start_version]
  # Name
  def can_add?: (String name) -> bool |
    (Symbol trainer_type, String name, ?Integer start_version) -> bool

  # Event, trainer type, name, versions_count = 1, start_version = 0, common event ID = 0
  # Map ID, event ID, trainer type, name, versions_count = 1, start_version = 0, common event ID = 0
  # Map ID, name, common event ID
  def add: (Game_Event event, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, Integer event_id, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, String name, Integer common_event_id) -> bool

  # Rearranges the list of phone contacts to put all visible contacts first,
  # followed by all invisible contacts.
  def sort_contacts: () -> void

  # Checks once every second.
  def refresh_ready_trainers: () -> void

  def reset_after_win: (Symbol trainer_type, String name, ?Integer start_version) -> void

  def self.rematch_variant: () -> Integer

  def self.rematch_variant=: (Integer value) -> Integer

  def self.rematches_enabled: () -> bool

  def self.rematches_enabled=: (bool value) -> bool

  def self.get_trainer: (Symbol trainer_type, String name, ?Integer version) -> Contact

  def self.can_add?: (String name) -> bool |
    (Symbol trainer_type, String name, ?Integer start_version) -> bool

  def self.add: (Game_Event event, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, Integer event_id, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, String name, Integer common_event_id) -> bool

  def self.add_silent: (Game_Event event, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, Integer event_id, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version, ?Integer common_event_id) -> bool |
    (Integer map_id, String name, Integer common_event_id) -> bool

  def self.variant: (Symbol trainer_type, String name, ?Integer start_version) -> Integer

  def self.increment_version: (Symbol trainer_type, String name, ?Integer start_version) -> void

  def self.battle: (Symbol trainer_type, String name, ?Integer start_version) -> bool

  def self.reset_after_win: (Symbol trainer_type, String name, ?Integer start_version) -> void
end

# ==============================================================================
#
# ==============================================================================
class Phone
  class Contact
    attr_accessor map_id: Integer

    attr_accessor event_id: Integer?

    attr_accessor name: String

    attr_accessor trainer_type: Symbol?

    attr_accessor start_version: Integer?

    attr_accessor versions_count: Integer?

    attr_accessor version: Integer?

    attr_accessor time_to_ready: Numeric?

    attr_accessor rematch_flag: Integer?

    attr_accessor common_event_id: Integer

    attr_reader visible: bool

    # Map ID, event ID, trainer type, name, versions count = 1, start version = 0
    # Map ID, name, common event ID
    def initialize: (true trainer, Integer map_id, Integer event_id, Symbol trainer_type, String name, ?Integer version_count, ?Integer start_version) -> void |
      (false trainer, Integer map_id, String name, Integer common_event_id) -> bool

    def trainer?: () -> bool

    def visible?: () -> bool

    def visible=: (bool value) -> void

    def can_hide?: () -> bool

    def common_event_call?: () -> bool

    def can_rematch?: () -> bool

    def display_name: () -> String

    # Original battle is 0, first rematch is 1, etc.
    def variant: () -> Integer

    # Returns the version of this trainer to be battled next.
    def next_version: () -> Integer

    def increment_version: () -> void

    def set_trainer_event_ready_for_rematch: () -> void
  end
end

# ==============================================================================
#
# ==============================================================================
class Phone
  module Call
    def self?.can_make?: () -> bool

    # For the player initiating the call.
    def self?.can_call_contact?: (Contact contact) -> bool

    # Get a random trainer contact from the region the player is currently in,
    # but is not in the same map as the player.
    def self?.get_random_trainer_for_incoming_call: () -> Contact?

    def self?.make_incoming: () -> void

    # Phone::Contact
    # Trainer type, name[, start_version]
    # Name (for non-trainers)
    def self?.make_outgoing: (Contact contact) -> void |
      (Symbol trainer_type, String name, ?Integer start_version) -> void |
      (String name) -> void

    def self?.start_message: (?Contact? contact) -> void

    def self?.play: (String dialogue, Contact contact) -> void

    def self?.end_message: (?Contact? contact) -> void

    def self?.generate_trainer_dialogue: (Contact contact) -> String

    def self?.get_random_contact_pokemon_species: (Contact contact) -> String

    def self?.get_random_encounter_species: (Contact contact) -> String?

    def self?.get_map_name: (Contact contact) -> String
  end
end

class Object
  # ==============================================================================
  # Deprecated.
  # ==============================================================================
  # Called by events. Make your event look like this instead:
  #
  # @>Conditional Branch: Phone.can_add?(trainer_type, name, start_version)
  #   @>Text: Let me register you.
  #   @>Show Choices: Yes, No
  #    : When [Yes]
  #     @>Conditional Branch: Phone.add(get_self, trainer_type, name, start_version, versions_count)
  #       @>Text: Thanks! (optional)
  #       @>
  #     : Branch End
  #    : When [No]
  #       @>Text: Oh, okay then. (optional)
  #       @>
  #    : Branch End
  #  : Branch End
  # @>
  #
  # @deprecated This method is slated to be removed in v22.
  def pbPhoneRegisterBattle: (String message, Game_Event event, Symbol trainer_type, String name, Integer versions_count) -> bool

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneRegister: (Game_Event event, Symbol trainer_type, String name) -> void

  # Called by events.
  # @deprecated This method is slated to be removed in v22.
  def pbPhoneRegisterNPC: (Integer common_event_id, String name, Integer map_id, ?bool show_message) -> void

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneDeleteContact: (Integer index) -> void

  # @deprecated This method is slated to be removed in v22.
  def pbFindPhoneTrainer: (Symbol trainer_type, String name) -> Phone::Contact

  # @deprecated This method is slated to be removed in v22.
  def pbHasPhoneTrainer?: (Symbol trainer_type, String name) -> bool

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneReadyToBattle?: (Symbol trainer_type, String name) -> bool

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneReset: (untyped tr_type, untyped tr_name) -> void

  # Called by events.
  # @deprecated This method is slated to be removed in v22.
  def pbPhoneBattleCount: (Symbol trainer_type, String name) -> Integer

  # Called by events.
  # @deprecated This method is slated to be removed in v22.
  def pbPhoneIncrement: (Symbol trainer_type, String name, Integer versions_count) -> void

  # Used in phone calls that say they're ready for a rematch, used in Debug function.
  # @deprecated This method is slated to be removed in v22.
  def pbSetReadyToBattle: (Phone::Contact contact) -> void

  # @deprecated This method is slated to be removed in v22.
  def pbRandomPhoneTrainer: () -> Phone::Contact

  # @deprecated This method is slated to be removed in v22.
  def pbCallTrainer: (Symbol trainer_type, String name) -> void

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneGenerateCall: (Phone::Contact contact) -> String

  # @deprecated This method is slated to be removed in v22.
  def pbPhoneCall: (String dialogue, Phone::Contact contact) -> void

  # @deprecated This method is slated to be removed in v22.
  def pbEncounterSpecies: (Phone::Contact contact) -> String

  # @deprecated This method is slated to be removed in v22.
  def pbTrainerSpecies: (Phone::Contact contact) -> String

  # @deprecated This method is slated to be removed in v22.
  def pbTrainerMapName: (Phone::Contact contact) -> String
end



