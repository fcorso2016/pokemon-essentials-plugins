# ==============================================================================
# ItemHandlers
# ==============================================================================
module ItemHandlers
  UseText: ItemHandlerHash[^(Symbol | GameData::Item) -> String]

  UseFromBag: ItemHandlerHash[^(Symbol | GameData::Item) -> void]

  ConfirmUseInField: ItemHandlerHash[^(Symbol | GameData::Item) -> boolish]

  UseInField: ItemHandlerHash[^(Symbol | GameData::Item) -> boolish]

  UseOnPokemon: ItemHandlerHash[^(Symbol | GameData::Item, Integer, Pokemon, _Scene) -> boolish]

  UseOnPokemonMaximum: ItemHandlerHash[^(Symbol | GameData::Item, Integer, Pokemon, _Scene) -> Integer]

  CanUseInBattle: ItemHandlerHash[^(Symbol, Pokemon, Battle::Battler, Integer, bool, Battle, _Scene, bool) -> boolish]

  UseInBattle: ItemHandlerHash[^(Symbol, Battle::Battler, Battle) -> void]

  BattleUseOnBattler: ItemHandlerHash[^(Symbol, Battle::Battler, _Scene) -> void]

  BattleUseOnPokemon: ItemHandlerHash[^(Symbol, Pokemon, Battle::Battler, [Symbol, Integer, Battle::Move, Integer], _Scene) -> void]

  def self.hasUseText: (Symbol item) -> bool

  # Shows "Use" option in Bag.
  def self.hasOutHandler: (Symbol item) -> bool

  # Shows "Register" option in Bag.
  def self.hasUseInFieldHandler: (Symbol item) -> bool

  def self.hasUseOnPokemon: (Symbol item) -> bool

  def self.hasUseOnPokemonMaximum: (Symbol item) -> bool

  def self.hasUseInBattle: (Symbol item) -> bool

  def self.hasBattleUseOnBattler: (Symbol item) -> bool

  def self.hasBattleUseOnPokemon: (Symbol item) -> bool

  # Returns text to display instead of "Use"
  def self.getUseText: (Symbol item) -> bool

  # Return value:
  # 0 - Item not used
  # 1 - Item used, don't end screen
  # 2 - Item used, end screen
  def self.triggerUseFromBag: (Symbol item) -> Integer

  # Returns whether item can be used
  def self.triggerConfirmUseInField: (Symbol item) -> bool

  # Return value:
  # -1 - Item effect not found
  # 0  - Item not used
  # 1  - Item used
  def self.triggerUseInField: (Symbol item) -> Integer

  # Returns whether item was used
  def self.triggerUseOnPokemon: (Symbol item, Integer qty, Pokemon pkmn, _Scene scene) -> bool

  # Returns the maximum number of the item that can be used on the PokÃƒÂ©mon at once.
  def self.triggerUseOnPokemonMaximum: (Symbol item, Pokemon pkmn) -> Integer

  def self.triggerCanUseInBattle: (Symbol item, Pokemon pkmn, Battle::Battler battler, Integer move, bool firstAction, Battle battle, _Scene scene, ?bool showMessages) -> bool

  def self.triggerUseInBattle: (Symbol item, Battle::Battler battler, Battle battle) -> void

  # Returns whether item was used
  def self.triggerBattleUseOnBattler: (Symbol item, Battle::Battler battler, _Scene scene) -> bool

  # Returns whether item was used
  def self.triggerBattleUseOnPokemon: (Symbol item, Pokemon pkmn, Battle::Battler battler, [Symbol, Integer, Battle::Move, Integer] choices, _Scene scene) -> bool
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbCanRegisterItem?: (Symbol item) -> bool

  def pbCanUseOnPokemon?: (Symbol item) -> bool

  # ==============================================================================
  # Change a PokÃƒÂ©mon's level
  # ==============================================================================
  def pbChangeLevel: (Pokemon pkmn, Integer new_level, _Scene scene) -> void

  def pbTopRightWindow: (String text, ?_Scene? scene) -> void

  def pbChangeExp: (Pokemon pkmn, Integer new_exp, _Scene scene) -> void

  def pbGainExpFromExpCandy: (Pokemon pkmn, Integer base_amt, Integer qty, _Scene scene) -> bool

  # ==============================================================================
  # Restore HP
  # ==============================================================================
  def pbItemRestoreHP: (Pokemon pkmn, Integer restoreHP) -> Integer

  def pbHPItem: (Pokemon pkmn, Integer restoreHP, _Scene scene) -> bool

  def pbBattleHPItem: (Pokemon pkmn, Battle::Battler battler, Integer restoreHP, _Scene scene) -> bool

  # ==============================================================================
  # Restore PP
  # ==============================================================================
  def pbRestorePP: (Pokemon pkmn, Integer idxMove, Integer pp) -> Integer

  def pbBattleRestorePP: (Pokemon pkmn, Battle::Battler battler, Integer idxMove, Integer pp) -> void

  # ==============================================================================
  # Change EVs
  # ==============================================================================
  def pbJustRaiseEffortValues: (Pokemon pkmn, Symbol stat, Integer evGain) -> Integer

  def pbRaiseEffortValues: (Pokemon pkmn, Symbol stat, ?Integer evGain, ?bool no_ev_cap) -> Integer

  def pbMaxUsesOfEVRaisingItem: (Symbol stat, Integer amt_per_use, Pokemon pkmn, ?bool no_ev_cap) -> Integer

  def pbUseEVRaisingItem: (Symbol stat, Integer amt_per_use, Integer qty, Pokemon pkmn, String happiness_type, _Scene scene, ?bool no_ev_cap) -> bool

  def pbMaxUsesOfEVLoweringBerry: (Symbol stat, Pokemon pkmn) -> Integer

  def pbRaiseHappinessAndLowerEV: (Pokemon pkmn, _Scene scene, Symbol stat, Integer qty, Array[String] messages) -> bool

  # ==============================================================================
  # Change nature
  # ==============================================================================
  def pbNatureChangingMint: (Symbol new_nature, Symbol item, Pokemon pkmn, _Scene scene) -> bool

  # ==============================================================================
  # Battle items
  # ==============================================================================
  def pbBattleItemCanCureStatus?: (Symbol status, Pokemon pkmn, _Scene scene, bool showMessages) -> bool

  def pbBattleItemCanRaiseStat?: (Symbol stat, Battle::Battler battler, _Scene scene, bool showMessages) -> bool

  # ==============================================================================
  # Decide whether the player is able to ride/dismount their Bicycle
  # ==============================================================================
  def pbBikeCheck: () -> bool

  # ==============================================================================
  # Find the closest hidden item (for Itemfinder)
  # ==============================================================================
  def pbClosestHiddenItem: () -> Game_Event?

  # ==============================================================================
  # Teach and forget a move
  # ==============================================================================
  def pbLearnMove: (Pokemon pkmn, Symbol move, ?bool ignore_if_known, ?bool by_machine) ?{ () -> void } -> bool

  def pbForgetMove: (Pokemon pkmn, Symbol moveToLearn) -> Integer

  # ==============================================================================
  # Use an item from the Bag and/or on a PokÃƒÂ©mon
  # ==============================================================================
  # @return [Integer] 0 = item wasn't used; 1 = item used; 2 = close Bag to use in field
  def pbUseItem: (PokemonBag bag, Symbol item, ?PokemonBag_Scene? bagscene) -> Integer

  # Only called when in the party screen and having chosen an item to be used on
  # the selected PokÃƒÂ©mon
  def pbUseItemOnPokemon: (Symbol item, Pokemon pkmn, _Scene scene) -> bool

  def pbUseKeyItemInField: (Symbol item) -> bool

  def pbUseItemMessage: (Symbol item) -> void

  def pbCheckUseOnPokemon: (Symbol item, Pokemon pkmn, _Screen _screen) -> bool

  # ==============================================================================
  # Give an item to a PokÃƒÂ©mon to hold, and take a held item from a PokÃƒÂ©mon
  # ==============================================================================
  def pbGiveItemToPokemon: (Symbol item, Pokemon pkmn, _Scene scene, ?Integer pkmnid) -> bool

  def pbTakeItemFromPokemon: (Pokemon pkmn, _Scene scene) -> bool

  # ==============================================================================
  # Choose an item from the Bag
  # ==============================================================================
  def pbChooseItem: (?Integer var, *untyped args) -> Symbol?

  def pbChooseApricorn: (?Integer var) -> Symbol?

  def pbChooseFossil: (?Integer var) -> Symbol?

  # Shows a list of items to choose from, with the chosen item's ID being stored
  # in the given Game Variable. Only items which the player has are listed.
  def pbChooseItemFromList: (String message, Integer variable, *Symbol args) -> Symbol?
end



