# TypeProf 0.21.3

# Classes
module SaveData
  def self.register: (Symbol id) -> void
  def self.unregister: (Symbol id) -> void
  def self.valid?: (Hash[Object, Object] save_data) -> bool
  def self.load_values: (Hash[Object, Object] save_data) ?{ (Object) -> void } -> void
  def self.load_all_values: (Hash[Object, Object] save_data) -> void
  def self.mark_values_as_unloaded: -> void
  def self.load_bootup_values: (Hash[Object, Object] save_data) -> void
  def self.initialize_bootup_values: -> void
  def self.load_new_game_values: -> void
  def self.compile_save_hash: -> void

  class InvalidValueError < RuntimeError
  end

  class Value
    @loaded: bool
    @load_in_bootup: bool
    @reset_on_new_game: bool
    @save_proc: Proc
    @ensured_class: untyped
    @load_proc: Proc
    @new_game_value_proc: Proc
    @old_format_get_proc: Proc

    attr_reader id: Symbol
    def initialize: (Symbol id) -> void
    def valid?: (Object value) -> bool
    def load: (Object value) -> void
    def save: -> Object
    def has_new_game_proc?: -> bool
    def load_new_game_value: -> bool
    def load_in_bootup?: -> bool
    def reset_on_new_game: -> void
    def reset_on_new_game?: -> bool
    def loaded?: -> bool
    def mark_as_unloaded: -> void
    def get_from_old_format: ([Hash[Object, Object], Array[Object]] old_format) -> Object?

    private
    def validate_value: (Object value) -> void
    def ensure_class: (Symbol class_name) -> void
    def load_value: -> void
    def save_value: -> void
    def new_game_value: -> void
    def load_in_bootup: -> void
    def from_old_format: -> void
  end
end



