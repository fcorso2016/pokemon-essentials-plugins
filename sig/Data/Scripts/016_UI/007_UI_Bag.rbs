# ==============================================================================
#
# ==============================================================================
class Window_PokemonBag < Window_DrawableCommand
  @adapter: PokemonMartAdapter
  @bag: PokemonBag

  @filterlist: Array[Array[Integer]]

  @swaparrow: AnimatedBitmap

  attr_reader pocket: Integer

  attr_accessor sorting: untyped

  def initialize: (PokemonBag bag, Array[Array[Integer]] filterlist, Integer pocket, Integer x, Integer y, Integer width, Integer height) -> void

  def pocket=: (Integer value) -> void

  def page_row_max: () -> Integer

  def page_item_max: () -> Integer

  def item: () -> Symbol?

  def itemCount: () -> Integer

  def itemRect: (Integer item) -> Rect
end

# ==============================================================================
# Bag visuals
# ==============================================================================
class PokemonBag_Scene
  include _PokeScene
  include _PokeUpdatable
  include _Disposable
  include _PokeRefreshable

  ITEMLISTBASECOLOR: Color

  ITEMLISTSHADOWCOLOR: Color

  ITEMTEXTBASECOLOR: Color

  ITEMTEXTSHADOWCOLOR: Color

  POCKETNAMEBASECOLOR: Color

  POCKETNAMESHADOWCOLOR: Color

  ITEMSVISIBLE: Integer

  @bag: PokemonBag
  @choosing: bool
  @filterlist: Array[Array[Integer]]?
  @filterproc: ^(Symbol) -> boolish
  @oldsprites: Hash[String, _Visualizable]?
  @pocketbitmap: AnimatedBitmap
  @sliderbitmap: AnimatedBitmap
  @sprites: Hash[String, _Visualizable]
  @viewport: Viewport

  def pbStartScene: (PokemonBag bag, ?bool choosing, ?(^(Symbol) -> boolish)? filterproc, ?bool resetpocket) -> void

  def pbFadeOutScene: () -> void

  def pbFadeInScene: () -> void

  def pbDisplay: (String msg, ?bool brief) -> void

  def pbConfirm: (String msg) -> bool

  def pbChooseNumber: (String helptext, Integer maximum, ?Integer initnum) -> Integer

  def pbShowCommands: (String helptext, Array[String] commands, ?Integer index) -> Integer

  def pbRefreshIndexChanged: () -> void

  def pbRefreshFilter: () -> void

  # Called when the item screen wants an item to be chosen from the screen
  def pbChooseItem: () -> Symbol?
end

# ==============================================================================
# Bag mechanics
# ==============================================================================
class PokemonBagScreen
  include _PokeScreen[PokemonBag_Scene]

  @bag: PokemonBag

  @scene: PokemonBag_Scene

  def initialize: (PokemonBag_Scene scene, PokemonBag bag) -> void

  def pbStartScreen: -> void

  def pbDisplay: (String text) -> void

  def pbConfirm: (String text) -> bool

  # UI logic for the item screen for choosing an item.
  def pbChooseItemScreen: (?(^(Symbol) -> boolish)? proc) -> Symbol?

  # UI logic for withdrawing an item in the item storage screen.
  def pbWithdrawItemScreen: () -> void

  # UI logic for depositing an item in the item storage screen.
  def pbDepositItemScreen: () -> void

  # UI logic for tossing an item in the item storage screen.
  def pbTossItemScreen: () -> void
end


