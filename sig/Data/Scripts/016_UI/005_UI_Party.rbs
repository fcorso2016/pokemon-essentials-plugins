# ==============================================================================
# PokÃƒÂ©mon party buttons and menu
# ==============================================================================
class PokemonPartyConfirmCancelSprite < Sprite
  include _Refreshable

  attr_reader selected: bool

  def initialize: (String text, Integer x, Integer y, ?bool narrowbox, ?Viewport? viewport) -> void

  def viewport=: (Viewport? value) -> void

  def x=: (Integer value) -> void

  def y=: (Integer value) -> void

  def color=: (Color value) -> void

  def selected=: (bool value) -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonPartyCancelSprite < PokemonPartyConfirmCancelSprite
  def initialize: (?Viewport? viewport) -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonPartyConfirmSprite < PokemonPartyConfirmCancelSprite
  def initialize: (?Viewport? viewport) -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonPartyCancelSprite2 < PokemonPartyConfirmCancelSprite
  def initialize: (?Viewport? viewport) -> void
end

# ==============================================================================
#
# ==============================================================================
class Window_CommandPokemonColor < Window_CommandPokemon
  @colorKey: Array[Color]

  def initialize: (Array[[String, Color]] commands, ?Integer? width) -> void
end

interface _PokemonPartyPanel
  include _Refreshable

  def x: -> Integer
  def x=: (Integer value) -> void
  def y: -> Integer
  def y=: (Integer value) -> void
  def color: -> Color
  def color=: (Color value) -> void
  def text: -> String?
  def text=: (String? value) -> void
  def selected: () -> bool
  def selected=: (bool value) -> void
  def preselected: () -> bool
  def preselected=: (bool value) -> void
  def switching: () -> bool
  def switching=: (bool value) -> void
end

# ==============================================================================
# Blank party panel
# ==============================================================================
class PokemonPartyBlankPanel < Sprite
  include _PokemonPartyPanel

  @panelbgsprite: AnimatedBitmap

  attr_accessor text: String?

  def initialize: (Pokemon _pokemon, Integer index, ?Viewport? viewport) -> void

end

# ==============================================================================
# PokÃƒÂ©mon party panel
# ==============================================================================
class PokemonPartyPanel < Sprite
  include _PokemonPartyPanel

  @ballsprite: ChangelingSprite
  @helditemsprite: HeldItemIconSprite
  @hpbar: AnimatedBitmap
  @hpbgsprite: ChangelingSprite
  @overlaysprite: BitmapSprite
  @panelbgsprite: ChangelingSprite
  @pkmnsprite: PokemonIconSprite
  @refreshBitmap: bool
  @refreshing: bool

  @statuses: AnimatedBitmap

  attr_reader pokemon: Pokemon

  attr_reader active: bool

  attr_reader selected: bool

  attr_reader preselected: bool

  attr_reader switching: bool

  attr_reader text: String?

  TEXT_BASE_COLOR: Color

  TEXT_SHADOW_COLOR: Color

  HP_BAR_WIDTH: Integer

  STATUS_ICON_WIDTH: Integer

  STATUS_ICON_HEIGHT: Integer

  def initialize: (Pokemon pokemon, Integer index, ?Viewport? viewport) -> void

  def pokemon=: (Pokemon value) -> void

  def preselected=: (bool value) -> void

  def hp: () -> Integer

  def refresh_panel_graphic: () -> void

  def refresh_hp_bar_graphic: () -> void

  def refresh_ball_graphic: () -> void

  def refresh_pokemon_icon: () -> void

  def refresh_held_item_icon: () -> void

  def refresh_overlay_information: () -> void

  def draw_name: () -> void

  def draw_level: () -> void

  def draw_gender: () -> void

  def draw_hp: () -> void

  def draw_status: () -> void

  def draw_shiny_icon: () -> void

  def draw_annotation: () -> void
end

# ==============================================================================
# PokÃƒÂ©mon party visuals
# ==============================================================================
class PokemonParty_Scene
  include _PokeScene
  include _Updatable
  include _PokeRefreshable

  @activecmd: Integer
  @can_access_storage: bool
  @multiselect: bool
  @party: Array[Pokemon]
  @sprites: Hash[String, _Visualizable]

  @viewport: Viewport

  def pbStartScene: (Array[Pokemon] party, String starthelptext, ?Array[String]? annotations, ?bool multiselect, ?bool can_access_storage) -> untyped

  def pbDisplay: (String text) -> void

  def pbDisplayConfirm: (String text) -> void

  def pbShowCommands: (String helptext, Array[[String, Color]] commands, ?Integer index) -> Integer

  def pbChooseNumber: (String helptext, Integer maximum, ?Integer initnum) -> Integer

  def pbSetHelpText: (String helptext) -> void

  def pbHasAnnotations?: () -> bool

  def pbAnnotate: (String? annot) -> void

  def pbSelect: (Integer item) -> void

  def pbPreSelect: (Integer item) -> void

  def pbSwitchBegin: (Integer oldid, Integer newid) -> void

  def pbSwitchEnd: (Integer oldid, Integer newid) -> void

  def pbClearSwitching: () -> void

  def pbSummary: (Integer pkmnid, ?bool inbattle) { () -> void } -> void

  def pbChooseItem: (PokemonBag bag) { () -> void } -> void

  def pbUseItem: (PokemonBag bag, Pokemon pokemon) { () -> void } -> void

  def pbChoosePokemon: (?bool switching, ?Integer initialsel, ?Integer canswitch) -> Integer

  def pbChangeSelection: (button_enum key, Integer currentsel) -> Integer

  def pbHardRefresh: () -> void

  def pbRefreshSingle: (Integer i) -> void
end

# ==============================================================================
# PokÃƒÂ©mon party mechanics
# ==============================================================================
class PokemonPartyScreen
  include _PokeScreen
  include _PokeUpdatable
  include _PokeRefreshable


  attr_reader scene: PokemonParty_Scene

  attr_reader party: Array[Pokemon]

  def initialize: (PokemonParty_Scene scene, Array[Pokemon] party) -> void

  def pbStartScene: (String helptext, Integer | false _numBattlersOut, ?Array[String]? annotations) -> void

  def pbChoosePokemon: (?String? helptext) -> Pokemon

  def pbPokemonGiveScreen: (Symbol | String | GameData::Item item) -> bool

  def pbPokemonGiveMailScreen: (Integer mailIndex) -> bool

  def pbEndScene: -> void

  def pbHardRefresh: () -> void

  def pbRefreshSingle: (Integer i) -> void

  def pbDisplay: (String text) -> void

  def pbConfirm: (String text) -> Integer

  def pbShowCommands: (String helptext, Array[[String, Color]] commands, ?Integer index) -> Integer

  # Checks for identical species.
  # Unused.
  def pbCheckSpecies: (Array[Pokemon] array) -> bool

  # Checks for identical held items.
  # Unused.
  def pbCheckItems: (Array[Pokemon] array) -> bool

  def pbSwitch: (Integer oldid, Integer newid) -> void

  def pbChooseMove: (Pokemon pokemon, Integer helptext, ?::Integer index) -> Integer

  # For after using an evolution stone.
  def pbRefreshAnnotations: (^(Pokemon) -> boolish ableProc) -> void

  def pbClearAnnotations: () -> void

  def pbPokemonMultipleEntryScreenEx: (PokemonRuleSet ruleset) -> Array[Pokemon]?

  def pbChooseAblePokemon: (^(Pokemon) -> boolish ableProc, ?bool allowIneligible) -> Integer

  def pbChooseTradablePokemon: (^(Pokemon) -> boolish ableProc, ?bool allowIneligible) -> Integer

  def pbPokemonScreen: () -> [Pokemon, Symbol]?
end

class Object
  # ==============================================================================
  # Open the party screen
  # ==============================================================================
  def pbPokemonScreen: () -> void

  # ==============================================================================
  # Choose a PokÃƒÂ©mon in the party
  # ==============================================================================
  # Choose a PokÃƒÂ©mon/egg from the party.
  # Stores result in variable _variableNumber_ and the chosen PokÃƒÂ©mon's name in
  # variable _nameVarNumber_; result is -1 if no PokÃƒÂ©mon was chosen
  def pbChoosePokemon: (Integer variableNumber, Integer nameVarNumber, ?(^(Pokemon) -> boolish)? ableProc, ?bool allowIneligible) -> void

  def pbChooseNonEggPokemon: (Integer variableNumber, Integer nameVarNumber) -> void

  def pbChooseAblePokemon: (Integer variableNumber, Integer nameVarNumber) -> void

  # Same as pbChoosePokemon, but prevents choosing an egg or a Shadow PokÃƒÂ©mon.
  def pbChooseTradablePokemon: (Integer variableNumber, Integer nameVarNumber, ?(^(Pokemon) -> boolish)? ableProc, ?bool allowIneligible) -> void

  def pbChoosePokemonForTrade: (Integer variableNumber, Integer nameVarNumber, Symbol | String | GameData::Species wanted) -> void
end



