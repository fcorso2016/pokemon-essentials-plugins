# ==============================================================================
# * Hall of Fame - by FL (Credits will be apreciated)
# ==============================================================================
#
# This script is for PokÃƒÂ©mon Essentials. It makes a recordable Hall of Fame
# like the Gen 3 games.
#
# ==============================================================================
#
# To this scripts works, put it above main, put a 512x384 picture in
# hallfamebars and a 8x24 background picture in hallfamebg. To call this script,
# use 'pbHallOfFameEntry'. After you recorder the first entry, you can access
# the hall teams using a PC. You can also check the player Hall of Fame last
# number using '$PokemonGlobal.hallOfFameLastNumber'.
#
# ==============================================================================
class HallOfFame_Scene
  include _PokeScene
  include _PokeUpdatable

  # When true, all PokÃƒÂ©mon will be in one line.
  # When false, all PokÃƒÂ©mon will be in two lines.
  SINGLE_ROW_OF_POKEMON: bool

  # Make the PokÃƒÂ©mon movement ON in hall entry.
  ANIMATION: bool

  # Time in seconds for a PokÃƒÂ©mon to slide to its position from off-screen.
  APPEAR_SPEED: Numeric

  # Entry wait time (in seconds) between showing each PokÃƒÂ©mon (and trainer).
  ENTRY_WAIT_TIME: Numeric

  # Wait time (in seconds) when showing "Welcome to the Hall of Fame!".
  WELCOME_WAIT_TIME: Numeric

  # Maximum number limit of simultaneous hall entries saved.
  # 0 = Doesn't save any hall. -1 = no limit
  # Prefer to use larger numbers (like 500 and 1000) than don't put a limit.
  # If a player exceed this limit, the first one will be removed.
  HALL_ENTRIES_LIMIT: Integer

  # The entry music name. Put "" to doesn't play anything.
  HALL_OF_FAME_BGM: String

  # Allow eggs to be show and saved in hall.
  ALLOW_EGGS: bool

  # Remove the hallbars when the trainer sprite appears.
  REMOVE_BARS_WHEN_SHOWING_TRAINER: bool

  # The final fade speed on entry.
  FINAL_FADE_DURATION: Numeric

  # Sprite's opacity value when it isn't selected.
  OPACITY: Integer

  TEXT_BASE_COLOR: Color

  TEXT_SHADOW_COLOR: Color

  @alreadyFadedInEnd: bool
  @battlerIndex: Integer
  @hallEntry: Array[Pokemon]
  @hallIndex: Integer
  @movements: Array[[Integer, Integer, Integer, Integer]]
  @nationalDexList: Array[Symbol]
  @sprites: Hash[String, _Visualizable]

  @useMusic: bool
  @viewport: Viewport

  # Placement for pokemon icons
  def pbStartScene: () -> void

  def pbStartSceneEntry: () -> void

  def pbStartScenePC: () -> void

  def slowFadeOut: (Numeric duration) -> void

  # Dispose the sprite if the sprite exists and make it null
  def restartSpritePosition: (Hash[String, _Visualizable] sprites, String spritename) -> void

  # Change the PokÃƒÂ©mon sprites opacity except the index one
  def setPokemonSpritesOpacity: (Integer index, ?Numeric opacity) -> void

  def saveHallEntry: () -> void

  # Return the x/y point position in screen for battler index number
  # Don't use odd numbers!
  def xpointformula: (Integer battlernumber) -> Integer

  def ypointformula: (Integer battlernumber) -> Integer

  # Returns 0, 1 or 2 as the x position value (left, middle, right column)
  def xpositionformula: (Integer battlernumber) -> Integer

  # Returns 0, 1 or 2 as the y position value (top, middle, bottom row)
  def ypositionformula: (Integer battlernumber) -> Integer

  def moveSprite: (Integer i) -> void

  def createBattlers: (?bool hide) -> void

  def createTrainerBattler: () -> void

  def writeTrainerData: () -> void

  def writePokemonData: (Pokemon pokemon, ?Integer hallNumber) -> void

  def writeWelcome: () -> void

  def pbAnimationLoop: () -> void

  def pbPCSelection: () -> void

  def pbUpdateAnimation: () -> void

  def pbUpdatePC: () -> bool
end

# ==============================================================================
#
# ==============================================================================
class HallOfFameScreen
  include _PokeScreen

  @scene: HallOfFame_Scene

  def initialize: (HallOfFame_Scene scene) -> void

  def pbStartScreenEntry: () -> void

  def pbStartScreenPC: () -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonGlobalMetadata
  attr_writer hallOfFame: Array[Array[Pokemon]]?

  # Number necessary if hallOfFame array reach in its size limit
  attr_writer hallOfFameLastNumber: Integer

  def hallOfFame: () -> Array[Array[Pokemon]]

  def hallOfFameLastNumber: () -> Integer
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbHallOfFameEntry: () -> void

  def pbHallOfFamePC: () -> void
end



