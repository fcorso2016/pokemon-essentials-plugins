# ==============================================================================
#
# ==============================================================================
class Player < Trainer
  attr_accessor has_snag_machine: bool

  attr_accessor seen_purify_chamber: bool

  alias __shadowPkmn__initialize initialize
end

class PokemonGlobalMetadata
  attr_writer purifyChamber: PurifyChamber

  def purifyChamber: () -> PurifyChamber
end

# ==============================================================================
#
# ==============================================================================
class PurifyChamberSet
  @list: Array[Pokemon]

  attr_reader shadow: Pokemon

  attr_reader facing: Integer

  def partialSum: (Integer x) -> Integer

  def length: () -> Integer

  def initialize: () -> void

  def facing=: (Integer value) -> void

  def shadow=: (Pokemon value) -> void

  # Main component is tempo
  # Boosted if center has advantage over facing Pokemon
  # Boosted based on number of best circles
  def flow: () -> Integer

  def shadowAffinity: () -> Integer

  def affinity: (Integer i) -> Integer

  # Tempo refers to the type advantages of each Pokemon in a certain set in a
  # clockwise direction. Tempo also depends on the number of Pokemon in the set
  def tempo: () -> Integer

  def list: () -> Array[Pokemon]

  def []: (Integer index) -> Pokemon?

  def insertAfter: (Integer index, Pokemon? value) -> void

  def insertAt: (Integer index, Pokemon? value) -> void

  # Purify Chamber treats Normal/Normal matchup as super effective
  def self.typeAdvantage: (Symbol type1, Symbol type2) -> bool

  def self.isSuperEffective: (Pokemon pkmn1, Pokemon pkmn2) -> bool
end

# ==============================================================================
#
# ==============================================================================
class PurifyChamber
  include _Updatable

  attr_reader sets: Array[PurifyChamberSet]

  attr_reader currentSet: Integer

  NUMSETS: Integer

  SETSIZE: Integer

  # Calculates the maximum possible tempo.
  def self.maximumTempo: () -> Integer

  def initialize: () -> void

  def currentSet=: (Integer value) -> void

  # Number of regular Pokemon in a set
  def setCount: (Integer set) -> Integer

  def setList: (Integer set) -> Array[Pokemon]

  # For speeding up purification.
  def chamberFlow: (Integer chamber) -> Integer

  def getShadow: (Integer chamber) -> Pokemon?

  # Allow only Shadow Pokemon.
  def setShadow: (Integer chamber, Pokemon? value) -> void

  def switch: (Integer set1, Integer set2) -> void

  def insertAfter: (Integer set, Integer index, Pokemon? value) -> void

  def insertAt: (Integer set, Integer index, Pokemon? value) -> void

  def []: (Integer chamber, ?nil slot) -> PurifyChamberSet |
    (Integer chamber, Integer slot) -> Pokemon?

  def isPurifiableIgnoreRegular?: (Integer set) -> bool

  def isPurifiable?: (Integer set) -> bool

  def debugAddShadow: (Integer set, Symbol | String | GameData::Species species) -> void

  def debugAddNormal: (Integer set, Symbol | String | GameData::Species species) -> void

  def debugAdd: (Integer set, bool shadow, Symbol type1, ?Symbol? type2) -> void
end

# ==============================================================================
#
# ==============================================================================
module PurifyChamberHelper
  def self.pbGetPokemon2: (PurifyChamber chamber, Integer set, Integer position) -> Pokemon?

  def self.pbGetPokemon: (PurifyChamber chamber, Integer position) -> Pokemon?

  def self.adjustOnInsert: (Integer position) -> Integer

  def self.pbSetPokemon: (PurifyChamber chamber, Integer position, Pokemon? value) -> void
end

# ==============================================================================
#
# ==============================================================================
class PurifyChamberScreen
  include _PokeScreen
  include _PokeRefreshable

  @chamber: PurifyChamber
  @scene: PurifyChamberScene

  def initialize: (PurifyChamberScene scene) -> void

  def pbPlace: (Pokemon? pkmn, Integer position) -> bool

  def pbPlacePokemon: ([Integer, Integer]? pos, Integer position) -> bool

  def pbOnPlace: (Pokemon pkmn) -> void

  def pbOpenSetDetail: () -> bool

  def pbDisplay: (untyped msg) -> void

  def pbConfirm: (untyped msg) -> bool

  def pbCheckPurify: () -> bool

  def pbDoPurify: () -> void

  def pbStartPurify: () -> void
end

# ==============================================================================
#
# ==============================================================================
class Window_PurifyChamberSets < Window_DrawableCommand
  @chamber: PurifyChamber

  attr_reader switching: Integer

  def initialize: (PurifyChamber chamber, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> void

  def switching=: (Integer value) -> void
end

# ==============================================================================
#
# ==============================================================================
interface _FlowDiagram
  include _Disposable
  include _Updatable

  # 0=none, 1=weak, 2=strong
  def setFlowStrength: (Integer strength) -> void

  def visible=: (bool value) -> void

  def color=: (Color value) -> void

  def ensurePoint: (Integer j) -> void
end

class DirectFlowDiagram
  include _FlowDiagram

  # Distance travelled by a dot in 1 second.
  DOT_SPEED: Integer

  @angle: Integer
  @angles: Array[Integer]
  @distance: Integer
  @offset: Integer
  @points: Array[BitmapSprite]

  @strength: Integer
  @viewport: Viewport?

  @x: Integer

  @y: Integer

  def initialize: (?Viewport? viewport) -> void

  def setAngle: (Integer angle1) -> void
end

# ==============================================================================
#
# ==============================================================================
class FlowDiagram
  include _FlowDiagram

  # Distance travelled by a dot in 1 second.
  DOT_SPEED: Integer

  @angles: Array[Integer]
  @distance: Numeric
  @endAngle: Numeric
  @offset: Numeric
  @points: Array[BitmapSprite]

  @startAngle: Integer
  @strength: Integer
  @viewport: Viewport?

  @x: Integer

  @y: Integer

  def initialize: (?Viewport? viewport) -> void

  def setRange: (Numeric angle1, Numeric angle2) -> void

  def withinRange: (Integer angle, Numeric startAngle, Numeric endAngle) -> bool
end

# ==============================================================================
#
# ==============================================================================
class PurifyChamberSetView < Sprite
  include _Refreshable

  @__sprites: Array[_Visualizable]
  @chamber: PurifyChamber
  @directflow: DirectFlowDiagram
  @flows: Array[FlowDiagram]
  @info: BitmapSprite
  @view: BitmapSprite

  attr_reader set: Integer

  attr_reader cursor: Integer

  attr_reader heldpkmn: Pokemon?

  def initialize: (PurifyChamber chamber, Integer set, ?Viewport? viewport) -> void

  def refreshFlows: () -> void

  def moveCursor: (button_enum button) -> void

  def checkCursor: (Integer index) -> void

  def getCurrent: () -> Pokemon?

  def cursor=: (Integer value) -> void

  def heldpkmn=: (Pokemon? value) -> void

  def set=: (Integer value) -> void

  def visible=: (bool value) -> void

  def color=: (Color value) -> void
end

# ==============================================================================
#
# ==============================================================================
class PurifyChamberScene
  include _Scene
  include _PokeUpdatable
  include _PokeRefreshable

  @chamber: PurifyChamber

  @sprites: Hash[String, _Visualizable]

  @viewport: Viewport

  @viewportmsg: Viewport

  def pbStart: (PurifyChamber chamber) -> void

  def pbEnd: -> void

  def pbOpenSet: (Integer set) -> void

  def pbCloseSet: () -> void

  def pbOpenSetDetail: (Integer set) -> void

  def pbCloseSetDetail: () -> void

  def pbPurify: () -> void

  def pbMove: (Integer _pos) -> void

  def pbShift: (Integer _pos, Pokemon? _heldpoke) -> void

  def pbPlace: (Integer _pos, Pokemon? _heldpoke) -> void

  def pbReplace: (Integer _pos, Pokemon? _storagePos) -> void

  def pbRotate: (Integer facing) -> void

  def pbWithdraw: (Integer _pos, Pokemon? _heldpoke) -> void

  def pbDisplay: (String msg) -> void

  def pbConfirm: (String msg) -> bool

  def pbShowCommands: (String msg, Array[String] commands) -> Integer

  def pbSetScreen: () -> [Integer, Integer]

  def pbChooseSet: () -> Integer

  def pbSwitch: (Integer set) -> Integer

  def pbSummary: (Integer pos, Pokemon? heldpkmn) -> void

  def pbPositionHint: (Integer pos) -> void

  def pbChangeSet: (Integer set) -> void

  def pbChoosePokemon: () -> [Integer, Integer]
end

class Object
  # ==============================================================================
  # General purpose utilities
  # ==============================================================================
  def pbDrawGauge: (Bitmap bitmap, Rect rect, Color color, Integer value, Integer maxValue) -> void

  # angle is in degrees.
  def calcPoint: (Integer x, Integer y, Integer distance, Integer angle) -> [Integer, Integer]

  # ==============================================================================
  #
  # ==============================================================================
  def pbPurifyChamber: () -> void
end



