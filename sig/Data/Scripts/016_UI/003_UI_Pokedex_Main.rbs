# ==============================================================================
#
# ==============================================================================
class Window_Pokedex < Window_DrawableCommand
  @commands: Array[String]

  @pokeballOwn: AnimatedBitmap

  @pokeballSeen: AnimatedBitmap

  def initialize: (Integer x, Integer y, Integer width, Integer height, Viewport? viewport) -> void

  def commands=: (Array[String] value) -> void

  def species: () -> (Integer | Symbol)

  def itemCount: () -> Integer

  def drawItem: (Integer index, Integer _count, Rect rect) -> void
end

# ==============================================================================
#
# ==============================================================================
class PokedexSearchSelectionSprite < Sprite
  include _Refreshable

  @cols: Integer
  @mode: Integer
  @selbitmap: AnimatedBitmap

  @xgap: Integer
  @xstart: Integer

  @ygap: Integer
  @ystart: Integer

  attr_reader index: Integer

  attr_accessor cmds: Array[String]

  attr_accessor minmax: untyped

  def index=: (Integer value) -> void

  def mode=: (Integer value) -> void
end

# ==============================================================================
# PokÃƒÂ©dex main screen
# ==============================================================================
class PokemonPokedex_Scene
  type dex_option = {
      :species => Symbol,
      :name    => String,
      :height  => Math::double,
      :weight  => Math::double,
      :number  => Integer,
      :shift   => bool,
      :types   => Array[Symbol],
      :color   => Symbol,
      :shape   => Symbol
    }

  include _PokeScene
  include _PokeUpdatable
  include _PokeRefreshable

  MODEMath::doubleAL: Integer

  MODEATOZ: Integer

  MODETALLEST: Integer

  MODESMALLEST: Integer

  MODEHEAVIEST: Integer

  MODELIGHTEST: Integer

  @hwbitmap: AnimatedBitmap
  @searchsliderbitmap: AnimatedBitmap
  @selbitmap: AnimatedBitmap
  @shapebitmap: AnimatedBitmap
  @sliderbitmap: AnimatedBitmap

  @sprites: Hash[String, _Visualizable]
  @typebitmap: AnimatedBitmap

  @viewport: Viewport

  def pbStartScene: () -> void

  # Gets the region used for displaying PokÃƒÂ©dex entries. Species will be listed
  # according to the given region's numbering and the returned region can have
  # any value defined in the town map data file. It is currently set to the
  # return value of pbGetCurrentRegion, and thus will change according to the
  # current map's MapPosition metadata setting.
  def pbGetPokedexRegion: () -> Integer

  # Determines which index of the array $PokemonGlobal.pokedexIndex to save the
  # "last viewed species" in. All regional dexes come first in order, then the
  # National Dex at the end.
  def pbGetSavePositionIndex: () -> Integer

  def pbCanAddForModeList?: (Integer mode, Symbol | String | GameData::Species species) -> bool

  def pbGetDexList: () -> Array[dex_option]

  def pbRefreshDexList: (?Integer index) -> void

  def pbRefreshDexSearch: (Array[Integer] params, Integer _index) -> void

  def pbRefreshDexSearchParam: (Integer mode, Array[String] cmds, Integer sel, Integer _index) -> void

  def setIconBitmap: (Symbol species) -> void

  def pbSearchDexList: (Array[Integer] params) -> Array[dex_option]

  def pbCloseSearch: () -> void

  def pbDexEntry: (Integer index) -> void

  def pbDexSearchCommands: (Integer mode, Array[Integer] selitems, Integer mainindex) -> void

  def pbDexSearch: () -> Integer

  def pbPokedex: () -> void
end

# ==============================================================================
#
# ==============================================================================
class PokemonPokedexScreen
  include _PokeScreen

  def initialize: (PokemonPokedex_Scene scene) -> void

  def pbStartScreen: () -> void
end



