# ==============================================================================
# PokÃƒÂ©mon icons
# ==============================================================================
class PokemonBoxIcon < IconSprite
  include _Refreshable

  @pokemon: Pokemon

  @release_timer_start: Numeric?

  def initialize: (Pokemon pokemon, ?Viewport? viewport) -> void

  def releasing?: () -> bool

  def release: () -> void
end

# ==============================================================================
# PokÃƒÂ©mon sprite
# ==============================================================================
class MosaicPokemonSprite < PokemonSprite
  @inrefresh: bool

  @mosaicbitmap: Bitmap?

  @mosaicbitmap2: Bitmap?

  @oldbitmap: Bitmap?

  attr_reader mosaic: Integer

  def bitmap=: (Bitmap? value) -> void

  def mosaic=: (Integer value) -> void

  def mosaicRefresh: (Bitmap? bitmap) -> void
end

# ==============================================================================
#
# ==============================================================================
class AutoMosaicPokemonSprite < MosaicPokemonSprite
  INITIAL_MOSAIC: Integer

  @mosaic_duration: Numeric?
  @mosaic_timer_start: Numeric?
  @start_mosaic: Integer

  def mosaic_duration=: (Numeric val) -> void
end

# ==============================================================================
# Cursor
# ==============================================================================
interface _BoxSprite
  def x=: (Integer value) -> void

  def y=: (Integer value) -> void

  def color=: (Color value) -> void

  def visible=: (bool value) -> void
end

class PokemonBoxArrow < Sprite
  include _BoxSprite

  @grabbing_timer_start: Numeric?
  @handsprite: ChangelingSprite
  @heldpkmn: PokemonBoxIcon?
  @holding: bool

  @placing_timer_start: Numeric?
  @spriteX: Integer
  @spriteY: Integer
  @updating: bool

  attr_accessor quickswap: bool

  # Time in seconds for the cursor to move down and back up to grab/drop a
  # PokÃƒÂ©mon.
  GRAB_TIME: Float

  def initialize: (?Viewport? viewport) -> void

  def heldPokemon: () -> PokemonBoxIcon?

  def holding?: () -> boolish

  def grabbing?: () -> bool

  def placing?: () -> bool

  def setSprite: (PokemonBoxIcon sprite) -> void

  def deleteSprite: () -> void

  def grab: (PokemonBoxIcon sprite) -> void

  def place: () -> void

  def release: () -> void
end

# ==============================================================================
# Box
# ==============================================================================
class PokemonBoxSprite < Sprite
  include _Refreshable
  include _BoxSprite

  @bg: Integer
  @boxbitmap: AnimatedBitmap?
  @boxnumber: Integer
  @contents: Bitmap
  @pokemonsprites: Array[PokemonBoxIcon]
  @storage: PokemonStorage

  attr_accessor refreshBox: bool

  attr_accessor refreshSprites: bool

  def initialize: (PokemonStorage storage, Integer boxnumber, ?Viewport? viewport) -> void

  def getBoxBitmap: () -> void

  def getPokemon: (Integer index) -> PokemonBoxIcon

  def setPokemon: (Integer index, PokemonBoxIcon sprite) -> void

  def grabPokemon: (Integer index, PokemonBoxArrow arrow) -> void

  def deletePokemon: (Integer index) -> void
end

# ==============================================================================
# Party pop-up panel
# ==============================================================================
class PokemonBoxPartySprite < Sprite
  include _Refreshable
  include _BoxSprite

  @boxbitmap: AnimatedBitmap
  @contents: Bitmap
  @party: Array[Pokemon]

  @pokemonsprites: Array[PokemonBoxIcon]

  def initialize: (Array[Pokemon] party, ?Viewport? viewport) -> void

  def getPokemon: (Integer index) -> PokemonBoxIcon

  def setPokemon: (Integer index, PokemonBoxIcon sprite) -> void

  def grabPokemon: (Integer index, PokemonBoxArrow arrow) -> void

  def deletePokemon: (Integer index) -> void
end

# ==============================================================================
# PokÃƒÂ©mon storage visuals
# ==============================================================================
class PokemonStorageScene
  include _PokeScene
  include _PokeRefreshable
  include _Updatable

  @arrowviewport: Viewport
  @bgviewport: Viewport
  @boxForMosaic: Integer
  @boxsidesviewport: Viewport
  @boxviewport: Viewport
  @choseFromParty: bool
  @command: Integer

  @markingbitmap: AnimatedBitmap?
  @screen: PokemonStorageScreen

  @selection: Integer
  @selectionForMosaic: Integer
  @sprites: Hash[String, _Visualizable]
  @storage: PokemonStorage

  @viewport: Viewport

  attr_reader quickswap: bool

  MARK_WIDTH: Integer

  MARK_HEIGHT: Integer

  def initialize: () -> void

  def pbStartBox: (PokemonStorageScreen screen, Integer command) -> void

  def pbCloseBox: () -> void

  def pbDisplay: (String message) -> void

  def pbShowCommands: (String message, Array[String] commands, ?Integer index) -> Integer

  def pbSetArrow: (PokemonBoxArrow arrow, Integer selection) -> void

  def pbChangeSelection: (button_enum key, Integer selection) -> void

  def pbPartySetArrow: (PokemonBoxArrow arrow, Integer selection) -> void

  def pbPartyChangeSelection: (button_enum key, Integer selection) -> void

  def pbSelectBoxInternal: (Array[Pokemon] _party) -> [Integer, Integer]?

  def pbSelectBox: (Array[Pokemon] party) -> [Integer, Integer]?

  def pbSelectPartyInternal: (Array[Pokemon] party, bool depositing) -> Integer

  def pbSelectParty: (Array[Pokemon] party) -> Integer

  def pbChangeBackground: (Integer wp) -> void

  def pbSwitchBoxToRight: (Integer new_box_number) -> void

  def pbSwitchBoxToLeft: (Integer new_box_number) -> void

  def pbJumpToBox: (Integer newbox) -> void

  def pbSetMosaic: (Integer selection) -> void

  def pbSetQuickSwap: (bool value) -> void

  def pbShowPartyTab: () -> void

  def pbHidePartyTab: () -> void

  def pbHold: ([Integer, Integer] selected) -> void

  def pbSwap: ([Integer, Integer] selected, Pokemon _heldpoke) -> void

  def pbPlace: ([Integer, Integer] selected, Pokemon _heldpoke) -> void

  def pbWithdraw: ([Integer, Integer] selected, Pokemon heldpoke, Integer partyindex) -> void

  def pbStore: ([Integer, Integer] selected, Pokemon heldpoke, Integer destbox, bool firstfree) -> void

  def pbRelease: ([Integer, Integer] selected, Pokemon heldpoke) -> void

  def pbChooseBox: (String msg) -> Integer

  def pbBoxName: (String helptext, Integer minchars, Integer maxchars) -> void

  def pbChooseItem: (PokemonBag bag) -> Symbol

  def pbSummary: (Integer selected, Pokemon? heldpoke) -> void

  def pbMarkingSetArrow: (PokemonBoxArrow arrow, Integer selection) -> void

  def pbMarkingChangeSelection: (button_enum key, Integer selection) -> untyped

  def pbMark: (Integer selected, Pokemon? heldpoke) -> void

  def pbHardRefresh: () -> void

  def drawMarkings: (AnimatedBitmap bitmap, Integer x, Integer y, Integer _width, Integer _height, Array[Integer] markings) -> void

  def pbUpdateOverlay: (Integer selection, ?Array[Pokemon]? party) -> void

end

# ==============================================================================
# PokÃƒÂ©mon storage mechanics
# ==============================================================================
class PokemonStorageScreen
  include _PokeScreen
  include _PokeUpdatable

  @pbHeldPokemon: Pokemon?

  attr_reader scene: PokemonStorageScene

  attr_reader storage: PokemonStorage

  attr_accessor heldpkmn: Pokemon?

  def initialize: (PokemonStorageScene scene, PokemonStorage storage) -> void

  def pbStartScreen: (Integer command) -> void

  # For debug purposes.
  def pbHardRefresh: () -> void

  # For debug purposes.
  def pbRefreshSingle: (Integer i) -> void

  def pbDisplay: (String message) -> void

  def pbConfirm: (String str) -> bool

  def pbShowCommands: (String msg, Array[String] commands, ?Integer index) -> Integer

  def pbAble?: (Pokemon? pokemon) -> bool

  def pbAbleCount: () -> Integer

  def pbHeldPokemon: () -> Pokemon

  def pbWithdraw: ([Integer, Integer] selected, Pokemon? heldpoke) -> bool

  def pbStore: ([Integer, Integer] selected, Pokemon? heldpoke) -> void

  def pbHold: ([Integer, Integer] selected) -> void

  def pbPlace: ([Integer, Integer] selected) -> void

  def pbSwap: ([Integer, Integer] selected) -> bool

  def pbRelease: ([Integer, Integer] selected, Pokemon? heldpoke) -> bool?

  def pbChooseMove: (Pokemon pkmn, String helptext, ?Integer index) -> untyped

  def pbSummary: ([Integer, Integer] selected, Pokemon? heldpoke) -> void

  def pbMark: ([Integer, Integer] selected, Pokemon? heldpoke) -> void

  def pbItem: ([Integer, Integer] selected, Pokemon? heldpoke) -> void

  def pbBoxCommands: () -> void

  def pbChoosePokemon: (?Array[Pokemon]? _party) -> [Integer, Integer]
end



