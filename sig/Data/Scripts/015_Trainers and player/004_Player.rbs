# ==============================================================================
# Trainer class for the player
# ==============================================================================
class Player < Trainer
  # @return [Integer] the character ID of the player
  attr_reader character_ID: Integer

  # @return [Integer] the player's outfit
  attr_reader outfit: Integer

  # @return [Array<Boolean>] the player's Gym Badges (true if owned)
  attr_accessor badges: Array[bool]

  # @return [Integer] the player's money
  attr_reader money: Integer

  # @return [Integer] the player's Game Corner coins
  attr_reader coins: Integer

  # @return [Integer] the player's battle points
  attr_reader battle_points: Integer

  # @return [Integer] the player's soot
  attr_reader soot: Integer

  # @return [Pokedex] the player's PokÃ©dex
  attr_reader pokedex: Pokedex

  # @return [Boolean] whether the PokÃ©dex has been obtained
  attr_accessor has_pokedex: bool

  # @return [Boolean] whether the PokÃ©gear has been obtained
  attr_accessor has_pokegear: bool

  # @return [Boolean] whether the player has running shoes (i.e. can run)
  attr_accessor has_running_shoes: bool

  # @return [Boolean] whether the player has an innate ability to access PokÃ©mon storage
  attr_accessor has_box_link: bool

  # @return [Boolean] whether the creator of the PokÃ©mon Storage System has been seen
  attr_accessor seen_storage_creator: bool

  # @return [Boolean] whether the effect of Exp All applies innately
  attr_accessor has_exp_all: bool

  # @return [Boolean] whether Mystery Gift can be used from the load screen
  attr_accessor mystery_gift_unlocked: bool

  # @return [Array<Array>] downloaded Mystery Gift data
  attr_accessor mystery_gifts: Array[[Integer, Integer, Pokemon | Symbol, String]]

  def initialize: (String name, Symbol | String | GameData::TrainerType trainer_type) -> void

  def character_ID=: (Integer value) -> void

  def outfit=: (Integer value) -> void

  def trainer_type: () -> Symbol

  # Sets the player's money. It can not exceed {Settings::MAX_MONEY}.
  # @param value [Integer] new money value
  def money=: (Integer value) -> Integer

  # Sets the player's coins amount. It can not exceed {Settings::MAX_COINS}.
  # @param value [Integer] new coins value
  def coins=: (Integer value) -> Integer

  # Sets the player's Battle Points amount. It can not exceed
  # {Settings::MAX_BATTLE_POINTS}.
  # @param value [Integer] new Battle Points value
  def battle_points=: (Integer value) -> Integer

  # Sets the player's soot amount. It can not exceed {Settings::MAX_SOOT}.
  # @param value [Integer] new soot value
  def soot=: (Integer value) -> Integer

  # @return [Integer] the number of Gym Badges owned by the player
  def badge_count: () -> Integer

  # (see Pokedex#seen?)
  # Shorthand for +self.pokedex.seen?+.
  def seen?: (Symbol | String | GameData::Species species) -> bool

  # (see Pokedex#owned?)
  # Shorthand for +self.pokedex.owned?+.
  def owned?: (Symbol | String | GameData::Species species) -> bool
end


