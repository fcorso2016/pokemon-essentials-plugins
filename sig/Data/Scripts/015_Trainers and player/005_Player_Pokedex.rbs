class Player < Trainer
  # Represents the player's PokÃƒÂ©dex.
  class Pokedex
    include _Inspectable

    @unlocked_dexes: Array[bool]
    @seen: Hash[Symbol, bool]
    @owned: Hash[Symbol, bool]
    @seen_forms: Hash[Symbol, untyped]
    @seen_eggs: Hash[Symbol, untyped]
    @last_seen_forms: Hash[Symbol, untyped]
    @owned_shadow: Hash[Symbol, untyped]
    @caught_counts: Hash[Symbol, untyped]
    @defeated_counts: Hash[Symbol, untyped]

    # @return [Array<Integer>] an array of accessible Dexes
    # @see #refresh_accessible_dexes
    attr_reader accessible_dexes: Array[Integer]

    # Creates an empty PokÃƒÂ©dex.
    def initialize: () -> void

    # Clears the PokÃƒÂ©dex.
    def clear: () -> void

    # Sets the given species as seen in the PokÃƒÂ©dex.
    # @param species [Symbol, GameData::Species] species to set as seen
    # @param should_refresh_dexes [Boolean] whether Dex accessibility should be recalculated
    def set_seen: (Symbol | GameData::Species species, ?bool should_refresh_dexes) -> void

    # @param species [Symbol, GameData::Species] species to check
    # @return [Boolean] whether the species is seen
    def seen?: (Symbol | GameData::Species species) -> bool

    # @param species [Symbol, GameData::Species] species to check
    # @param gender [Integer] gender to check
    # @param form [Integer] form to check
    # @param shiny [Boolean, nil] shininess to check (checks both if nil)
    # @return [Boolean] whether the species of the given gender/form/shininess is seen
    def seen_form?: (Symbol | GameData::Species species, Integer gender, Integer form, ?bool? shiny) -> bool

    # Sets the egg for the given species as seen.
    # @param species [Symbol, GameData::Species] species to set as seen
    def set_seen_egg: (Symbol | GameData::Species species) -> void

    # @param species [Symbol, GameData::Species] species to check
    # @return [Boolean] whether the egg for the given species is seen
    def seen_egg?: (Symbol | GameData::Species species) -> bool

    # Returns the amount of seen PokÃƒÂ©mon.
    # If a region ID is given, returns the amount of seen PokÃƒÂ©mon
    # in that region.
    # @param dex [Integer] region ID
    def seen_count: (?Integer dex) -> Integer

    # Returns whether there are any seen PokÃƒÂ©mon.
    # If a region is given, returns whether there are seen PokÃƒÂ©mon
    # in that region.
    # @param dex [Integer] region ID
    # @return [Boolean] whether there are any seen PokÃƒÂ©mon
    def seen_any?: (?Integer dex) -> bool

    # Returns the amount of seen forms for the given species.
    # @param species [Symbol, GameData::Species] PokÃƒÂ©mon species
    # @return [Integer] amount of seen forms
    def seen_forms_count: (Symbol | GameData::Species species) -> Integer

    # @param species [Symbol, GameData::Species] PokÃƒÂ©mon species
    def last_form_seen: (Symbol | GameData::Species species) -> Integer

    # @param species [Symbol, GameData::Species] PokÃƒÂ©mon species
    # @param gender [Integer] gender (0=male, 1=female, 2=genderless)
    # @param form [Integer] form number
    # @param shiny [Boolean] shininess
    def set_last_form_seen: (Symbol | GameData::Species species, ?Integer gender, ?Integer form, ?bool shiny) -> void

    # Sets the given species as owned in the PokÃƒÂ©dex.
    # @param species [Symbol, GameData::Species] species to set as owned
    # @param should_refresh_dexes [Boolean] whether Dex accessibility should be recalculated
    def set_owned: (Symbol | GameData::Species species, ?bool should_refresh_dexes) -> void

    # Sets the given species as owned in the PokÃƒÂ©dex.
    # @param species [Symbol, GameData::Species] species to set as owned
    def set_shadow_pokemon_owned: (Symbol | GameData::Species species) -> void

    # @param species [Symbol, GameData::Species] species to check
    # @return [Boolean] whether the species is owned
    def owned?: (Symbol | GameData::Species species) -> bool

    # @param species [Symbol, GameData::Species] species to check
    # @return [Boolean] whether a Shadow PokÃƒÂ©mon of the species is owned
    def owned_shadow_pokemon?: (Symbol | GameData::Species species) -> bool

    # Returns the amount of owned PokÃƒÂ©mon.
    # If a region ID is given, returns the amount of owned PokÃƒÂ©mon
    # in that region.
    # @param dex [Integer] region ID
    def owned_count: (?Integer dex) -> Integer

    # @param species [Pokemon, Symbol, GameData::Species] Pokemon to register as seen
    # @param gender [Integer] gender to register (0=male, 1=female, 2=genderless)
    # @param form [Integer] form to register
    # @param shiny [Boolean] shininess to register
    # @param should_refresh_dexes [Boolean] whether to recalculate accessible Dex lists
    def register: (Pokemon | Symbol | GameData::Species species, ?Integer gender, ?Integer form, ?bool shiny, ?bool should_refresh_dexes) -> void

    # @param pkmn [Pokemon] Pokemon to register as most recently seen
    def register_last_seen: (Pokemon pkmn) -> void

    # @param species [Symbol, GameData::Species] species to check
    # @return [Integer] the number of PokÃƒÂ©mon of the given species that have
    #   been caught by the player
    def caught_count: (Symbol | GameData::Species species) -> Integer

    # @param species [Symbol, GameData::Species] species to check
    # @return [Integer] the number of PokÃƒÂ©mon of the given species that have
    #   been defeated by the player
    def defeated_count: (Symbol | GameData::Species species) -> Integer

    # @param species [Symbol, GameData::Species] species to check
    # @return [Integer] the number of PokÃƒÂ©mon of the given species that have
    #   been defeated or caught by the player
    def battled_count: (Symbol | GameData::Species species) -> Integer

    # @param species [Symbol, GameData::Species] species to count as caught
    def register_caught: (Symbol | GameData::Species species) -> void

    # @param species [Symbol, GameData::Species] species to count as defeated
    def register_defeated: (Symbol | GameData::Species species) -> void

    # Unlocks the given Dex, -1 being the National Dex.
    # @param dex [Integer] Dex ID (-1 is the National Dex)
    def unlock: (Integer dex) -> void

    # Locks the given Dex, -1 being the National Dex.
    # @param dex [Integer] Dex ID (-1 is the National Dex)
    def lock: (Integer dex) -> void

    # @param dex [Integer] Dex ID (-1 is the National Dex)
    # @return [Boolean] whether the given Dex is unlocked
    def unlocked?: (Integer dex) -> bool

    # @return [Integer] the number of defined Dexes (including the National Dex)
    def dexes_count: () -> Integer

    # Decides which Dex lists are able to be viewed (i.e. they are unlocked and
    # have at least 1 seen species in them), and saves all accessible Dex region
    # numbers into {#accessible_dexes}. National Dex comes after all regional
    # Dexes.
    # If the Dex list shown depends on the player's location, this just decides
    # if a species in the current region has been seen - doesn't look at other
    # regions.
    def refresh_accessible_dexes: () -> void

    def species_in_unlocked_dex?: (Symbol species) -> bool

    private

    # @param hash [Hash]
    # @param region [Integer]
    # @return [Integer]
    def count_species: (Hash[Symbol, bool] hash, ?Integer region) -> Integer
  end
end



