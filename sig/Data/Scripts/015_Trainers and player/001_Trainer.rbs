# ==============================================================================
# Basic trainer class (use a child class rather than this one)
# ==============================================================================
class Trainer
  include _Inspectable

  attr_accessor trainer_type: Symbol

  attr_accessor name: String

  attr_accessor id: Integer

  attr_accessor language: Integer

  attr_accessor party: Array[Pokemon]

  def full_name: () -> String

  # Portion of the ID which is visible on the Trainer Card
  def public_ID: (?Integer? id) -> Integer

  # Other portion of the ID
  def secret_ID: (?Integer? id) -> Integer

  # Random ID other than this Trainer's ID
  def make_foreign_ID: () -> Integer

  def trainer_type_name: () -> String

  def base_money: () -> Integer

  def gender: () -> Integer

  def male?: () -> bool

  def female?: () -> bool

  def skill_level: () -> Integer

  def flags: () -> Array[String]

  def has_flag?: (String flag) -> bool

  def pokemon_party: () -> Array[Pokemon]

  def able_party: () -> Array[Pokemon]

  def party_count: () -> Integer

  def pokemon_count: () -> Integer

  def able_pokemon_count: () -> Integer

  def party_full?: () -> bool

  # Returns true if there are no usable PokÃ©mon in the player's party.
  def all_fainted?: () -> bool

  def first_party: () -> Pokemon

  def first_pokemon: () -> Pokemon

  def first_able_pokemon: () -> Pokemon

  def last_party: () -> Pokemon?

  def last_pokemon: () -> Pokemon?

  def last_able_pokemon: () -> Pokemon?

  def remove_pokemon_at_index: (Integer index) -> bool

  # Checks whether the trainer would still have an unfainted PokÃ©mon if the
  # PokÃ©mon given by _index_ were removed from the party.
  def has_other_able_pokemon?: (Integer index) -> bool

  # Returns true if there is a PokÃ©mon of the given species in the trainer's
  # party. You may also specify a particular form it should be.
  def has_species?: (Symbol | String | GameData::Species species, ?Integer form) -> bool

  # Returns whether there is a fatefully met PokÃ©mon of the given species in the
  # trainer's party.
  def has_fateful_species?: (Symbol | String | GameData::Species species) -> bool

  # Returns whether there is a PokÃ©mon with the given type in the trainer's
  # party.
  def has_pokemon_of_type?: (Symbol | String | GameData::Type `type`) -> bool

  # Checks whether any PokÃ©mon in the party knows the given move, and returns
  # the first PokÃ©mon it finds with that move, or nil if no PokÃ©mon has that move.
  def get_pokemon_with_move: (Symbol | String | GameData::Move move) -> bool

  # Fully heal all PokÃ©mon in the party.
  def heal_party: () -> void

  def initialize: (String name, Symbol | String | GameData::TrainerType trainer_type) -> void
end

# ==============================================================================
# Trainer class for NPC trainers
# ==============================================================================
class NPCTrainer < Trainer
  attr_accessor version: Integer

  attr_accessor items: Array[Symbol]

  attr_accessor lose_text: String?

  attr_accessor win_text: String?

  def initialize: (String name, Symbol trainer_type, ?Integer version) -> void
end


