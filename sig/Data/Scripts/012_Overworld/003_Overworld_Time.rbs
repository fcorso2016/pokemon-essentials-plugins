# ==============================================================================
#
# ==============================================================================
module PBDayNight
  HOURLY_TONES: Array[Tone]

  CACHED_TONE_LIFETIME: Integer

  @cachedTone: Tone?

  @dayNightToneLastUpdate: number?
  @oneOverSixty: number

  # Returns true if it's day.
  def self.isDay?: (?Time? time) -> bool

  # Returns true if it's night.
  def self.isNight?: (?Time? time) -> bool

  # Returns true if it's morning.
  def self.isMorning?: (?Time? time) -> bool

  # Returns true if it's the afternoon.
  def self.isAfternoon?: (?Time? time) -> bool

  # Returns true if it's the evening.
  def self.isEvening?: (?Time? time) -> bool

  # Gets a number representing the amount of daylight (0=full night, 255=full day).
  def self.getShade: () -> number

  # Gets a Tone object representing a suggested shading
  # tone for the current time of day.
  def self.getTone: () -> Tone

  def self.pbGetDayNightMinutes: () -> Integer

  def self.getToneInternal: () -> void
end

class Object
  # ==============================================================================
  # Day and night system
  # ==============================================================================
  def pbGetTimeNow: () -> Time

  # ==============================================================================
  #
  # ==============================================================================
  def pbDayNightTint: (_Visualizable object) -> void

  # ==============================================================================
  # Days of the week
  # ==============================================================================
  def pbIsWeekday: (Integer wdayVariable, *Integer arg) -> bool

  # ==============================================================================
  # Months
  # ==============================================================================
  def pbIsMonth: (Integer monVariable, *Integer arg) -> bool

  def pbGetMonthName: (Integer month) -> String

  def pbGetAbbrevMonthName: (Integer month) -> String

  # ==============================================================================
  # Seasons
  # ==============================================================================
  def pbGetSeason: () -> Integer

  def pbIsSeason: (Integer seasonVariable, *Integer arg) -> bool

  def pbIsSpring: () -> bool

  def pbIsSummer: () -> bool

  def pbIsAutumn: () -> bool

  def pbIsFall: () -> bool

  def pbIsWinter: () -> bool

  def pbGetSeasonName: (Integer season) -> String

  # ==============================================================================
  # Moon phases and Zodiac
  # ==============================================================================
  # Calculates the phase of the moon. time is in UTC.
  # 0 - New Moon
  # 1 - Waxing Crescent
  # 2 - First Quarter
  # 3 - Waxing Gibbous
  # 4 - Full Moon
  # 5 - Waning Gibbous
  # 6 - Last Quarter
  # 7 - Waning Crescent
  def moonphase: (?Time? time) -> Integer

  # Calculates the zodiac sign based on the given month and day:
  # 0 is Aries, 11 is Pisces. Month is 1 if January, and so on.
  def zodiac: (Integer month, Integer day) -> Integer

  # Returns the opposite of the given zodiac sign.
  # 0 is Aries, 11 is Pisces.
  def zodiacOpposite: (Integer sign) -> Integer

  # 0 is Aries, 11 is Pisces.
  def zodiacPartners: (Integer sign) -> Array[Integer]

  # 0 is Aries, 11 is Pisces.
  def zodiacComplements: (Integer sign) -> Array[Integer]
end



