# ==============================================================================
# Battle preparation
# ==============================================================================
class PokemonGlobalMetadata
  attr_accessor nextBattleBGM: RPG::AudioFile?

  attr_accessor nextBattleVictoryBGM: RPG::AudioFile?

  attr_accessor nextBattleCaptureME: RPG::AudioFile?

  attr_accessor nextBattleBack: String?
end

# ==============================================================================
#
# ==============================================================================
class Game_Temp
  @battle_rules: Hash[String, untyped]

  attr_accessor encounter_triggered: bool

  attr_accessor encounter_type: Symbol

  attr_accessor party_levels_before_battle: Array[Integer]

  attr_accessor party_critical_hits_dealt: Array[bool]

  attr_accessor party_direct_damage_taken: Array[Integer]

  def battle_rules: () -> Hash[String, untyped]

  def clear_battle_rules: () -> void

  def add_battle_rule: (_ToS rule, ?Symbol? var) -> void
end

# ==============================================================================
# Helper methods for setting up and closing down battles
# ==============================================================================
module BattleCreationHelperMethods
  # Skip battle if the player has no able PokÃƒÂ©mon, or if holding Ctrl in Debug mode
  def self?.skip_battle?: () -> bool

  def self?.skip_battle: (Integer outcome_variable, ?bool trainer_battle) -> Integer

  def self?.partner_can_participate?: (Array[Pokemon] foe_party) -> bool

  # Generate information for the player and partner trainer(s)
  def self?.set_up_player_trainers: (Array[Pokemon] foe_party) -> [Array[Trainer], Array[Symbol], Array[Pokemon], Array[Integer]]

  def self?.create_battle_scene: () -> Battle::Scene

  # Sets up various battle parameters and applies special rules.
  def self?.prepare_battle: (Battle battle) -> void

  def self?.after_battle: (Integer outcome, bool can_lose) -> void

  # Save the result of the battle in a Game Variable (1 by default)
  #    0 - Undecided or aborted
  #    1 - Player won
  #    2 - Player lost
  #    3 - Player or wild PokÃƒÂ©mon ran from battle, or player forfeited the match
  #    4 - Wild PokÃƒÂ©mon was caught
  #    5 - Draw
  def self?.set_outcome: (Integer outcome, ?Integer outcome_variable, ?bool trainer_battle) -> void
end

# ==============================================================================
# Wild battles
# ==============================================================================
class WildBattle
  type wild_pokemon = Pokemon | [Symbol, Integer] | Symbol | String | GameData::Species | Integer

  # Used when walking in tall grass, hence the additional code.
  def self.start: (*wild_pokemon args, ?can_override: bool) -> bool

  def self.start_core: (*wild_pokemon args) -> Integer

  def self.generate_foes: (*wild_pokemon args) -> Array[Pokemon]
end

# ==============================================================================
# Trainer battles
# ==============================================================================
class TrainerBattle
  type trainer_data = NPCTrainer | [Symbol | String | GameData::TrainerType, String, Integer, String] | Symbol | String | GameData::TrainerType | Integer

  # Used by most trainer events, which can be positioned in such a way that
  # multiple trainer events spot the player at once. The extra code in this
  # method deals with that case and can cause a double trainer battle instead.
  def self.start: (*trainer_data args) -> bool

  def self.start_core: (*trainer_data args) -> Integer

  def self.generate_foes: (*trainer_data args) -> [Array[NPCTrainer], Array[Symbol], Array[Pokemon], Array[Integer]]
end

# Common items to find via Pickup. Items from this list are added to the pool in
# order, starting from a point dependng on the PokÃƒÂ©mon's level. The number of
# items added is how many probabilities are in the PICKUP_COMMON_ITEM_CHANCES
# array below.
# There must be 9 + PICKUP_COMMON_ITEM_CHANCES.length number of items in this
# array (18 by default). The 9 is actually (100 / num_rarity_levels) - 1, where
# num_rarity_levels is in def pbPickup below.
PICKUP_COMMON_ITEMS: Array[Symbol]

# Chances to get each item added to the pool from the array above.
PICKUP_COMMON_ITEM_CHANCES: Array[Integer]

# Rare items to find via Pickup. Items from this list are added to the pool in
# order, starting from a point dependng on the PokÃƒÂ©mon's level. The number of
# items added is how many probabilities are in the PICKUP_RARE_ITEM_CHANCES
# array below.
# There must be 9 + PICKUP_RARE_ITEM_CHANCES.length number of items in this
# array (11 by default). The 9 is actually (100 / num_rarity_levels) - 1, where
# num_rarity_levels is in def pbPickup below.
PICKUP_RARE_ITEMS: Array[Symbol]

# Chances to get each item added to the pool from the array above.
PICKUP_RARE_ITEM_CHANCES: Array[Integer]

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def setBattleRule: (*Symbol args) -> void

  # Used to determine the environment in battle, and also the form of Burmy/
  # Wormadam.
  def pbGetEnvironment: () -> Symbol

  def pbCanDoubleBattle?: () -> bool

  def pbCanTripleBattle?: () -> bool

  def pbEvolutionCheck: () -> void

  def pbDynamicItemList: (*(Symbol | String | GameData::Item) args) -> untyped

  # Try to gain an item after a battle if a Pokemon has the ability Pickup.
  def pbPickup: (Pokemon pkmn) -> void

  # Try to gain a Honey item after a battle if a Pokemon has the ability Honey Gather.
  def pbHoneyGather: (Pokemon pkmn) -> void
end



