# ==============================================================================
# Registers special battle transition animations which may be used instead of
# the default ones. There are examples below of how to register them.
#
# The register call has 4 arguments:
#    1) The name of the animation. Typically unused, but helps to identify the
#       registration code for a particular animation if necessary.
#    2) The animation's priority. If multiple special animations could trigger
#       for the same battle, the one with the highest priority number is used.
#    3) A condition proc which decides whether the animation should trigger.
#    4) The animation itself. Could be a bunch of code, or a call to, say,
#       pbCommonEvent(20) or something else. By the end of the animation, the
#       screen should be black.
# Note that you can get an image of the current game screen with
# Graphics.snap_to_bitmap.
# ==============================================================================
module SpecialBattleIntroAnimations
  @@anims: Array[[String, Integer, ^(Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void, ^(Viewport, Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void]]

  def self.register: (String name, Integer priority, ^(Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void condition, ^(Viewport, Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void hash) -> void

  def self.remove: (String name) -> void

  def self.each: () { (String, Integer, ^(Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void, ^(Viewport, Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void) -> void } -> void

  def self.has?: (String name) -> bool

  def self.get: (String name) -> [String, Integer, ^(Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void, ^(Viewport, Integer, Array[Pokemon] | Array[NPCTrainer], Integer) -> void]?
end

# ==============================================================================
# Battle intro animation
# ==============================================================================
class Game_Temp
  attr_accessor transition_animation_data: [Symbol | String | GameData::TrainerType, String, String]
end

class Object
  def pbSceneStandby: () { () -> void } -> void

  def pbBattleAnimation: (?(String | RPG::AudioFile)? bgm, ?Integer battletype, ?(Array[Pokemon] | Array[NPCTrainer])? foe) { () -> void } -> void

  def pbBattleAnimationCore: (String anim, Viewport viewport, Integer location, ?Integer num_flashes) -> void
end


