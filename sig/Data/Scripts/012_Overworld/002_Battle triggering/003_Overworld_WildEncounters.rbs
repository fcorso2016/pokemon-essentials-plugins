# ==============================================================================
#
# ==============================================================================
class PokemonEncounters
  @chance_accumulator: Integer

  @encounter_tables: Hash[Symbol, Array[[Integer, Symbol, Integer, Integer]]]
  @step_chances: Hash[Symbol, Integer]

  attr_reader step_count: Integer

  def initialize: () -> void

  def setup: (Integer map_ID) -> void

  def reset_step_count: () -> void

  # Returns whether encounters for the given encounter type have been defined
  # for the current map.
  def has_encounter_type?: (Symbol enc_type) -> bool

  # Returns whether encounters for the given encounter type have been defined
  # for the given map. Only called by Bug-Catching Contest to see if it can use
  # the map's BugContest encounter type to generate caught PokÃƒÂ©mon for the other
  # contestants.
  def map_has_encounter_type?: (untyped map_ID, untyped enc_type) -> (false | untyped)

  # Returns whether land-like encounters have been defined for the current map.
  # Applies only to encounters triggered by moving around.
  def has_land_encounters?: () -> (true | false)

  # Returns whether land-like encounters have been defined for the current map
  # (ignoring the Bug-Catching Contest one).
  # Applies only to encounters triggered by moving around.
  def has_normal_land_encounters?: () -> (true | false)

  # Returns whether cave-like encounters have been defined for the current map.
  # Applies only to encounters triggered by moving around.
  def has_cave_encounters?: () -> (true | false)

  # Returns whether water-like encounters have been defined for the current map.
  # Applies only to encounters triggered by moving around (i.e. not fishing).
  def has_water_encounters?: () -> (true | false)

  # Returns whether the player's current location allows wild encounters to
  # trigger upon taking a step.
  def encounter_possible_here?: () -> (true | false)

  # Returns whether a wild encounter should happen, based on its encounter
  # chance. Called when taking a step and by Rock Smash.
  def encounter_triggered?: (untyped enc_type, ?bool repel_active, ?bool triggered_by_step) -> bool

  # Returns whether an encounter with the given PokÃƒÂ©mon should be allowed after
  # taking into account Repels and ability effects.
  def allow_encounter?: (untyped enc_data, ?bool repel_active) -> bool

  # Returns whether a wild encounter should be turned into a double wild
  # encounter.
  def have_double_wild_battle?: () -> bool

  # Checks the defined encounters for the current map and returns the encounter
  # type that the given time should produce. Only returns an encounter type if
  # it has been defined for the current map.
  def find_valid_encounter_type_for_time: (Symbol base_type, Time time) -> Symbol

  # Returns the encounter method that the current encounter should be generated
  # from, depending on the player's current location.
  def encounter_type: () -> Symbol

  # For the current map, randomly chooses a species and level from the encounter
  # list for the given encounter type. Returns nil if there are none defined.
  # A higher chance_rolls makes this method prefer rarer encounter slots.
  def choose_wild_pokemon: (Symbol enc_type, ?Integer chance_rolls) -> [Symbol, Integer]?

  # For the given map, randomly chooses a species and level from the encounter
  # list for the given encounter type. Returns nil if there are none defined.
  # Used by the Bug-Catching Contest to choose what the other participants
  # caught.
  def choose_wild_pokemon_for_map: (Integer map_ID, Symbol enc_type) -> [Symbol, Integer]?
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  # Creates and returns a PokÃƒÂ©mon based on the given species and level.
  # Applies wild PokÃƒÂ©mon modifiers (wild held item, shiny chance modifiers,
  # PokÃƒÂ©rus, gender/nature forcing because of player's lead PokÃƒÂ©mon).
  def pbGenerateWildPokemon: (Symbol | String | GameData::Species species, Integer level, ?bool isRoamer) -> Pokemon

  # Used by fishing rods and Headbutt/Rock Smash/Sweet Scent to generate a wild
  # PokÃƒÂ©mon (or two if it's Sweet Scent) for a triggered wild encounter.
  def pbEncounter: (Symbol enc_type, ?bool only_single) -> bool
end



