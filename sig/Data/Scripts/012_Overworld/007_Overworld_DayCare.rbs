# ==============================================================================
# NOTE: In Gen 7+, the Day Care is replaced by the PokÃ©mon Nursery, which works
#       in much the same way except deposited PokÃ©mon no longer gain Exp because
#       of the player walking around and, in Gen 8+, deposited PokÃ©mon are able
#       to learn egg moves from each other if they are the same species. In
#       Essentials, this code can be used for both facilities, and these
#       mechanics differences are set by some Settings.
# NOTE: The Day Care has a different price than the PokÃ©mon Nursery. For the Day
#       Care, you are charged when you withdraw a deposited PokÃ©mon and you pay
#       an amount based on how many levels it gained. For the Nursery, you pay
#       $500 up-front when you deposit a PokÃ©mon. This difference will appear in
#       the Day Care Lady's event, not in these scripts.
# ==============================================================================
class DayCare
  # ============================================================================
  # Code that generates an egg based on two given PokÃ©mon.
  # ============================================================================
  module EggGenerator
    def self?.generate: (Pokemon mother, Pokemon father) -> Pokemon

    def self?.determine_egg_species: (Symbol | String | GameData::Species parent_species, Pokemon mother, Pokemon father) -> Symbol

    def self?.generate_basic_egg: (Symbol species) -> Pokemon

    def self?.inherit_form: (Pokemon egg, GameData::Species species_parent, Pokemon mother, Pokemon father) -> void

    def self?.get_moves_to_inherit: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    def self?.inherit_moves: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    def self?.inherit_nature: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    # The female parent (or the non-Ditto parent) can pass down its Hidden
    # Ability (60% chance) or its regular ability (80% chance).
    # NOTE: This is how ability inheritance works in Gen 6+. Gen 5 is more
    #       restrictive, and even works differently between BW and B2W2, and I
    #       don't think that is worth adding in. Gen 4 and lower don't have
    #       ability inheritance at all, and again, I'm not bothering to add that
    #       in.
    def self?.inherit_ability: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    def self?.inherit_IVs: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    # PokÃ© Balls can only be inherited from parents that are related to the
    # egg's species.
    # NOTE: This is how PokÃ© Ball inheritance works in Gen 7+. Gens 5 and lower
    #       don't have PokÃ© Ball inheritance at all. In Gen 6, only a female
    #       parent can pass down its PokÃ© Ball. I don't think it's worth adding
    #       in these variations on the mechanic.
    # NOTE: The official games treat Nidoran M/F and Volbeat/Illumise as
    #       unrelated for the purpose of this mechanic. Essentials treats them
    #       as related and allows them to pass down their PokÃ© Balls.
    def self?.inherit_poke_ball: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    # NOTE: There is a bug in Gen 8 that skips the original generation of an
    #       egg's personal ID if the Masuda Method/Shiny Charm can cause any
    #       rerolls. Essentials doesn't have this bug, meaning eggs are slightly
    #       more likely to be shiny (in Gen 8+ mechanics) than in Gen 8 itself.
    def self?.set_shininess: (Pokemon egg, Pokemon mother, Pokemon father) -> void

    def self?.set_pokerus: (Pokemon egg) -> void
  end

  # ============================================================================
  # A slot in the Day Care, which can contain a PokÃ©mon.
  # ============================================================================
  class DayCareSlot
    @initial_level: Integer

    attr_reader pokemon: Pokemon?

    def initialize: () -> void

    def reset: () -> void

    def deposit: (Pokemon pkmn) -> void

    def filled?: () -> bool

    def pokemon_name: () -> String

    def level_gain: () -> Integer

    def cost: () -> Integer

    def choice_text: () -> String?

    def add_exp: (?::Integer amount) -> void
  end

  attr_reader slots: Array[DayCareSlot]

  attr_accessor egg_generated: bool

  attr_accessor step_counter: Integer

  attr_accessor gain_exp: bool

  attr_accessor share_egg_moves: bool

  MAX_SLOTS: Integer

  def initialize: () -> void

  def []: (Integer index) -> DayCareSlot

  def reset_egg_counters: () -> void

  def count: () -> Integer

  def get_compatibility: () -> Integer

  def generate_egg: () -> void

  def share_egg_move: () -> void

  def update_on_step_taken: () -> void

  def self.count: () -> Integer

  def self.egg_generated?: () -> bool

  def self.reset_egg_counters: () -> void

  def self.get_details: (Integer index, Integer name_var, Integer cost_var) -> void

  def self.get_level_gain: (Integer index, Integer name_var, Integer level_var) -> void

  def self.get_compatibility: (Integer compat_var) -> void

  def self.deposit: (Integer party_index) -> void

  def self.withdraw: (Integer index) -> void

  def self.choose: (String message, Integer choice_var) -> void

  def self.collect_egg: () -> void

  private

  def pokemon_pair: () -> [Pokemon?, Pokemon?]

  def pokemon_in_ditto_egg_group?: (Pokemon pkmn) -> bool

  def compatible_gender?: (Pokemon pkmn1, Pokemon pkmn2) -> bool

  def compatibility: () -> Integer
end


