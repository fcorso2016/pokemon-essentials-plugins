# ==============================================================================
# Hidden move handlers
# ==============================================================================
module HiddenMoveHandlers
  CanUseMove: MoveHandlerHash

  ConfirmUseMove: MoveHandlerHash

  UseMove: MoveHandlerHash

  def self.addCanUseMove: (Symbol item, ^(Symbol, Pokemon, bool) -> bool proc) -> void

  def self.addConfirmUseMove: (Symbol item, ^(Symbol, Pokemon) -> bool proc) -> void

  def self.addUseMove: (Symbol item, ^(Symbol, Pokemon) -> bool proc) -> void

  def self.hasHandler: (Symbol item) -> bool

  # Returns whether move can be used
  def self.triggerCanUseMove: (Symbol item, Pokemon pokemon, bool showmsg) -> bool

  # Returns whether the player confirmed that they want to use the move
  def self.triggerConfirmUseMove: (Symbol item, Pokemon pokemon) -> bool

  # Returns whether move was used
  def self.triggerUseMove: (Symbol item, Pokemon pokemon) -> bool
end

class Object
  # ==============================================================================
  #
  # ==============================================================================
  def pbCanUseHiddenMove?: (Pokemon pkmn, Symbol move, ?bool showmsg) -> bool

  def pbConfirmUseHiddenMove: (Pokemon pokemon, Symbol move) -> bool

  def pbUseHiddenMove: (Pokemon pokemon, Symbol move) -> bool

  # Unused
  def pbHiddenMoveEvent: () -> void

  def pbCheckHiddenMoveBadge: (?Integer badge, ?bool showmsg) -> bool

  # ==============================================================================
  # Hidden move animation
  # ==============================================================================
  def pbHiddenMoveAnimation: (Pokemon pokemon) -> bool

  # ==============================================================================
  # Cut
  # ==============================================================================
  def pbCut: () -> bool

  def pbSmashEvent: (Game_Event event) -> void

  # ==============================================================================
  # Dive
  # ==============================================================================
  def pbDive: () -> bool

  def pbSurfacing: () -> boolish

  # ==============================================================================
  # Fly
  # ==============================================================================
  def pbCanFly?: (?Pokemon? pkmn, ?bool show_messages) -> bool

  def pbFlyToNewLocation: (?Pokemon? pkmn, ?Symbol move) { () -> void } -> bool

  # ==============================================================================
  # Headbutt
  # ==============================================================================
  def pbHeadbuttEffect: (?Game_Event? event) -> void

  def pbHeadbutt: (?Game_Event? event) -> bool

  # ==============================================================================
  # Rock Smash
  # ==============================================================================
  def pbRockSmashRandomEncounter: () -> void

  def pbRockSmash: () -> bool

  # ==============================================================================
  # Strength
  # ==============================================================================
  def pbStrength: () -> bool

  # ==============================================================================
  # Surf
  # ==============================================================================
  def pbSurf: () -> bool

  def pbStartSurfing: () -> void

  def pbEndSurf: (Integer _xOffset, Integer _yOffset) -> bool

  # ==============================================================================
  # Sweet Scent
  # ==============================================================================
  def pbSweetScent: () -> void

  # ==============================================================================
  # Waterfall
  # ==============================================================================
  # Starts the ascending of a waterfall.
  def pbAscendWaterfall: () -> void

  # Triggers after finishing each step while ascending/descending a waterfall.
  def pbTraverseWaterfall: () -> void

  def pbWaterfall: () -> bool
end



