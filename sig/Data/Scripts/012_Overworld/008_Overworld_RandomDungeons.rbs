# ==============================================================================
# Code that generates a random dungeon layout, and implements it in a given map.
# ==============================================================================
module RandomDungeon
  # ============================================================================
  # Bitwise values used to keep track of the generation of node connections.
  # ============================================================================
  module EdgeMasks
    NORTH: Integer

    EAST: Integer

    SOUTH: Integer

    WEST: Integer
  end

  # ============================================================================
  # A node in a randomly generated dungeon. There is one node per cell, and
  # nodes are connected to each other.
  # ============================================================================
  class MazeNode
    @edges: Integer
    @room: bool
    @visitable: bool

    @visited: bool

    def initialize: () -> void

    def edge_pattern: () -> Integer

    def block_edge: (Integer e) -> void

    def connect_edge: (Integer e) -> void

    def block_all_edges: () -> void

    def connect_all_edges: () -> void

    def edge_blocked?: (Integer e) -> bool

    def all_edges_blocked?: () -> bool

    def visitable?: () -> bool

    def set_visitable: () -> void

    def visited?: () -> bool

    def set_visited: () -> void

    def room?: () -> bool

    def set_room: () -> void
  end

  # ============================================================================
  # Maze generator. Given the number of nodes horizontally and vertically in a
  # map, connects all the nodes together.
  # ============================================================================
  class Maze
    @nodes: Array[MazeNode]
    @parameters: GameData::DungeonParameters

    attr_accessor node_count_x: Integer

    attr_accessor node_count_y: Integer

    DIRECTIONS: Array[Integer]

    def initialize: (Integer cw, Integer ch, GameData::DungeonParameters parameters) -> void

    def valid_node?: (Integer x, Integer y) -> bool

    def get_node: (Integer x, Integer y) -> MazeNode?

    def node_visited?: (Integer x, Integer y) -> bool

    def set_node_visited: (Integer x, Integer y) -> void

    def node_edge_blocked?: (Integer x, Integer y, Integer edge) -> bool

    def connect_node_edges: (Integer x, Integer y, Integer edge) -> void

    def room_count: () -> Integer

    def get_coords_in_direction: (Integer x, Integer y, Integer dir, ?bool include_direction) -> [Integer, Integer]

    def generate_layout: () -> void

    # Returns whether the node at (x, y) is active in the given layout.
    def check_active_node: (Integer x, Integer y, Symbol layout) -> bool

    def set_visitable_nodes: () -> Array[[Integer, Integer]]

    def generate_depth_first_maze: (Array[[Integer, Integer]] visitable_nodes) -> void

    def connect_nodes_and_recurse_depth_first: (Integer x, Integer y, Integer depth) -> void

    def add_more_connections: () -> void

    def spawn_rooms: (Array[[Integer, Integer]] visitable_nodes) -> void
  end

  # ============================================================================
  # Arrays of tile types in the dungeon map.
  # ============================================================================
  class DungeonLayout
    @array: Array[Array[Symbol]]

    attr_accessor width: Integer

    attr_accessor height: Integer

    alias xsize width

    alias ysize height

    # Used for debugging when printing out an ASCII image of the dungeon
    TEXT_SYMBOLS: Hash[Symbol, String]

    def initialize: (Integer width, Integer height) -> void

    def []: (Integer x, Integer y, Integer layer) -> Symbol

    def []=: (Integer x, Integer y, Integer layer, Symbol value) -> void

    def value: (Integer x, Integer y) -> Symbol

    def clear: () -> void

    def set_wall: (Integer x, Integer y, Symbol value) -> void

    def set_ground: (Integer x, Integer y, Symbol value) -> void

    def write: () -> String
  end

  # ============================================================================
  # The main dungeon generator class.
  # ============================================================================
  class Dungeon
    @buffer_x: Integer

    @buffer_y: Integer

    @map_data: DungeonLayout
    @need_redraw: bool
    @room_rects: Array[[Integer, Integer, Integer, Integer]]
    @usable_height: Integer
    @usable_width: Integer

    attr_accessor width: Integer

    attr_accessor height: Integer

    alias xsize width

    alias ysize height

    attr_accessor parameters: GameData::DungeonParameters

    attr_accessor rng_seed: untyped

    attr_accessor tileset: GameData::DungeonTileset

    # 0 is none (index 0 only) or corridor/floor
    # -1 are tile combinations that need special attention
    # Other numbers correspond to tile types (see def get_wall_tile_for_coord)
    FLOOR_NEIGHBOURS_TO_WALL: Array[Integer]

    def initialize: (Integer width, Integer height, GameData::DungeonTileset tileset, ?GameData::DungeonParameters? parameters) -> void

    def []: (Integer x, Integer y, ?Integer? layer) -> Symbol

    def []=: (Integer x, Integer y, Integer layer, Symbol value) -> void

    def write: () -> String

    # Returns whether the given coordinates are a room floor that isn't too
    # close to a corridor. For positioning events/the player upon entering.
    def isRoom?: (Integer x, Integer y) -> bool

    def tile_is_ground?: (Symbol value) -> bool

    # Lower wall tiles only.
    def tile_is_wall?: (Symbol value) -> bool

    def coord_is_ground?: (Integer x, Integer y) -> bool

    def generate: () -> void

    def generate_layout: (Integer maxWidth, Integer maxHeight) -> void

    def generate_walls: (Integer maxWidth, Integer maxHeight) -> void

    # Determines whether all floor tiles are contiguous. Sets @need_redraw if
    # there are 2+ floor regions that are isolated from each other.
    def check_for_isolated_rooms: () -> void

    # Fixes (most) situations where it isn't immediately obvious how to draw a
    # wall around a floor area.
    def resolve_wall_error: (Integer x, Integer y, ?Integer layer) -> void

    # Draws a cell's contents, which is an underlying pattern based on
    # tile_layout (the corridors), and possibly a room on top of that.
    def paint_node_contents: (Integer cell_x, Integer cell_y, MazeNode node) -> void

    def paint_ground_rect: (Integer x, Integer y, Integer width, Integer height, Symbol tile) -> void

    # Draws corridors leading from the node at (cell_x, cell_y).
    def paint_connections: (Integer cell_x, Integer cell_y, bool pattern) -> void

    # Draws a room at (cell_x, cell_y).
    def paint_room: (Integer cell_x, Integer cell_y) -> void

    def paint_walls_around_ground: (Integer x, Integer y, Integer layer, Array[[Integer, Integer]] errors) -> void

    def get_wall_tile_for_coord: (Integer x, Integer y, ?Integer layer) -> Symbol

    def paint_decorations: (Integer maxWidth, Integer maxHeight) -> void

    def paint_wall_top_tiles: (Integer maxWidth, Integer maxHeight) -> void

    # Convert dungeon layout into proper map tiles from a tileset, and modifies
    # the given map's data accordingly.
    def generateMapInPlace: (RPG::Map map) -> void

    # Returns a random room tile a random room where an event of the given size
    # can be placed. Events cannot be placed adjacent to or overlapping each
    # other, and can't be placed right next to the wall of a room (to prevent
    # them blocking a corridor).
    def get_random_room_tile: (Array[[Integer, Integer]] occupied_tiles, ?Integer event_width, ?Integer event_height) -> [Integer, Integer]?
  end
end

# ==============================================================================
# Variables that determine which dungeon parameters to use to generate a random
# dungeon.
# ==============================================================================
class PokemonGlobalMetadata
  attr_writer dungeon_area: Symbol

  attr_writer dungeon_version: Integer

  attr_accessor dungeon_rng_seed: Integer

  def dungeon_area: () -> Symbol

  def dungeon_version: () -> Integer
end



