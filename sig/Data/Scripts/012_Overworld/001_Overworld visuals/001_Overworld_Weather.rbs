# All weather particles are assumed to start at the top/right and move to the
# bottom/left. Particles are only reset if they are off-screen to the left or
# bottom.
module RPG
  class Weather
    include _Disposable
    include _Updatable

    @fade_time: number
    @fading: bool
    @new_max: Integer
    @new_sprite_lifetimes: Array[Integer]
    @new_sprites: Array[Sprite]
    @old_max: Integer
    @old_tone: Tone
    @origViewport: Viewport?
    @sprite_lifetimes: Array[Integer]
    @sprites: Array[Sprite]
    @sun_magnitude: Integer
    @sun_strength: Integer
    @target_max: Integer
    @target_tone: Tone
    @target_type: Symbol
    @tile_x: number
    @tile_y: number
    @tiles: Array[Sprite]
    @tiles_tall: Integer
    @tiles_wide: Integer
    @time_shift: Integer
    @time_until_flash: Integer
    @viewport: Viewport

    @weatherTypes: Hash[Symbol, [GameData::Weather, Array[Bitmap], Array[Bitmap], number, number, number, number, number]]

    attr_reader type: Symbol

    attr_reader max: Integer

    attr_reader ox: Integer

    attr_reader oy: Integer

    attr_accessor ox_offset: Integer

    attr_accessor oy_offset: Integer

    MAX_SPRITES: Integer

    FADE_OLD_TILES_START: Integer

    FADE_OLD_TILES_END: Integer

    FADE_OLD_TONE_START: Integer

    FADE_OLD_TONE_END: Integer

    FADE_OLD_PARTICLES_START: Integer

    FADE_OLD_PARTICLES_END: Integer

    FADE_NEW_PARTICLES_START: Integer

    FADE_NEW_PARTICLES_END: Integer

    FADE_NEW_TONE_START: Integer

    FADE_NEW_TONE_END: Integer

    FADE_NEW_TILES_START: Integer

    FADE_NEW_TILES_END: Integer

    def initialize: (?Viewport? viewport) -> void

    def fade_in: (Symbol | String | Integer | GameData::Weather new_type, Integer new_max, ?Integer duration) -> void

    def type=: (Symbol | String | Integer | GameData::Weather `type`) -> void

    def max=: (Integer value) -> void

    def ox=: (Integer value) -> void

    def oy=: (Integer value) -> void

    def get_weather_tone: (Symbol | String | Integer | GameData::Weather weather_type, Integer maximum) -> Tone

    def prepare_bitmaps: (Symbol | String | Integer | GameData::Weather new_type) -> void

    def ensureSprites: () -> void

    def ensureTiles: () -> void

    def set_sprite_bitmap: (Sprite? sprite, Integer index, Symbol weather_type) -> void

    def set_tile_bitmap: (Sprite? sprite, Integer index, Symbol weather_type) -> void

    def reset_sprite_position: (Sprite sprite, Integer index, ?bool is_new_sprite) -> void

    def update_sprite_position: (Sprite sprite, Integer index, ?bool is_new_sprite) -> void

    def recalculate_tile_positions: () -> void

    def update_tile_position: (Sprite sprite, Integer index) -> void

    # Set tone of viewport (general screen brightening/darkening)
    def update_screen_tone: () -> void

    def update_fading: () -> void
  end
end



