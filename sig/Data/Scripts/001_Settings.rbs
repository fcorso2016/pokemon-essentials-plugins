module Settings
  # The version of your game. It has to adhere to the MAJOR.MINOR.PATCH format.
  GAME_VERSION: String

  # The generation that the battle system follows. Used throughout the battle
  # scripts, and also by some other settings which are used in and out of battle
  # (you can of course change those settings to suit your game).
  # Note that this isn't perfect. Essentials doesn't accurately replicate every
  # single generation's mechanics. It's considered to be good enough. Only
  # generations 5 and later are reasonably supported.
  MECHANICS_GENERATION: Integer

  # Your game's credits, in an array. You can allow certain lines to be
  # translated by wrapping them in _INTL() as shown. Blank lines are just "".
  # To split a line into two columns, put "<s>" in it. Plugin credits and
  # Essentials engine credits are added to the end of these credits
  # automatically.
  def self.game_credits: () -> Array[String]

  # The maximum amount of money the player can have.
  MAX_MONEY: Integer

  # The maximum number of Game Corner coins the player can have.
  MAX_COINS: Integer

  # The maximum number of Battle Points the player can have.
  MAX_BATTLE_POINTS: Integer

  # The maximum amount of soot the player can have.
  MAX_SOOT: Integer

  # The maximum length, in characters, that the player's name can be.
  MAX_PLAYER_NAME_SIZE: Integer

  type rival_name = [Symbol, Integer]
  # A set of arrays each containing a trainer type followed by a Game Variable
  # number. If the Variable isn't set to 0, then all trainers with the
  # associated trainer type will be named as whatever is in that Variable.
  RIVAL_NAMES: Array[rival_name]

  # Whether outdoor maps should be shaded according to the time of day.
  TIME_SHADING: bool

  # Whether the reflections of the player/events will ripple horizontally.
  ANIMATE_REFLECTIONS: bool

  # Whether planted berries grow according to Gen 4 mechanics (true) or Gen 3
  # mechanics (false).
  NEW_BERRY_PLANTS: bool

  # Whether fishing automatically hooks the PokÃ©mon (true), or whether there is
  # a reaction test first (false).
  FISHING_AUTO_HOOK: bool

  # The ID of the common event that runs when the player starts fishing (runs
  # instead of showing the casting animation).
  FISHING_BEGIN_COMMON_EVENT: Integer

  # The ID of the common event that runs when the player stops fishing (runs
  # instead of showing the reeling in animation).
  FISHING_END_COMMON_EVENT: Integer

  # The number of steps allowed before a Safari Zone game is over (0=infinite).
  SAFARI_STEPS: Integer

  # The number of seconds a Bug-Catching Contest lasts for (0=infinite).
  BUG_CONTEST_TIME: Integer

  # Pairs of map IDs, where the location signpost isn't shown when moving from
  # one of the maps in a pair to the other (and vice versa). Useful for single
  # long routes/towns that are spread over multiple maps.
  #   e.g. [4,5,16,17,42,43] will be map pairs 4,5 and 16,17 and 42,43.
  # Moving between two maps that have the exact same name won't show the
  # location signpost anyway, so you don't need to list those maps here.
  NO_SIGNPOSTS: Array[Integer]

  # Whether poisoned PokÃ©mon will lose HP while walking around in the field.
  POISON_IN_FIELD: bool

  # Whether poisoned PokÃ©mon will faint while walking around in the field
  # (true), or survive the poisoning with 1 HP (false).
  POISON_FAINT_IN_FIELD: bool

  # ----------------------------------------------------------------------------
  # Using moves in the overworld
  # ----------------------------------------------------------------------------
  # Whether you need at least a certain number of badges to use some hidden
  # moves in the field (true), or whether you need one specific badge to use
  # them (false). The amounts/specific badges are defined below.
  FIELD_MOVES_COUNT_BADGES: bool

  # Depending on FIELD_MOVES_COUNT_BADGES, either the number of badges required
  # to use each hidden move in the field, or the specific badge number required
  # to use each move. Remember that badge 0 is the first badge, badge 1 is the
  # second badge, etc.
  #   e.g. To require the second badge, put false and 1.
  #        To require at least 2 badges, put true and 2.
  BADGE_FOR_CUT: Integer

  BADGE_FOR_FLASH: Integer

  BADGE_FOR_ROCKSMASH: Integer

  BADGE_FOR_SURF: Integer

  BADGE_FOR_FLY: Integer

  BADGE_FOR_STRENGTH: Integer

  BADGE_FOR_DIVE: Integer

  BADGE_FOR_WATERFALL: Integer

  # The maximum level PokÃ©mon can reach.
  MAXIMUM_LEVEL: Integer

  # The level of newly hatched PokÃ©mon.
  EGG_LEVEL: Integer

  # The odds of a newly generated PokÃ©mon being shiny (out of 65536).
  SHINY_POKEMON_CHANCE: Integer

  # Whether super shininess is enabled (uses a different shiny animation).
  SUPER_SHINY: bool

  # The odds of a wild PokÃ©mon/bred egg having PokÃ©rus (out of 65536).
  POKERUS_CHANCE: Integer

  # Whether IVs and EVs are treated as 0 when calculating a PokÃ©mon's stats.
  # IVs and EVs still exist, and are used by Hidden Power and some cosmetic
  # things as normal.
  DISABLE_IVS_AND_EVS: bool

  # Whether the Move Relearner can also teach egg moves that the PokÃ©mon knew
  # when it hatched and moves that the PokÃ©mon was once taught by a TR. Moves
  # from the PokÃ©mon's level-up moveset of the same or a lower level than the
  # PokÃ©mon can always be relearned.
  MOVE_RELEARNER_CAN_TEACH_MORE_MOVES: bool

  # Whether PokÃ©mon in the Day Care gain Exp for each step the player takes.
  # This should be true for the Day Care and false for the PokÃ©mon Nursery, both
  # of which use the same code in Essentials.
  DAY_CARE_POKEMON_GAIN_EXP_FROM_WALKING: bool

  # Whether two PokÃ©mon in the Day Care can learn egg moves from each other if
  # they are the same species.
  DAY_CARE_POKEMON_CAN_SHARE_EGG_MOVES: bool

  # Whether a bred baby PokÃ©mon can inherit any TM/TR/HM moves from its father.
  # It can never inherit TM/TR/HM moves from its mother.
  BREEDING_CAN_INHERIT_MACHINE_MOVES: bool

  # Whether a bred baby PokÃ©mon can inherit egg moves from its mother. It can
  # always inherit egg moves from its father.
  BREEDING_CAN_INHERIT_EGG_MOVES_FROM_MOTHER: bool

  # A list of maps used by roaming PokÃ©mon. Each map has an array of other maps
  # it can lead to.
  ROAMING_AREAS: Hash[Integer, Array[Integer]]

  type roaming_pokemon = [Symbol, Integer, Integer, Integer, String?, Hash[Integer, Array[Integer]]?]
  # A set of arrays, each containing the details of a roaming PokÃ©mon. The
  # information within each array is as follows:
  #   * Species.
  #   * Level.
  #   * Game Switch; the PokÃ©mon roams while this is ON.
  #   * Encounter type (see def pbRoamingMethodAllowed for their use):
  #       0 = grass, walking in cave, surfing
  #       1 = grass, walking in cave
  #       2 = surfing
  #       3 = fishing
  #       4 = surfing, fishing
  #   * Name of BGM to play for that encounter (optional).
  #   * Roaming areas specifically for this PokÃ©mon (optional; used instead of
  #     ROAMING_AREAS).
  ROAMING_SPECIES: Array[roaming_pokemon]

  # The maximum number of PokÃ©mon that can be in the party.
  MAX_PARTY_SIZE: Integer

  # The number of boxes in PokÃ©mon storage.
  NUM_STORAGE_BOXES: Integer

  # Whether putting a PokÃ©mon into PokÃ©mon storage will heal it. If false, they
  # are healed by the Recover All: Entire Party event command (at PokÃ© Centers).
  HEAL_STORED_POKEMON: bool

  # Whether various HP-healing items heal the amounts they do in Gen 7+ (true)
  # or in earlier Generations (false).
  REBALANCED_HEALING_ITEM_AMOUNTS: bool

  # Whether vitamins can add EVs no matter how many that stat already has in it
  # (true), or whether they can't make that stat's EVs greater than 100 (false).
  NO_VITAMIN_EV_CAP: bool

  # Whether Rage Candy Bar acts as a Full Heal (true) or a Potion (false).
  RAGE_CANDY_BAR_CURES_STATUS_PROBLEMS: bool

  # Whether the Black/White Flutes will raise/lower the levels of wild PokÃ©mon
  # respectively (true), or will lower/raise the wild encounter rate
  # respectively (false).
  FLUTES_CHANGE_WILD_ENCOUNTER_LEVELS: bool

  # Whether Rare Candy can be used on a PokÃ©mon that is already at its maximum
  # level if it is able to evolve by level-up (if so, triggers that evolution).
  RARE_CANDY_USABLE_AT_MAX_LEVEL: bool

  # Whether the player can choose how many of an item to use at once on a
  # PokÃ©mon. This applies to Exp-changing items (Rare Candy, Exp Candies) and
  # EV-changing items (vitamins, feathers, EV-lowering berries).
  USE_MULTIPLE_STAT_ITEMS_AT_ONCE: bool

  # If a move taught by a TM/HM/TR replaces another move, this setting is
  # whether the machine's move retains the replaced move's PP (true), or whether
  # the machine's move has full PP (false).
  TAUGHT_MACHINES_KEEP_OLD_PP: bool

  # Whether you get 1 Premier Ball for every 10 of any kind of PokÃ© Ball bought
  # from a Mart at once (true), or 1 Premier Ball for buying 10+ regular PokÃ©
  # Balls (false).
  MORE_BONUS_PREMIER_BALLS: bool

  # The names of each pocket of the Bag.
  def self.bag_pocket_names: () -> Array[String]

  # The maximum number of slots per pocket (-1 means infinite number).
  BAG_MAX_POCKET_SIZE: Array[Integer]

  # Whether each pocket in turn auto-sorts itself by the order items are defined
  # in the PBS file items.txt.
  BAG_POCKET_AUTO_SORT: Array[bool]

  # The maximum number of items each slot in the Bag can hold.
  BAG_MAX_PER_SLOT: Integer

  type pokedex_region = [String, Integer]
  # The names of the PokÃ©dex lists, in the order they are defined in the PBS
  # file "regional_dexes.txt". The last name is for the National Dex and is
  # added onto the end of this array.
  # Each entry is either just a name, or is an array containing a name and a
  # number. If there is a number, it is a region number as defined in
  # town_map.txt. If there is no number, the number of the region the player is
  # currently in will be used. The region number determines which Town Map is
  # shown in the Area page when viewing that PokÃ©dex list.
  def self.pokedex_names: () -> Array[String | pokedex_region]

  # Whether the PokÃ©dex list shown is the one for the player's current region
  # (true), or whether a menu pops up for the player to manually choose which
  # Dex list to view if more than one is available (false).
  USE_CURRENT_REGION_DEX: bool

  # Whether all forms of a given species will be immediately available to view
  # in the PokÃ©dex so long as that species has been seen at all (true), or
  # whether each form needs to be seen specifically before that form appears in
  # the PokÃ©dex (false).
  DEX_SHOWS_ALL_FORMS: bool

  # An array of numbers, where each number is that of a Dex list (in the same
  # order as above, except the National Dex is -1). All Dex lists included here
  # will begin their numbering at 0 rather than 1 (e.g. Victini in Unova's Dex).
  DEXES_WITH_OFFSETS: Array[Integer]

  # Whether the PokÃ©dex entry of a newly owned species will be shown after it
  # hatches from an egg, after it evolves and after obtaining it from a trade,
  # in addition to after catching it in battle.
  SHOW_NEW_SPECIES_POKEDEX_ENTRY_MORE_OFTEN: bool

  type map_extra = [Integer, Integer, Integer, String, bool]
  # A set of arrays, each containing details of a graphic to be shown on the
  # region map if appropriate. The values for each array are as follows:
  #   * Region number.
  #   * Game Switch; the graphic is shown if this is ON (non-wall maps only).
  #   * X coordinate of the graphic on the map, in squares.
  #   * Y coordinate of the graphic on the map, in squares.
  #   * Name of the graphic, found in the Graphics/UI/Town Map folder.
  #   * The graphic will always (true) or never (false) be shown on a wall map.
  REGION_MAP_EXTRAS: Array[map_extra]

  # Whether the player can use Fly while looking at the Town Map. This is only
  # allowed if the player can use Fly normally.
  CAN_FLY_FROM_TOWN_MAP: bool

  # The default setting for Phone.rematches_enabled, which determines whether
  # trainers registered in the Phone can become ready for a rematch. If false,
  # Phone.rematches_enabled = true will enable rematches at any point you want.
  PHONE_REMATCHES_POSSIBLE_FROM_BEGINNING: bool

  # Whether the messages in a phone call with a trainer are colored blue or red
  # depending on that trainer's gender. Note that this doesn't apply to contacts
  # whose phone calls are in a Common Event; they will need to be colored
  # manually in their Common Events.
  COLOR_PHONE_CALL_MESSAGES_BY_CONTACT_GENDER: bool

  # Whether Repel uses the level of the first PokÃ©mon in the party regardless of
  # its HP (true), or it uses the level of the first unfainted PokÃ©mon (false).
  REPEL_COUNTS_FAINTED_POKEMON: bool

  # Whether more abilities affect whether wild PokÃ©mon appear, which PokÃ©mon
  # they are, etc.
  MORE_ABILITIES_AFFECT_WILD_ENCOUNTERS: bool

  # Whether shiny wild PokÃ©mon are more likely to appear if the player has
  # previously defeated/caught lots of other PokÃ©mon of the same species.
  HIGHER_SHINY_CHANCES_WITH_NUMBER_BATTLED: bool

  # Whether overworld weather can set the default terrain effect in battle.
  # Storm weather sets Electric Terrain, and fog weather sets Misty Terrain.
  OVERWORLD_WEATHER_SETS_BATTLE_TERRAIN: bool

  # The Game Switch that is set to ON when the player blacks out.
  STARTING_OVER_SWITCH: Integer

  # The Game Switch that is set to ON when the player has seen PokÃ©rus in the
  # PokÃ© Center (and doesn't need to be told about it again).
  SEEN_POKERUS_SWITCH: Integer

  # The Game Switch which, while ON, makes all wild PokÃ©mon created be shiny.
  SHINY_WILD_POKEMON_SWITCH: Integer

  # The Game Switch which, while ON, makes all PokÃ©mon created considered to be
  # met via a fateful encounter.
  FATEFUL_ENCOUNTER_SWITCH: Integer

  # The Game Switch which, while ON, disables the effect of the PokÃ©mon Box Link
  # and prevents the player from accessing PokÃ©mon storage via the party screen
  # with it.
  DISABLE_BOX_LINK_SWITCH: Integer

  # ID of the animation played when the player steps on grass (grass rustling).
  GRASS_ANIMATION_ID: Integer

  # ID of the animation played when the player lands on the ground after hopping
  # over a ledge (shows a dust impact).
  DUST_ANIMATION_ID: Integer

  # ID of the animation played when a trainer notices the player (an exclamation
  # bubble).
  EXCLAMATION_ANIMATION_ID: Integer

  # ID of the animation played when a patch of grass rustles due to using the
  # PokÃ© Radar.
  RUSTLE_NORMAL_ANIMATION_ID: Integer

  # ID of the animation played when a patch of grass rustles vigorously due to
  # using the PokÃ© Radar. (Rarer species)
  RUSTLE_VIGOROUS_ANIMATION_ID: Integer

  # ID of the animation played when a patch of grass rustles and shines due to
  # using the PokÃ© Radar. (Shiny encounter)
  RUSTLE_SHINY_ANIMATION_ID: Integer

  # ID of the animation played when a berry tree grows a stage while the player
  # is on the map (for new plant growth mechanics only).
  PLANT_SPARKLE_ANIMATION_ID: Integer

  type language = [String, String]
  # An array of available languages in the game. Each one is an array containing
  # the display name of the language in-game, and that language's filename
  # fragment. A language will use the language data files from the Data folder
  # called messages_FRAGMENT_core.dat and messages_FRAGMENT_game.dat (if they
  # exist).
  LANGUAGES: Array[language]

  # The default screen width (at a scale of 1.0). You should also edit the
  # property "defScreenW" in mkxp.json to match.
  SCREEN_WIDTH: Integer

  # The default screen height (at a scale of 1.0). You should also edit the
  # property "defScreenH" in mkxp.json to match.
  SCREEN_HEIGHT: Integer

  # The default screen scale factor. Possible values are 0.5, 1.0, 1.5 and 2.0.
  SCREEN_SCALE: Float

  # Available speech frames. These are graphic files in "Graphics/Windowskins/".
  SPEECH_WINDOWSKINS: Array[String]

  # Available menu frames. These are graphic files in "Graphics/Windowskins/".
  MENU_WINDOWSKINS: Array[String]

  # Whether the game will ask you if you want to fully compile every time you
  # start the game (in Debug mode). You will not need to hold Ctrl/Shift to
  # compile anything.
  PROMPT_TO_COMPILE: bool

  # Whether the game will skip the Continue/New Game screen and go straight into
  # a saved game (if there is one) or start a new game (if there isn't). Only
  # applies to playing in Debug mode.
  SKIP_CONTINUE_SCREEN: bool
end

# ==============================================================================
# DO NOT EDIT THESE!
# ==============================================================================
module Essentials
  VERSION: String

  ERROR_TEXT: String

  MKXPZ_VERSION: String
end


