# TypeProf 0.21.3

# Classes
class Event
  @callbacks: Array[Proc]

  def initialize: -> void
  def set: (Proc method) -> void
  def -: (Proc other) -> void
  def +: (Proc other) -> void
  def clear: -> void
  def trigger: (*untyped arg) -> void
  def trigger2: (*untyped arg) -> void
end

class NamedEvent
  @callbacks: Hash[String, Proc]

  def initialize: -> void
  def add: (String key, Proc proc) -> void
  def remove: (String key) -> void
  def clear: -> void
  def trigger: (*untyped args) -> void
end

class HandlerHash[K, V]
  @hash: Hash[K, V]

  def initialize: -> void
  def []: (K id) -> V?
  def add: (K id, ?V? handler) -> void
  def copy: (K src, *K dests) -> void
  def remove: (K key) -> void
  def clear: -> void
  def each: -> void
  def keys: () -> Array[K]
  def trigger: (K id, *untyped args) -> untyped
end

class HandlerHashSymbol[T]
  @hash: Hash[Symbol, T?]
  @add_ifs: Hash[Symbol, [Proc, T?]]

  def initialize: -> void
  def []: (Symbol sym) -> T?
  def add: (Symbol sym, ?T? handler) -> void
  def addIf: (Symbol sym, ^(Symbol) -> bool conditionProc, ?T? handler) { (*untyped) -> untyped } -> void
  def copy: (Symbol src, *Symbol dests) -> void
  def remove: (Symbol key) -> void
  def clear: -> void
  def trigger: (Symbol sym, *untyped args) -> untyped
end

class HandlerHashEnum[T]
  @mod: Module
  @hash: Hash[Symbol, T?]
  @addIfs: Array[[Proc, T?]]
  @symbolCache: Hash[Symbol, Symbol]

  def initialize: (Module mod) -> void
  def []: (Symbol sym) -> T
  def fromSymbol: (Symbol sym) -> void
  def toSymbol: (Symbol sym) -> void
  def add: (Symbol sym, ?Proc? handler) -> void
  def addIf: (Proc conditionProc, ?Proc? handler) -> void
  def copy: (Symbol src, *Symbol dests) -> void
  def clear: -> void
  def trigger: (Symbol sym, *untyped args) -> void
end

class SpeciesHandlerHash[Schema] < HandlerHashSymbol[Schema]
end

class AbilityHandlerHash[T] < HandlerHashSymbol[T]
end

class ItemHandlerHash[T] < HandlerHashSymbol[T]
end

class MoveHandlerHash[T] < HandlerHashSymbol[T]
end



