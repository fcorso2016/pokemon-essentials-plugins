module BattleAnimationEditor
  # ============================================================================
  # Paths and interpolation
  # ============================================================================
  class ControlPointSprite < Sprite
    attr_accessor dragging: bool

    def initialize: (bool red, ?Viewport? viewport) -> void

    def mouseover: () -> void

    def hittest?: () -> bool
  end

  # ============================================================================
  #
  # ============================================================================
  class PointSprite < Sprite
    def initialize: (Integer x, Integer y, ?Viewport? viewport) -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class PointPath
    include Enumerable[[Math::double, Math::double]]
    include _Inspectable

    @distances: Array[Math::double]
    @points: Array[[Math::double, Math::double]]

    @totaldist: Math::double

    def initialize: () -> void

    def []: (Integer x) -> [Math::double, Math::double]

    def each: () { ([Math::double, Math::double]) -> void } -> void

    def size: () -> Integer

    def length: () -> Integer

    def totalDistance: () -> Math::double

    def isEndPoint?: (Math::double x, Math::double y) -> bool

    def addPoint: (Math::double x, Math::double y) -> void

    def clear: () -> void

    def smoothPointPath: (Integer frames, ?bool roundValues) -> PointPath

    def pointOnPath: (Math::double t) -> [Integer, Integer]?
  end

  # ============================================================================
  #
  # ============================================================================
  def self?.catmullRom: (Math::double p1, Math::double p2, Math::double p3, Math::double p4, Math::double t) -> Math::double

  def self?.getCatmullRomPoint: (PointPath src, Math::double t) -> [Math::double, Math::double]

  def self?.getCurvePoint: (PointPath src, Math::double t) -> [Math::double, Math::double]

  def self?.curveToPointPath: (PointPath curve, Integer numpoints) -> void

  def self?.pbDefinePath: (AnimationCanvas canvas) -> void
end

