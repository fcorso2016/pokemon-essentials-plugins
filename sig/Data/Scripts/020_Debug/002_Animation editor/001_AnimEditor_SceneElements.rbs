module BattleAnimationEditor
  # ============================================================================
  # Controls
  # ============================================================================
  class Window_Menu < Window_CommandPokemon
    def initialize: (untyped commands, untyped x, untyped y) -> void

    def hittest: () -> (-1 | untyped)
  end

  # ============================================================================
  # Clipboard
  # ============================================================================
  module Clipboard
    def self.data: () -> (nil | untyped)

    def self.typekey: () -> untyped

    def self.setData: (untyped data, untyped key) -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  def self?.pbTrackPopupMenu: (untyped commands) -> (-1 | untyped)

  # ============================================================================
  # Sprite sheet scrolling bar
  # ============================================================================
  class AnimationWindow < Sprite
    attr_reader animbitmap: untyped

    attr_reader start: untyped

    attr_reader selected: untyped

    NUMFRAMES: 5

    def initialize: (untyped x, untyped y, untyped width, untyped height, ?untyped? viewport) -> void

    def animbitmap=: (untyped val) -> untyped

    def selected=: (untyped val) -> untyped

    def dispose: () -> untyped

    def drawrect: (untyped bm, untyped x, untyped y, untyped width, untyped height, untyped color) -> untyped

    def drawborder: (untyped bm, untyped x, untyped y, untyped width, untyped height, untyped color) -> untyped

    def refresh: () -> untyped

    def changed?: () -> untyped

    def update: () -> (nil | untyped)
  end

  # ============================================================================
  #
  # ============================================================================
  class CanvasAnimationWindow < AnimationWindow
    def animbitmap: () -> untyped

    def initialize: (untyped canvas, untyped x, untyped y, untyped width, untyped height, ?untyped? viewport) -> void
  end

  # ============================================================================
  # Cel sprite
  # ============================================================================
  class InvalidatableSprite < Sprite
    def initialize: (?untyped? viewport) -> void

    # Marks that the control must be redrawn to reflect current logic.
    def invalidate: () -> untyped

    # Determines whether the control is invalid
    def invalid?: () -> untyped

    # Marks that the control is valid.  Normally called only by repaint.
    def validate: () -> untyped

    # Redraws the sprite only if it is invalid, and then revalidates the sprite
    def repaint: () -> (untyped | nil)

    # Redraws the sprite.  This method should not check whether
    # the sprite is invalid, to allow it to be explicitly called.
    def refresh: () -> nil
  end

  # ============================================================================
  #
  # ============================================================================
  class SpriteFrame < InvalidatableSprite
    attr_reader id: untyped

    attr_reader locked: untyped

    attr_reader selected: untyped

    attr_reader sprite: untyped

    NUM_ROWS: untyped

    def initialize: (untyped id, untyped sprite, untyped viewport, ?bool previous) -> void

    def dispose: () -> untyped

    def sprite=: (untyped value) -> untyped

    def locked=: (untyped value) -> untyped

    def selected=: (untyped value) -> untyped

    def refresh: () -> untyped
  end

  # ============================================================================
  # Canvas
  # ============================================================================
  class AnimationCanvas < Sprite
    attr_reader viewport: untyped

    attr_reader sprites: untyped

    attr_reader currentframe: untyped

    attr_reader currentcel: untyped

    attr_reader animation: untyped

    attr_reader animbitmap: untyped

    attr_accessor pattern: untyped

    BORDERSIZE: 64

    def initialize: (untyped animation, ?untyped? viewport) -> void

    def loadAnimation: (untyped anim) -> untyped

    def animbitmap=: (untyped value) -> untyped

    def dispose: () -> untyped

    def play: (?bool oppmove) -> (untyped | nil)

    def invalidate: () -> untyped

    def invalidateCel: (untyped i) -> untyped

    def currentframe=: (untyped value) -> untyped

    def getCurrentFrame: () -> (nil | untyped)

    def setFrame: (untyped i) -> (untyped | nil)

    def setPreviousFrame: (untyped i) -> untyped

    def offsetFrame: (untyped frame, untyped ox, untyped oy) -> (untyped | nil)

    # Clears all items in the frame except locked items
    def clearFrame: (untyped frame) -> (untyped | nil)

    def insertFrame: (untyped frame) -> (nil | untyped)

    def copyFrame: (untyped src, untyped dst) -> (nil | untyped)

    def pasteFrame: (untyped frame) -> (nil | untyped)

    def deleteFrame: (untyped frame) -> (nil | untyped)

    # This frame becomes a copy of the previous frame
    def pasteLast: () -> (untyped | nil)

    def currentCel: () -> (nil | untyped)

    def pasteCel: (untyped x, untyped y) -> (nil | untyped)

    def deleteCel: (untyped cel) -> (nil | untyped)

    def swapCels: (untyped cel1, untyped cel2) -> (nil | untyped)

    def locked?: (untyped celindex) -> (false | untyped)

    def deletable?: (untyped celindex) -> (true | false)

    def setBitmap: (untyped i, untyped frame) -> (untyped | nil)

    def setSpriteBitmap: (untyped sprite, untyped cel) -> (untyped | nil)

    def addSprite: (untyped x, untyped y) -> bool

    def pbSpriteHitTest: (untyped sprite, untyped x, untyped y, ?bool usealpha, ?bool wholecanvas) -> bool

    def updateInput: () -> (nil | untyped)

    def update: () -> (nil | untyped)
  end

  # ============================================================================
  # Window classes
  # ============================================================================
  class BitmapDisplayWindow < SpriteWindow_Base
    attr_reader bitmapname: untyped

    attr_reader hue: untyped

    def initialize: (untyped x, untyped y, untyped width, untyped height) -> void

    def bitmapname=: (untyped value) -> (untyped | nil)

    def hue=: (untyped value) -> (untyped | nil)

    def refresh: () -> (nil | untyped)
  end

  # ============================================================================
  #
  # ============================================================================
  class AnimationNameWindow
    def initialize: (untyped canvas, untyped x, untyped y, untyped width, untyped height, ?untyped? viewport) -> void

    def viewport=: (untyped value) -> untyped

    def update: () -> untyped

    def refresh: () -> untyped

    def dispose: () -> untyped

    def disposed: () -> untyped
  end
end


