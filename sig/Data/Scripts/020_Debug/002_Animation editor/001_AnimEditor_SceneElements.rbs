module BattleAnimationEditor
  # ============================================================================
  # Controls
  # ============================================================================
  class Window_Menu < Window_CommandPokemon
    def initialize: (Array[String] commands, Integer x, Integer y) -> void

    def hittest: () -> Integer
  end

  # ============================================================================
  # Clipboard
  # ============================================================================
  module Clipboard
    @data: untyped?
    @typekey: String

    def self.data: () -> untyped?

    def self.typekey: () -> String

    def self.setData: (untyped data, String key) -> void
  end

  # ============================================================================
  #
  # ============================================================================
  def self?.pbTrackPopupMenu: (Array[String] commands) -> Integer

  # ============================================================================
  # Sprite sheet scrolling bar
  # ============================================================================
  class AnimationWindow < Sprite
    include _Refreshable

    @arrows: AnimatedBitmap

    @changed: bool
    @contents: Bitmap

    attr_reader animbitmap: AnimatedBitmap?

    attr_reader start: Integer

    attr_reader selected: Integer

    NUMFRAMES: Integer

    def initialize: (Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> void

    def animbitmap=: (AnimatedBitmap? val) -> void

    def selected=: (Integer val) -> void

    def drawrect: (Bitmap bm, Integer x, Integer y, Integer width, Integer height, Color color) -> void

    def drawborder: (Bitmap bm, Integer x, Integer y, Integer width, Integer height, Color color) -> void

    def changed?: () -> bool
  end

  # ============================================================================
  #
  # ============================================================================
  class CanvasAnimationWindow < AnimationWindow
    @canvas: AnimationCanvas

    def animbitmap: () -> AnimatedBitmap?

    def initialize: (AnimationCanvas canvas, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> void
  end

  # ============================================================================
  # Cel sprite
  # ============================================================================
  class InvalidatableSprite < Sprite
    include _Refreshable

    @invalid: bool

    def initialize: (?Viewport? viewport) -> void

    # Marks that the control must be redrawn to reflect current logic.
    def invalidate: () -> void

    # Determines whether the control is invalid
    def invalid?: () -> bool

    # Marks that the control is valid.  Normally called only by repaint.
    def validate: () -> void

    # Redraws the sprite only if it is invalid, and then revalidates the sprite
    def repaint: () -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class SpriteFrame < InvalidatableSprite
    @contents: Bitmap
    @iconbitmap: AnimatedBitmap
    @prevcolor: Color
    @previous: bool
    @selcolor: Color

    @unselcolor: Color

    attr_reader id: Integer

    attr_reader locked: bool

    attr_reader selected: bool

    attr_reader sprite: Sprite

    NUM_ROWS: Integer

    def initialize: (Integer id, Sprite sprite, Viewport viewport, ?bool previous) -> void

    def sprite=: (Sprite value) -> void

    def locked=: (bool value) -> void

    def selected=: (bool value) -> void
  end

  # ============================================================================
  # Canvas
  # ============================================================================
  class AnimationCanvas < Sprite
    @battle: MiniBattle

    @celsprites: Array[Sprite]
    @dirty: Array[bool]
    @framesprites: Array[Sprite]
    @lastframesprites: Array[Sprite]
    @player: AnimatedBitmap?
    @playing: bool
    @playingframe: Integer
    @selectOffsetX: Integer
    @selectOffsetY: Integer
    @selecting: bool
    @target: AnimatedBitmap
    @testscreen: AnimatedBitmap
    @user: AnimatedBitmap
    @selectedbitmap: AnimatedBitmap?
    @celbitmap: AnimatedBitmap?

    attr_reader viewport: Viewport

    attr_reader sprites: Hash[String, _Visualizable]

    attr_reader currentframe: Integer

    attr_reader currentcel: Integer

    attr_reader animation: PBAnimation

    attr_reader animbitmap: AnimatedBitmap?

    attr_accessor anim_pattern: Integer

    BORDERSIZE: Integer

    def initialize: (PBAnimation animation, ?Viewport? viewport) -> void

    def loadAnimation: (PBAnimation anim) -> void

    def animbitmap=: (AnimatedBitmap? value) -> void

    def play: (?bool oppmove) -> void

    def invalidate: () -> void

    def invalidateCel: (Integer i) -> void

    def currentframe=: (Integer value) -> void

    def getCurrentFrame: () -> [Array[Integer], Array[Integer]]?

    def setFrame: (Integer i) -> void

    def setPreviousFrame: (Integer i) -> void

    def offsetFrame: (Integer frame, Integer ox, Integer oy) -> void

    # Clears all items in the frame except locked items
    def clearFrame: (Integer frame) -> void

    def insertFrame: (Integer frame) -> void

    def copyFrame: (Integer src, Integer dst) -> void

    def pasteFrame: (Integer frame) -> void

    def deleteFrame: (Integer frame) -> void

    # This frame becomes a copy of the previous frame
    def pasteLast: () -> void

    def currentCel: () -> Array[Integer]

    def pasteCel: (Integer x, Integer y) -> void

    def deleteCel: (Integer cel) -> void

    def swapCels: (Integer cel1, Integer cel2) -> void

    def locked?: (Integer celindex) -> bool

    def deletable?: (Integer celindex) -> bool

    def setBitmap: (Integer i, Integer frame) -> void

    def setSpriteBitmap: (Sprite? sprite, Array[Integer] cel) -> void

    def addSprite: (Integer x, Integer y) -> bool

    def pbSpriteHitTest: (Sprite? sprite, Integer x, Integer y, ?bool usealpha, ?bool wholecanvas) -> bool

    def updateInput: () -> void
  end

  # ============================================================================
  # Window classes
  # ============================================================================
  class BitmapDisplayWindow < SpriteWindow_Base
    include _Refreshable

    attr_reader bitmapname: String

    attr_reader hue: Math::double

    def initialize: (Integer x, Integer y, Integer width, Integer height) -> void

    def bitmapname=: (String value) -> void

    def hue=: (Math::double value) -> void

  end

  # ============================================================================
  #
  # ============================================================================
  class AnimationNameWindow
    include _Disposable
    include _Updatable
    include _Refreshable

    @canvas: AnimationCanvas

    @oldname: String?

    @window: Window_UnformattedTextPokemon

    def initialize: (AnimationCanvas canvas, Integer x, Integer y, Integer width, Integer height, ?Viewport? viewport) -> void

    def viewport=: (Viewport value) -> void

    def disposed: () -> bool
  end
end

