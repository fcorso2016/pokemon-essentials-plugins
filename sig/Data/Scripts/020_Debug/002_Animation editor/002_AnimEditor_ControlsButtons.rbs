module BattleAnimationEditor
  # ============================================================================
  #
  # ============================================================================
  module ShadowText
    def shadowtext: (untyped bitmap, untyped x, untyped y, untyped w, untyped h, untyped t, ?bool disabled, ?::Integer align) -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class UIControl
    include ShadowText

    attr_accessor bitmap: untyped

    attr_accessor label: untyped

    attr_accessor x: untyped

    attr_accessor y: untyped

    attr_accessor width: untyped

    attr_accessor height: untyped

    attr_accessor changed: untyped

    attr_accessor parent: untyped

    attr_accessor disabled: untyped

    def text: () -> untyped

    def text=: (untyped value) -> untyped

    def initialize: (untyped label) -> void

    def toAbsoluteRect: (untyped rc) -> untyped

    def parentX: () -> (0 | untyped)

    def parentY: () -> (0 | untyped)

    def invalid?: () -> untyped

    # Marks that the control must be redrawn to reflect current logic.
    def invalidate: () -> untyped

    # Updates the logic on the control, invalidating it if necessary.
    def update: () -> nil

    # Redraws the control.
    def refresh: () -> nil

    # Makes the control no longer invalid.
    def validate: () -> untyped

    # Redraws the control only if it is invalid.
    def repaint: () -> (nil | untyped)
  end

  # ============================================================================
  #
  # ============================================================================
  class Label < UIControl
    def text=: (untyped value) -> untyped

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class Button < UIControl
    attr_accessor label: untyped

    def initialize: (untyped label) -> void

    def update: () -> (nil | untyped)

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class Checkbox < Button
    attr_reader checked: untyped

    def curvalue: () -> untyped

    def curvalue=: (untyped value) -> untyped

    def checked=: (untyped value) -> untyped

    def initialize: (untyped label) -> void

    def update: () -> untyped

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class TextField < UIControl
    attr_accessor label: untyped

    attr_reader text: untyped

    def text=: (untyped value) -> untyped

    def initialize: (untyped label, untyped text) -> void

    def insert: (untyped ch) -> untyped

    def delete: () -> untyped

    def update: () -> (nil | untyped)

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class Slider < UIControl
    attr_reader minvalue: untyped

    attr_reader maxvalue: untyped

    attr_reader curvalue: untyped

    attr_accessor label: untyped

    def curvalue=: (untyped value) -> untyped

    def minvalue=: (untyped value) -> untyped

    def maxvalue=: (untyped value) -> untyped

    def initialize: (untyped label, untyped minvalue, untyped maxvalue, untyped curval) -> void

    def update: () -> (false | untyped)

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class OptionalSlider < Slider
    def initialize: (untyped label, untyped minvalue, untyped maxvalue, untyped curvalue) -> void

    def curvalue: () -> (untyped | nil)

    def curvalue=: (untyped value) -> untyped

    def checked: () -> untyped

    def checked=: (untyped value) -> untyped

    def invalid?: () -> untyped

    def invalidate: () -> untyped

    def validate?: () -> untyped

    def changed: () -> untyped

    def minvalue: () -> untyped

    def minvalue=: (untyped value) -> untyped

    def maxvalue: () -> untyped

    def maxvalue=: (untyped value) -> untyped

    def update: () -> untyped

    def refresh: () -> untyped

    private

    def updatedefs: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class ArrayCountSlider < Slider
    def maxvalue: () -> untyped

    def initialize: (untyped array, untyped label) -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class FrameCountSlider < Slider
    def maxvalue: () -> untyped

    def initialize: (untyped canvas) -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class FrameCountButton < Button
    def label: () -> untyped

    def initialize: (untyped canvas) -> void
  end

  # ============================================================================
  #
  # ============================================================================
  class TextSlider < UIControl
    attr_reader minvalue: untyped

    attr_reader maxvalue: untyped

    attr_reader curvalue: untyped

    attr_accessor label: untyped

    attr_accessor options: untyped

    attr_accessor maxoptionwidth: untyped

    def curvalue=: (untyped value) -> untyped

    def minvalue=: (untyped value) -> untyped

    def maxvalue=: (untyped value) -> untyped

    def initialize: (untyped label, untyped options, untyped curval) -> void

    def update: () -> (false | untyped)

    def refresh: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class OptionalTextSlider < TextSlider
    def initialize: (untyped label, untyped options, untyped curval) -> void

    def curvalue: () -> (untyped | nil)

    def curvalue=: (untyped value) -> untyped

    def checked: () -> untyped

    def checked=: (untyped value) -> untyped

    def invalid?: () -> untyped

    def invalidate: () -> untyped

    def validate?: () -> untyped

    def changed: () -> untyped

    def minvalue: () -> untyped

    def minvalue=: (untyped value) -> untyped

    def maxvalue: () -> untyped

    def maxvalue=: (untyped value) -> untyped

    def update: () -> untyped

    def refresh: () -> untyped

    private

    def updatedefs: () -> untyped
  end

  # ============================================================================
  #
  # ============================================================================
  class ControlWindow < SpriteWindow_Base
    attr_reader controls: untyped

    def initialize: (untyped x, untyped y, untyped width, untyped height) -> void

    def dispose: () -> untyped

    def refresh: () -> untyped

    def repaint: () -> untyped

    def invalidate: () -> untyped

    def hittest?: (untyped i) -> (false | untyped)

    def addControl: (untyped control) -> untyped

    def addLabel: (untyped label) -> untyped

    def addButton: (untyped label) -> untyped

    def addSlider: (untyped label, untyped minvalue, untyped maxvalue, untyped curvalue) -> untyped

    def addOptionalSlider: (untyped label, untyped minvalue, untyped maxvalue, untyped curvalue) -> untyped

    def addTextSlider: (untyped label, untyped options, untyped curvalue) -> untyped

    def addOptionalTextSlider: (untyped label, untyped options, untyped curvalue) -> untyped

    def addCheckbox: (untyped label) -> untyped

    def addSpace: () -> untyped

    def update: () -> untyped

    def changed?: (untyped i) -> (false | untyped)

    def value: (untyped i) -> (false | untyped)
  end
end


