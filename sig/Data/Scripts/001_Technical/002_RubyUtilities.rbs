# ==============================================================================
# class Object
# ==============================================================================
class Object
  alias full_inspect inspect
end

# ==============================================================================
# class Class
# ==============================================================================
class Class
  def to_sym: () -> Symbol
end

# ==============================================================================
# class String
# ==============================================================================
class String
  def starts_with_vowel?: () -> bool

  def first: (Integer? n) -> String

  def last: (Integer? n) -> String

  def blank?: () -> bool

  def cut: (Bitmap bitmap, Integer width) -> String

  def numeric?: () -> bool
end

# ==============================================================================
# class Numeric
# ==============================================================================
class Numeric
  # Turns a number into a string formatted like 12,345,678.
  def to_s_formatted: () -> String

  def to_word: () -> String
end

# ==============================================================================
# class Array
# ==============================================================================
class Array[unchecked out Elem]
  # xor of two arrays
  def ^: [T] (Array[T] other) -> Array[T | Elem]

  def swap: (Elem val1, Elem val2) -> void
end

# ==============================================================================
# class Hash
# ==============================================================================
class Hash[unchecked out K, unchecked out V]
  def deep_merge: [S, T] (Hash[S, T] hash) -> Hash[S | K, T | V]

  def deep_merge!: (Hash[K, V] hash) -> void
end

# ==============================================================================
# module Enumerable
# ==============================================================================
module Enumerable[unchecked out Elem]
  def transform: () -> Array[Elem]
end

# ==============================================================================
# Collision testing
# ==============================================================================
class Rect < Object
  def contains?: (Integer cx, Integer cy) -> bool
end

# ==============================================================================
# class File
# ==============================================================================
class File
  # Copies the source file to the destination path.
  def self.copy: (String source, String destination) -> void

  # Copies the source to the destination and deletes the source.
  def self.move: (String source, String destination) -> void
end

# ==============================================================================
# class Color
# ==============================================================================
class Color
  # alias for old constructor
  alias init_original initialize

  # New constructor, accepts RGB values as well as a hex number or string value.
  def initialize: (Numeric red, Numeric green, Numeric blue, ?Numeric alpha) -> void
                  | () -> void
                  | (Integer rgb) -> void
                  | (String rgb) -> void

  def self.new_from_rgb: (Integer param) -> Color

  # @return [String] the 15-bit representation of this color in a string, ignoring its alpha
  def to_rgb15: () -> String

  # @return [String] this color in the format "RRGGBB", ignoring its alpha
  def to_rgb24: () -> String

  # @return [String] this color in the format "RRGGBBAA" (or "RRGGBB" if this color's alpha is 255)
  def to_rgb32: (bool? always_include_alpha) -> String

  # @return [String] this color in the format "#RRGGBB", ignoring its alpha
  def to_hex: () -> String

  # @return [Integer] this color in RGB format converted to an integer
  def to_i: () -> Integer

  # @return [Color] the contrasting color to this one
  def get_contrast_color: () -> Color

  # Converts the provided hex string/24-bit integer to RGB values.
  def self.hex_to_rgb: (Integer hex) -> [Integer, Integer, Integer]

  # Parses the input as a Color and returns a Color object made from it.
  def self.parse: (Color color) -> Color?

  # Returns color object for some commonly used colors.
  def self.red: () -> Color

  def self.green: () -> Color

  def self.blue: () -> Color

  def self.yellow: () -> Color

  def self.magenta: () -> Color

  def self.cyan: () -> Color

  def self.white: () -> Color

  def self.gray: () -> Color

  def self.black: () -> Color

  def self.pink: () -> Color

  def self.orange: () -> Color

  def self.purple: () -> Color

  def self.brown: () -> Color
end

# ==============================================================================
# Wrap code blocks in a class which passes data accessible as instance variables
# within the code block.
#
# wrapper = CallbackWrapper.new { puts @test }
# wrapper.set(test: "Hi")
# wrapper.execute  #=>  "Hi"
# ==============================================================================
class CallbackWrapper
  @params: Hash[String, untyped]
  @code_block: Proc


  def initialize: (Proc block) -> void

  def execute: (Proc? given_block, *untyped args) -> untyped

  def set: (Hash[String, untyped] params) -> void
end

class Object
  # ==============================================================================
  # Kernel methods
  # ==============================================================================
  def rand: () -> Float
    | (Integer arg0) -> Integer
    | (::Range[Integer] arg0) -> Integer
    | (::Range[Float] arg0) -> Float
end

module Kernel
  alias self.oldRand self.rand
end

class Object
  def nil_or_empty?: (String string) -> bool

  # ==============================================================================
  # Linear interpolation between two values, given the duration of the change and
  # either:
  #   - the time passed since the start of the change (delta), or
  #   - the start time of the change (delta) and the current time (now)
  # ==============================================================================
  def lerp: (Numeric start_val, Numeric end_val, Numeric duration, Numeric delta, ?Numeric? now) -> Numeric
end



