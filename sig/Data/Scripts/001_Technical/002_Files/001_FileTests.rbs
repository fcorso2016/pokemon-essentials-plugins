# TypeProf 0.21.3

# Classes
class Object
  private
  def safeIsDirectory?: (String | IO f) -> bool
  def safeExists?: (String | IO f) -> bool
  def safeGlob: (String dir, String wildcard) -> Array[String]?
  def pbResolveAudioSE: (String file) -> String?
  def pbResolveBitmap: (String x) -> String?
  def pbBitmapName: (String x) -> String
  def strsplit: (String str, Regexp re) -> Array[String]
  def canonicalize: (String c) -> String
  def pbRgssExists?: (String filename) -> bool
  def pbRgssOpen: (String file, ?string | int mode) -> FileInputMixin
  def pbGetFileChar: (String file) -> String?
  def pbTryString: (String x) -> String?
  def pbGetFileString: (String file) -> String?
end

class Dir
  def self.get: (String dir, ?String filters, ?bool full) -> Array[String]
  def self.all: (String dir, ?String filters, ?bool full) -> Array[String]
  def self.safe?: (String dir) -> bool
  def self.create: (String path) -> void
  def self.all_dirs: (String dir) -> Array[String]
  def self.delete_all: (String dir) -> void
end

module FileTest
  IMAGE_EXTENSIONS: Array[String]
  AUDIO_EXTENSIONS: Array[String]

  def self.audio_exist?: (String filename) -> bool
  def self.image_exist?: (String filename) -> bool
end

module RTP
  self.@rtpPaths: nil

  def self.exists?: (String filename, ?Array[String] extensions) -> bool
  def self.getImagePath: (String filename) -> String
  def self.getAudioPath: (String filename) -> String
  def self.getPath: (String filename, ?Array[String] extensions) -> String
  def self.eachPathFor: (String filename) { (String) -> void } -> void
  def self.eachPath: { (String) -> void } -> void
  def self.getSaveFileName: (String fileName) -> String
  def self.getSaveFolder: -> String
end

interface _Inspectable
  def inspect: -> String
end

class StringInput
  include Enumerable[String]
  include _Inspectable
  @pos: Integer?
  @closed: bool

  attr_reader lineno: Integer
  attr_reader string: String
  def self.new: (String str) -> StringInput
  alias self.open self.new
  def initialize: (String str) -> void
  def close: -> void
  def closed?: -> bool
  def pos: -> Integer?
  alias tell pos
  def rewind: -> Integer
  def pos=: (Integer value) -> Integer
  def seek: (Integer offset, ?Integer whence) -> Integer
  def eof?: -> bool
  def each: -> void
  def gets: -> String
  def getc: -> String?
  def read: (?Integer? len) -> String?
  alias read_all read
  alias sysread read
end



