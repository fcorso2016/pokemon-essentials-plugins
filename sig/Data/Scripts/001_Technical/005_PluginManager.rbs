# TypeProf 0.21.3

type plugin = {
    :name => String?,
    :version => String?,
    :essentials => String?,
    :link => String?,
    :dependencies => Array[String]?,
    :incompatibilities => Array[String]?,
    :credits => Array[String]?
  }
type plugin_order = [Array[String], Hash[String, plugin]]

# Classes
module PluginManager
  @@Plugins: Hash[String, plugin]

  def self.register: (plugin options) -> plugin
  def self.error: (String msg) -> void
  def self.installed?: (String plugin_name, ?String? plugin_version, ?bool mustequal) -> bool
  def self.plugins: -> Array[plugin]
  def self.version: (String plugin_name) -> String?
  def self.link: (String plugin_name) -> String?
  def self.credits: (String plugin_name) -> Array[String]?
  def self.compare_versions: (String v1, String v2) -> Integer
  def self.pluginErrorMsg: (String name, String script) -> void
  def self.readMeta: (String dir, String file) -> void
  def self.listAll: -> Array[String]
  def self.validateDependencies: (String name, Hash[String, plugin] meta, ?Array[String]? og) -> nil
  def self.sortLoadOrder: (Array[String] order, Hash[String, plugin] plugins) -> Array[String]
  def self.getPluginOrder: -> plugin_order
  def self.needCompiling?: (Array[String] order, Hash[String, plugin] plugins) -> bool
  def self.compilePlugins: (Array[String] order, Hash[String, plugin] plugins) -> void
  def self.runPlugins: -> void
  def self.findDirectory: (String name) -> String?
end


