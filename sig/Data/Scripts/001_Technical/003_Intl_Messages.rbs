# TypeProf 0.21.3

type zero = 0
type message_data = Array[Array[Hash[String, String]] | Hash[String, String]]

# Classes
class Object
  private
  def pbGetMessage: (Integer `type`, Integer id) -> String
  def pbGetMessageFromHash: (Integer `type`, String id) -> String
  def _INTL: (String formt, *_ToS args) -> String
  def _ISPRINTF: (String formt, *_ToS args) -> String
  def _I: (String str, *_ToS arg) -> String
  def _MAPINTL: (Integer mapid, String formt, *_ToS args) -> String
  def _MAPISPRINTF: (Integer mapid, String formt, *_ToS args) -> String
end

module Translator
  def self?.gather_script_and_event_texts: -> void
  def self?.find_translatable_text_from_RGSS_script: (Array[String] items, String script) -> String
  def self?.find_translatable_text_from_event_script: (Array[String] items, String script) -> String
  def self?.normalize_value: (String value) -> String
  def self?.denormalize_value: (String value) -> String
  def self?.extract_text: (?String language_name, ?bool core_text, ?bool separate_map_files) -> void
  def self?.write_section_texts_to_file: (File f, String section_name, String language_msgs, ?String? original_msgs) -> void
  def self?.compile_text: (String dir_name, String dat_filename) -> void
  def self?.compile_text_from_file: (String text_file, Array[indexed_set[String]] all_text) -> void
end

class Translation
  @default_core_messages: message_data?
  @default_game_messages: message_data?
  @filename: String?

  attr_reader core_messages: message_data?
  attr_reader game_messages: message_data?
  def self.stringToKey: (String str) -> String
  def initialize: (?String? filename, ?bool delay_load) -> void
  def default_core_messages: -> message_data?
  def default_game_messages: -> message_data?
  def load_message_files: (String? filename) -> void
  def load_default_messages: -> void
  def save_default_messages: -> void
  def setMessages: (Integer `type`, Array[String] array) -> void
  def addMessages: (Integer `type`, Array[String] array) -> void
  def setMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def addMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def setMapMessagesAsHash: (Integer map_id, Array[String] array) -> void
  def addMapMessagesAsHash: (Integer map_id, Array[String] array) -> void
  def get: (Integer `type`, Integer id) -> String
  def getFromHash: (Integer `type`, String text) -> String
  def getFromMapHash: (Integer map_id, String text) -> String

  private
  def delayed_load_message_files: -> void
  def priv_add_to_array: (Integer `type`, Array[String] array, Array[String]? ret) -> Array[String]
  def priv_add_to_hash: (Integer `type`, Array[String] array, Hash[String, String]? ret, ?Integer map_id) -> Hash[String, String]
end

module MessageTypes
  EVENT_TEXTS: Integer
  SPECIES_NAMES: Integer
  SPECIES_CATEGORIES: Integer
  POKEDEX_ENTRIES: Integer
  SPECIES_FORM_NAMES: Integer
  MOVE_NAMES: Integer
  MOVE_DESCRIPTIONS: Integer
  ITEM_NAMES: Integer
  ITEM_NAME_PLURALS: Integer
  ITEM_DESCRIPTIONS: Integer
  ABILITY_NAMES: Integer
  ABILITY_DESCRIPTIONS: Integer
  TYPE_NAMES: Integer
  TRAINER_TYPE_NAMES: Integer
  TRAINER_NAMES: Integer
  FRONTIER_INTRO_SPEECHES: Integer
  FRONTIER_END_SPEECHES_WIN: Integer
  FRONTIER_END_SPEECHES_LOSE: Integer
  REGION_NAMES: Integer
  REGION_LOCATION_NAMES: Integer
  REGION_LOCATION_DESCRIPTIONS: Integer
  MAP_NAMES: Integer
  PHONE_MESSAGES: Integer
  TRAINER_SPEECHES_LOSE: Integer
  SCRIPT_TEXTS: Integer
  RIBBON_NAMES: Integer
  RIBBON_DESCRIPTIONS: Integer
  STORAGE_CREATOR_NAME: Integer
  ITEM_PORTION_NAMES: Integer
  ITEM_PORTION_NAME_PLURALS: Integer
  POKEMON_NICKNAMES: Integer
  @@messages: Translation

  def self.load_default_messages: -> void
  def self.load_message_files: (String filename) -> void
  def self.save_default_messages: -> void
  def self.setMessages: (Integer `type`, Array[String] array) -> void
  def self.addMessages: (Integer `type`, Array[String] array) -> void
  def self.setMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def self.addMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def self.setMapMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def self.addMapMessagesAsHash: (Integer `type`, Array[String] array) -> void
  def self.get: (Integer `type`, Integer id) -> String
  def self.getFromHash: (Integer `type`, String key) -> String
  def self.getFromMapHash: (Integer `type`, String key) -> String
end



